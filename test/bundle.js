/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "2618e91fcac54cb72ef7";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./test/script.js")(__webpack_require__.s = "./test/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/Player.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/Player.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar timeCapsule = new MC.TimeCapsule();\n\nvar _require = __webpack_require__(/*! ./helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    eltag = _require.eltag,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./html/svg */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\");\n\nvar config = __webpack_require__(/*! ./config */ \"./node_modules/@kissmybutton/motorcortex-player/dist/config.js\");\n\nvar confStyle = __webpack_require__(/*! ./html/style */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/style.js\");\n\nvar confThemes = __webpack_require__(/*! ./html/themes */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js\");\n\nvar setElements = __webpack_require__(/*! ./html/setElements */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js\");\n\nvar volumeListener = __webpack_require__(/*! ./listeners/volume */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js\");\n\nvar loopBarStartListener = __webpack_require__(/*! ./listeners/loopBarStart */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js\");\n\nvar loopBarEndListener = __webpack_require__(/*! ./listeners/loopBarEnd */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js\");\n\nvar loopStartEndListener = __webpack_require__(/*! ./listeners/loopStartEnd */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js\");\n\nvar progressBarListener = __webpack_require__(/*! ./listeners/progressBar */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js\");\n\nvar statusBtnListener = __webpack_require__(/*! ./listeners/statusBtn */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js\");\n\nvar settingsListener = __webpack_require__(/*! ./listeners/settings */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js\");\n\nvar speedListener = __webpack_require__(/*! ./listeners/speed */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js\");\n\nvar loopBtnListener = __webpack_require__(/*! ./listeners/loopBtn */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js\");\n\nvar controlsListener = __webpack_require__(/*! ./listeners/controls */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js\");\n\nvar fullscreenListener = __webpack_require__(/*! ./listeners/fullscreen */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js\");\n\nvar donkeyclipListener = __webpack_require__(/*! ./listeners/donkeyclip */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js\");\n\nvar previewListener = __webpack_require__(/*! ./listeners/preview */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js\");\n\nvar bodyListener = __webpack_require__(/*! ./listeners/body */ \"./node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js\");\n/**\n * @classdesc\n * Timer's purpose is to provide an interface through which any TimedIncident\n * (such as a Scene or a Clip) can both privide info regarding their timing\n * state but also provide an interface for interacting/altering the timing of it\n */\n\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(options) {\n    var _this = this;\n\n    _classCallCheck(this, Player);\n\n    // set defaults\n    options.id = options.id || Date.now();\n    options.preview = options.preview || false;\n    options.showVolume = options.showVolume || false;\n    options.theme = options.theme || \"transparent on-top\";\n    options.host = options.host || options.clip.props.host;\n    options.buttons = options.buttons || {};\n\n    if (options.pointerEvents === undefined || options.pointerEvents === null) {\n      options.pointerEvents = true;\n    } else {\n      options.pointerEvents = Boolean(options.pointerEvents);\n    }\n\n    options.onMillisecondChange = options.onMillisecondChange || null;\n    options.speedValues = options.speedValues || [-4, -2, -1, -0.5, 0, 0.5, 1, 2, 4]; // remove strings\n\n    for (var i in options.speedValues) {\n      if (!isFinite(options.speedValues[i])) {\n        options.speedValues.splice(i, 1);\n      }\n    }\n\n    options.speedValues.sort(function (a, b) {\n      return a - b;\n    });\n    this.className = config.name;\n    config.playerName = options.id;\n    this.options = options;\n    this.id = this.options.id;\n    this.name = config.name;\n    this.previewClip = null;\n    this.clip = options.clip; // host to apply the timer\n\n    this.clipClass = options.clipClass;\n    this.state = this.clip.runTimeInfo.state;\n    this.listeners = {};\n    this.previewScale = 0.25;\n    this.settings = {\n      volume: 1,\n      journey: null,\n      previousVolume: 1,\n      volumeMute: false,\n      needsUpdate: true,\n      resizeLoop: false,\n      loopJourney: false,\n      previewJourney: null,\n      loopActivated: false,\n      requestingLoop: false,\n      playAfterResize: false,\n      loopStartMillisecond: 0,\n      loopLastPositionXPxls: 0,\n      loopLastPositionXPercentage: 0,\n      loopEndMillisecond: this.clip.duration\n    };\n    this.functions = {\n      millisecondChange: this.millisecondChange,\n      createJourney: this.createJourney\n    }; // create the timer controls main div\n\n    setElements(this);\n    this.setTheme();\n    this.setSpeed();\n    this.subscribeToTimer();\n    this.subscribeToDurationChange();\n    this.addEventListeners();\n\n    if (this.options.preview) {\n      this.createPreviewDisplay();\n    }\n\n    window.addEventListener(\"resize\", function () {\n      if (_this.options.preview) {\n        _this.setPreviewDimentions();\n      }\n    });\n  }\n\n  _createClass(Player, [{\n    key: \"createJourney\",\n    value: function createJourney(clip, millisecond) {\n      var _this2 = this;\n\n      var clipCommands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      setTimeout(function () {\n        var def = null;\n        var _clipCommands$before = clipCommands.before,\n            before = _clipCommands$before === void 0 ? def : _clipCommands$before,\n            _clipCommands$after = clipCommands.after,\n            after = _clipCommands$after === void 0 ? def : _clipCommands$after;\n        before ? clip[before]() : null;\n        _this2.settings.journey = timeCapsule.startJourney(clip);\n\n        _this2.settings.journey.station(millisecond);\n\n        _this2.settings.journey.destination();\n\n        after ? clip[after]() : null;\n      }, 0);\n    }\n  }, {\n    key: \"millisecondChange\",\n    value: function millisecondChange(millisecond, state, roundTo, makeJouney) {\n      var executeOnMillisecondChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n      if (this.state !== state) {\n        this.state = state;\n        this.eventBroadcast(\"state-change\", state);\n      }\n\n      if (!this.settings.needsUpdate) {\n        this.clip.pause();\n        return 1;\n      }\n\n      var clip = this.clip;\n      var _this$settings = this.settings,\n          loopActivated = _this$settings.loopActivated,\n          loopEndMillisecond = _this$settings.loopEndMillisecond,\n          loopStartMillisecond = _this$settings.loopStartMillisecond;\n      var duration = this.clip.duration;\n      var _this$elements = this.elements,\n          totalBar = _this$elements.totalBar,\n          loopBar = _this$elements.loopBar;\n      var loopBarWidth = loopBar.offsetWidth;\n      var loopBarLeft = loopBar.offsetLeft / totalBar.offsetWidth;\n      var localMillisecond = millisecond - duration * loopBarLeft;\n      var localDuration = duration / totalBar.offsetWidth * loopBarWidth;\n\n      if (millisecond >= loopEndMillisecond && loopActivated && this.clip.speed >= 0) {\n        this.createJourney(clip, loopStartMillisecond + 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond >= loopEndMillisecond && loopActivated && this.clip.speed < 0) {\n        this.createJourney(clip, loopEndMillisecond - 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated && this.clip.speed >= 0) {\n        this.createJourney(clip, loopStartMillisecond + 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated && this.clip.speed < 0) {\n        this.createJourney(clip, loopEndMillisecond - 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      }\n\n      if (makeJouney) {\n        this.createJourney(clip, millisecond, {\n          after: this.settings.playAfterResize ? \"play\" : null\n        });\n      }\n\n      this.elements.runningBar.style.width = localMillisecond / localDuration * 100 + \"%\";\n      this.elements.currentTime.innerHTML = millisecond;\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"eventBroadcast\",\n    value: function eventBroadcast(eventName, state) {\n      if (eventName === \"state-change\") {\n        if (state === \"paused\" || state === \"idle\" || state === \"transitional\" || state === \"armed\" || state === \"blocked\") {\n          this.elements.statusButton.innerHTML = svg.playSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"\".concat(state.charAt(0).toUpperCase() + state.slice(1));\n\n          if (state === \"blocked\") {\n            this.elements.pointerEventPanel.innerHTML = \"\\n            <div style=\\\"width:100%;height:100%;background:rgba(0,0,0,0.5);display:flex;justify-content:center;align-items:center;\\\">\".concat(svg.loadingSVG, \"</div>\");\n          }\n        } else {\n          this.elements.statusButton.innerHTML = svg.pauseSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Playing\";\n          this.elements.pointerEventPanel.innerHTML = \"\";\n\n          if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === this.clip.duration && this.clip.speed >= 0) {\n            this.createJourney(this.clip, 1, {\n              after: \"play\"\n            });\n          } else if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === 0 && this.clip.speed < 0) {\n            this.createJourney(this.clip, this.clip.duration - 1, {\n              after: \"play\"\n            });\n          } else if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === this.clip.duration && this.clip.speed < 0) {\n            this.createJourney(this.clip, this.clip.duration - 1, {\n              after: \"play\"\n            });\n          }\n        }\n      } else if (eventName === \"duration-change\") {\n        this.elements.totalTime.innerHTML = this.clip.duration;\n        this.settings.loopEndMillisecond = this.clip.duration;\n        this.elements.pointerEventPanel.innerHTML = \"\";\n        this.millisecondChange(this.clip.runTimeInfo.currentMillisecond);\n      }\n    }\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange() {\n      this.clip.subscribeToDurationChange(this.id, this.eventBroadcast.bind(this));\n    }\n  }, {\n    key: \"subscribeToTimer\",\n    value: function subscribeToTimer() {\n      this.clip.subscribe(this.id, this.millisecondChange.bind(this));\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart() {\n      this.settings.needsUpdate = true;\n      this.settings.journey = timeCapsule.startJourney(this.clip);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(loopBarPositionX) {\n      var executeOnMillisecondChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!isFinite(loopBarPositionX)) {\n        loopBarPositionX = 0;\n      }\n\n      var duration = this.clip.duration;\n      var journey = this.settings.journey;\n      var _this$elements2 = this.elements,\n          loopBar = _this$elements2.loopBar,\n          totalBar = _this$elements2.totalBar,\n          runningBar = _this$elements2.runningBar,\n          currentTime = _this$elements2.currentTime;\n      var totalBarPositionX = loopBarPositionX + loopBar.offsetLeft;\n      var millisecond = Math.round(duration * totalBarPositionX / totalBar.offsetWidth);\n      currentTime.innerHTML = millisecond;\n      runningBar.style.width = loopBarPositionX / loopBar.offsetWidth * 100 + \"%\";\n      journey.station(millisecond);\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd() {\n      this.settings.journey.destination();\n    }\n  }, {\n    key: \"createProgressDrag\",\n    value: function createProgressDrag(loopBarPositionX) {\n      this.handleDragStart();\n      this.handleDrag(loopBarPositionX);\n      this.handleDragEnd();\n    }\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      loopBarEndListener(this);\n      progressBarListener(this);\n      loopBarStartListener(this);\n      loopStartEndListener(this);\n      volumeListener(this);\n      statusBtnListener(this);\n      settingsListener(this);\n      speedListener(this);\n      loopBtnListener(this);\n      controlsListener(this);\n      fullscreenListener(this);\n      donkeyclipListener(this);\n      previewListener(this);\n      bodyListener(this);\n    }\n  }, {\n    key: \"launchIntoFullscreen\",\n    value: function launchIntoFullscreen(element) {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      }\n    }\n  }, {\n    key: \"exitFullscreen\",\n    value: function exitFullscreen() {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme() {\n      // replace multiple spaces with one space\n      this.options.theme.replace(/\\s\\s+/g, \" \");\n      this.options.theme.trim();\n\n      if (!this.options.theme.includes(\"on-top\") && !this.options.theme.includes(\"position-default\")) {\n        this.options.theme += \" position-default\";\n      }\n\n      var theme = {};\n\n      for (var i in this.options.theme.split(\" \")) {\n        var confTheme = confThemes(this.options.theme.split(\" \")[i]);\n\n        for (var q in confTheme || {}) {\n          theme[q] = confTheme[q];\n        }\n      }\n\n      var css = confStyle(theme, this.name, this.options);\n      var style = elcreate(\"style\");\n      style.styleSheet ? style.styleSheet.cssText = css : style.appendChild(document.createTextNode(css)); // append player style to document\n\n      eltag(\"head\")[0].appendChild(style);\n    }\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed() {\n      var _this3 = this;\n\n      var currentSpeed;\n      this.clip.speed == 1 ? currentSpeed = \"Normal\" : currentSpeed = this.clip.speed;\n      this.elements.speedCurrent.innerHTML = currentSpeed;\n\n      var targetZone = function () {\n        for (var i = 0; i < _this3.options.speedValues.length - 1; i++) {\n          if (_this3.options.speedValues[i] <= _this3.clip.speed && _this3.options.speedValues[i + 1] > _this3.clip.speed) {\n            return i + Math.abs((_this3.clip.speed - _this3.options.speedValues[i]) / (_this3.options.speedValues[i] - _this3.options.speedValues[i + 1]));\n          }\n        }\n      }();\n\n      var step = 1 / (this.options.speedValues.length - 1);\n      var positionY = (targetZone * step - 1) * -1 * (this.options.speedValues.length - 1) * 16;\n      elid(\"\".concat(this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  }, {\n    key: \"calculateSpeed\",\n    value: function calculateSpeed(step, arrayOfValues, currentPercentage) {\n      var botLimitIndex = Math.floor(currentPercentage / step);\n\n      if (botLimitIndex === arrayOfValues.length - 1) {\n        return arrayOfValues[botLimitIndex].toFixed(1);\n      }\n\n      var limitZonePercentage = currentPercentage / step % 1;\n      var limitZoneLength = Math.abs(arrayOfValues[botLimitIndex] - arrayOfValues[botLimitIndex + 1]);\n      var realZoneSpeed = limitZonePercentage * limitZoneLength;\n      var realSpeed = (realZoneSpeed + arrayOfValues[botLimitIndex]).toFixed(1);\n\n      if (realSpeed == 0) {\n        return \"0.0\";\n      }\n\n      return realSpeed;\n    }\n  }, {\n    key: \"createPreviewDisplay\",\n    value: function createPreviewDisplay() {\n      this.previewClip = this.clip.paste(elid(\"\".concat(this.name, \"-hover-display\")));\n      var previewClip = elid(\"\".concat(this.name, \"-hover-display\"));\n      previewClip.style.position = \"absolute\";\n      previewClip.style.zIndex = 1;\n      this.setPreviewDimentions();\n    }\n  }, {\n    key: \"setPreviewDimentions\",\n    value: function setPreviewDimentions() {\n      var clip = this.clip.props.host;\n      var previewClip = this.previewClip.ownClip.props.host;\n      var clipWidth = clip.offsetWidth;\n      var clipHeight = clip.offsetHeight;\n      var previewWidth = clipWidth * this.previewScale; // max width is 300\n\n      if (previewWidth > 300) {\n        // previewWidth = parseFloat(\n        //   elid(`${this.name}-hover-display`).style.maxWidth\n        // );\n        previewWidth = 300;\n        this.previewScale = previewWidth / clipWidth;\n      }\n\n      elid(\"\".concat(this.name, \"-hover-display\")).style.width = clipWidth + \"px\";\n      elid(\"\".concat(this.name, \"-hover-display\")).style.height = clipHeight + \"px\";\n      previewClip.style.transform = \"scale(\".concat(this.previewScale, \")\");\n      previewClip.style.transformOrigin = \"center bottom\";\n      previewClip.style.boxSizing = \"border-box\";\n    }\n  }]);\n\n  return Player;\n}();\n\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9QbGF5ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9QbGF5ZXIuanM/OWNiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgTUMgPSByZXF1aXJlKFwiQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleFwiKTtcblxudmFyIHRpbWVDYXBzdWxlID0gbmV3IE1DLlRpbWVDYXBzdWxlKCk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIiksXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQsXG4gICAgZWx0YWcgPSBfcmVxdWlyZS5lbHRhZyxcbiAgICBlbGNyZWF0ZSA9IF9yZXF1aXJlLmVsY3JlYXRlO1xuXG52YXIgc3ZnID0gcmVxdWlyZShcIi4vaHRtbC9zdmdcIik7XG5cbnZhciBjb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5cbnZhciBjb25mU3R5bGUgPSByZXF1aXJlKFwiLi9odG1sL3N0eWxlXCIpO1xuXG52YXIgY29uZlRoZW1lcyA9IHJlcXVpcmUoXCIuL2h0bWwvdGhlbWVzXCIpO1xuXG52YXIgc2V0RWxlbWVudHMgPSByZXF1aXJlKFwiLi9odG1sL3NldEVsZW1lbnRzXCIpO1xuXG52YXIgdm9sdW1lTGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvdm9sdW1lXCIpO1xuXG52YXIgbG9vcEJhclN0YXJ0TGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvbG9vcEJhclN0YXJ0XCIpO1xuXG52YXIgbG9vcEJhckVuZExpc3RlbmVyID0gcmVxdWlyZShcIi4vbGlzdGVuZXJzL2xvb3BCYXJFbmRcIik7XG5cbnZhciBsb29wU3RhcnRFbmRMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL2xpc3RlbmVycy9sb29wU3RhcnRFbmRcIik7XG5cbnZhciBwcm9ncmVzc0Jhckxpc3RlbmVyID0gcmVxdWlyZShcIi4vbGlzdGVuZXJzL3Byb2dyZXNzQmFyXCIpO1xuXG52YXIgc3RhdHVzQnRuTGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvc3RhdHVzQnRuXCIpO1xuXG52YXIgc2V0dGluZ3NMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL2xpc3RlbmVycy9zZXR0aW5nc1wiKTtcblxudmFyIHNwZWVkTGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvc3BlZWRcIik7XG5cbnZhciBsb29wQnRuTGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvbG9vcEJ0blwiKTtcblxudmFyIGNvbnRyb2xzTGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvY29udHJvbHNcIik7XG5cbnZhciBmdWxsc2NyZWVuTGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvZnVsbHNjcmVlblwiKTtcblxudmFyIGRvbmtleWNsaXBMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL2xpc3RlbmVycy9kb25rZXljbGlwXCIpO1xuXG52YXIgcHJldmlld0xpc3RlbmVyID0gcmVxdWlyZShcIi4vbGlzdGVuZXJzL3ByZXZpZXdcIik7XG5cbnZhciBib2R5TGlzdGVuZXIgPSByZXF1aXJlKFwiLi9saXN0ZW5lcnMvYm9keVwiKTtcbi8qKlxuICogQGNsYXNzZGVzY1xuICogVGltZXIncyBwdXJwb3NlIGlzIHRvIHByb3ZpZGUgYW4gaW50ZXJmYWNlIHRocm91Z2ggd2hpY2ggYW55IFRpbWVkSW5jaWRlbnRcbiAqIChzdWNoIGFzIGEgU2NlbmUgb3IgYSBDbGlwKSBjYW4gYm90aCBwcml2aWRlIGluZm8gcmVnYXJkaW5nIHRoZWlyIHRpbWluZ1xuICogc3RhdGUgYnV0IGFsc28gcHJvdmlkZSBhbiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nL2FsdGVyaW5nIHRoZSB0aW1pbmcgb2YgaXRcbiAqL1xuXG5cbnZhciBQbGF5ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbGF5ZXIob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGxheWVyKTtcblxuICAgIC8vIHNldCBkZWZhdWx0c1xuICAgIG9wdGlvbnMuaWQgPSBvcHRpb25zLmlkIHx8IERhdGUubm93KCk7XG4gICAgb3B0aW9ucy5wcmV2aWV3ID0gb3B0aW9ucy5wcmV2aWV3IHx8IGZhbHNlO1xuICAgIG9wdGlvbnMuc2hvd1ZvbHVtZSA9IG9wdGlvbnMuc2hvd1ZvbHVtZSB8fCBmYWxzZTtcbiAgICBvcHRpb25zLnRoZW1lID0gb3B0aW9ucy50aGVtZSB8fCBcInRyYW5zcGFyZW50IG9uLXRvcFwiO1xuICAgIG9wdGlvbnMuaG9zdCA9IG9wdGlvbnMuaG9zdCB8fCBvcHRpb25zLmNsaXAucHJvcHMuaG9zdDtcbiAgICBvcHRpb25zLmJ1dHRvbnMgPSBvcHRpb25zLmJ1dHRvbnMgfHwge307XG5cbiAgICBpZiAob3B0aW9ucy5wb2ludGVyRXZlbnRzID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5wb2ludGVyRXZlbnRzID09PSBudWxsKSB7XG4gICAgICBvcHRpb25zLnBvaW50ZXJFdmVudHMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLnBvaW50ZXJFdmVudHMgPSBCb29sZWFuKG9wdGlvbnMucG9pbnRlckV2ZW50cyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5vbk1pbGxpc2Vjb25kQ2hhbmdlID0gb3B0aW9ucy5vbk1pbGxpc2Vjb25kQ2hhbmdlIHx8IG51bGw7XG4gICAgb3B0aW9ucy5zcGVlZFZhbHVlcyA9IG9wdGlvbnMuc3BlZWRWYWx1ZXMgfHwgWy00LCAtMiwgLTEsIC0wLjUsIDAsIDAuNSwgMSwgMiwgNF07IC8vIHJlbW92ZSBzdHJpbmdzXG5cbiAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMuc3BlZWRWYWx1ZXMpIHtcbiAgICAgIGlmICghaXNGaW5pdGUob3B0aW9ucy5zcGVlZFZhbHVlc1tpXSkpIHtcbiAgICAgICAgb3B0aW9ucy5zcGVlZFZhbHVlcy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9ucy5zcGVlZFZhbHVlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGI7XG4gICAgfSk7XG4gICAgdGhpcy5jbGFzc05hbWUgPSBjb25maWcubmFtZTtcbiAgICBjb25maWcucGxheWVyTmFtZSA9IG9wdGlvbnMuaWQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRpb25zLmlkO1xuICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMucHJldmlld0NsaXAgPSBudWxsO1xuICAgIHRoaXMuY2xpcCA9IG9wdGlvbnMuY2xpcDsgLy8gaG9zdCB0byBhcHBseSB0aGUgdGltZXJcblxuICAgIHRoaXMuY2xpcENsYXNzID0gb3B0aW9ucy5jbGlwQ2xhc3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMucHJldmlld1NjYWxlID0gMC4yNTtcbiAgICB0aGlzLnNldHRpbmdzID0ge1xuICAgICAgdm9sdW1lOiAxLFxuICAgICAgam91cm5leTogbnVsbCxcbiAgICAgIHByZXZpb3VzVm9sdW1lOiAxLFxuICAgICAgdm9sdW1lTXV0ZTogZmFsc2UsXG4gICAgICBuZWVkc1VwZGF0ZTogdHJ1ZSxcbiAgICAgIHJlc2l6ZUxvb3A6IGZhbHNlLFxuICAgICAgbG9vcEpvdXJuZXk6IGZhbHNlLFxuICAgICAgcHJldmlld0pvdXJuZXk6IG51bGwsXG4gICAgICBsb29wQWN0aXZhdGVkOiBmYWxzZSxcbiAgICAgIHJlcXVlc3RpbmdMb29wOiBmYWxzZSxcbiAgICAgIHBsYXlBZnRlclJlc2l6ZTogZmFsc2UsXG4gICAgICBsb29wU3RhcnRNaWxsaXNlY29uZDogMCxcbiAgICAgIGxvb3BMYXN0UG9zaXRpb25YUHhsczogMCxcbiAgICAgIGxvb3BMYXN0UG9zaXRpb25YUGVyY2VudGFnZTogMCxcbiAgICAgIGxvb3BFbmRNaWxsaXNlY29uZDogdGhpcy5jbGlwLmR1cmF0aW9uXG4gICAgfTtcbiAgICB0aGlzLmZ1bmN0aW9ucyA9IHtcbiAgICAgIG1pbGxpc2Vjb25kQ2hhbmdlOiB0aGlzLm1pbGxpc2Vjb25kQ2hhbmdlLFxuICAgICAgY3JlYXRlSm91cm5leTogdGhpcy5jcmVhdGVKb3VybmV5XG4gICAgfTsgLy8gY3JlYXRlIHRoZSB0aW1lciBjb250cm9scyBtYWluIGRpdlxuXG4gICAgc2V0RWxlbWVudHModGhpcyk7XG4gICAgdGhpcy5zZXRUaGVtZSgpO1xuICAgIHRoaXMuc2V0U3BlZWQoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvVGltZXIoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvRHVyYXRpb25DaGFuZ2UoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgIHRoaXMuY3JlYXRlUHJldmlld0Rpc3BsYXkoKTtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIF90aGlzLnNldFByZXZpZXdEaW1lbnRpb25zKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGxheWVyLCBbe1xuICAgIGtleTogXCJjcmVhdGVKb3VybmV5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUpvdXJuZXkoY2xpcCwgbWlsbGlzZWNvbmQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgY2xpcENvbW1hbmRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVmID0gbnVsbDtcbiAgICAgICAgdmFyIF9jbGlwQ29tbWFuZHMkYmVmb3JlID0gY2xpcENvbW1hbmRzLmJlZm9yZSxcbiAgICAgICAgICAgIGJlZm9yZSA9IF9jbGlwQ29tbWFuZHMkYmVmb3JlID09PSB2b2lkIDAgPyBkZWYgOiBfY2xpcENvbW1hbmRzJGJlZm9yZSxcbiAgICAgICAgICAgIF9jbGlwQ29tbWFuZHMkYWZ0ZXIgPSBjbGlwQ29tbWFuZHMuYWZ0ZXIsXG4gICAgICAgICAgICBhZnRlciA9IF9jbGlwQ29tbWFuZHMkYWZ0ZXIgPT09IHZvaWQgMCA/IGRlZiA6IF9jbGlwQ29tbWFuZHMkYWZ0ZXI7XG4gICAgICAgIGJlZm9yZSA/IGNsaXBbYmVmb3JlXSgpIDogbnVsbDtcbiAgICAgICAgX3RoaXMyLnNldHRpbmdzLmpvdXJuZXkgPSB0aW1lQ2Fwc3VsZS5zdGFydEpvdXJuZXkoY2xpcCk7XG5cbiAgICAgICAgX3RoaXMyLnNldHRpbmdzLmpvdXJuZXkuc3RhdGlvbihtaWxsaXNlY29uZCk7XG5cbiAgICAgICAgX3RoaXMyLnNldHRpbmdzLmpvdXJuZXkuZGVzdGluYXRpb24oKTtcblxuICAgICAgICBhZnRlciA/IGNsaXBbYWZ0ZXJdKCkgOiBudWxsO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1pbGxpc2Vjb25kQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1pbGxpc2Vjb25kQ2hhbmdlKG1pbGxpc2Vjb25kLCBzdGF0ZSwgcm91bmRUbywgbWFrZUpvdW5leSkge1xuICAgICAgdmFyIGV4ZWN1dGVPbk1pbGxpc2Vjb25kQ2hhbmdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLmV2ZW50QnJvYWRjYXN0KFwic3RhdGUtY2hhbmdlXCIsIHN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlKSB7XG4gICAgICAgIHRoaXMuY2xpcC5wYXVzZSgpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsaXAgPSB0aGlzLmNsaXA7XG4gICAgICB2YXIgX3RoaXMkc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgICAgIGxvb3BBY3RpdmF0ZWQgPSBfdGhpcyRzZXR0aW5ncy5sb29wQWN0aXZhdGVkLFxuICAgICAgICAgIGxvb3BFbmRNaWxsaXNlY29uZCA9IF90aGlzJHNldHRpbmdzLmxvb3BFbmRNaWxsaXNlY29uZCxcbiAgICAgICAgICBsb29wU3RhcnRNaWxsaXNlY29uZCA9IF90aGlzJHNldHRpbmdzLmxvb3BTdGFydE1pbGxpc2Vjb25kO1xuICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5jbGlwLmR1cmF0aW9uO1xuICAgICAgdmFyIF90aGlzJGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgICB0b3RhbEJhciA9IF90aGlzJGVsZW1lbnRzLnRvdGFsQmFyLFxuICAgICAgICAgIGxvb3BCYXIgPSBfdGhpcyRlbGVtZW50cy5sb29wQmFyO1xuICAgICAgdmFyIGxvb3BCYXJXaWR0aCA9IGxvb3BCYXIub2Zmc2V0V2lkdGg7XG4gICAgICB2YXIgbG9vcEJhckxlZnQgPSBsb29wQmFyLm9mZnNldExlZnQgLyB0b3RhbEJhci5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBsb2NhbE1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQgLSBkdXJhdGlvbiAqIGxvb3BCYXJMZWZ0O1xuICAgICAgdmFyIGxvY2FsRHVyYXRpb24gPSBkdXJhdGlvbiAvIHRvdGFsQmFyLm9mZnNldFdpZHRoICogbG9vcEJhcldpZHRoO1xuXG4gICAgICBpZiAobWlsbGlzZWNvbmQgPj0gbG9vcEVuZE1pbGxpc2Vjb25kICYmIGxvb3BBY3RpdmF0ZWQgJiYgdGhpcy5jbGlwLnNwZWVkID49IDApIHtcbiAgICAgICAgdGhpcy5jcmVhdGVKb3VybmV5KGNsaXAsIGxvb3BTdGFydE1pbGxpc2Vjb25kICsgMSwge1xuICAgICAgICAgIGFmdGVyOiB0aGlzLnNldHRpbmdzLnBsYXlBZnRlclJlc2l6ZSB8fCB0aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT0gXCJwbGF5aW5nXCIgPyBcInBsYXlcIiA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIGlmIChtaWxsaXNlY29uZCA+PSBsb29wRW5kTWlsbGlzZWNvbmQgJiYgbG9vcEFjdGl2YXRlZCAmJiB0aGlzLmNsaXAuc3BlZWQgPCAwKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlSm91cm5leShjbGlwLCBsb29wRW5kTWlsbGlzZWNvbmQgLSAxLCB7XG4gICAgICAgICAgYWZ0ZXI6IHRoaXMuc2V0dGluZ3MucGxheUFmdGVyUmVzaXplIHx8IHRoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PSBcInBsYXlpbmdcIiA/IFwicGxheVwiIDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2UgaWYgKG1pbGxpc2Vjb25kIDw9IGxvb3BTdGFydE1pbGxpc2Vjb25kICYmIGxvb3BBY3RpdmF0ZWQgJiYgdGhpcy5jbGlwLnNwZWVkID49IDApIHtcbiAgICAgICAgdGhpcy5jcmVhdGVKb3VybmV5KGNsaXAsIGxvb3BTdGFydE1pbGxpc2Vjb25kICsgMSwge1xuICAgICAgICAgIGFmdGVyOiB0aGlzLnNldHRpbmdzLnBsYXlBZnRlclJlc2l6ZSB8fCB0aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT0gXCJwbGF5aW5nXCIgPyBcInBsYXlcIiA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIGlmIChtaWxsaXNlY29uZCA8PSBsb29wU3RhcnRNaWxsaXNlY29uZCAmJiBsb29wQWN0aXZhdGVkICYmIHRoaXMuY2xpcC5zcGVlZCA8IDApIHtcbiAgICAgICAgdGhpcy5jcmVhdGVKb3VybmV5KGNsaXAsIGxvb3BFbmRNaWxsaXNlY29uZCAtIDEsIHtcbiAgICAgICAgICBhZnRlcjogdGhpcy5zZXR0aW5ncy5wbGF5QWZ0ZXJSZXNpemUgfHwgdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09IFwicGxheWluZ1wiID8gXCJwbGF5XCIgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ha2VKb3VuZXkpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVKb3VybmV5KGNsaXAsIG1pbGxpc2Vjb25kLCB7XG4gICAgICAgICAgYWZ0ZXI6IHRoaXMuc2V0dGluZ3MucGxheUFmdGVyUmVzaXplID8gXCJwbGF5XCIgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnRzLnJ1bm5pbmdCYXIuc3R5bGUud2lkdGggPSBsb2NhbE1pbGxpc2Vjb25kIC8gbG9jYWxEdXJhdGlvbiAqIDEwMCArIFwiJVwiO1xuICAgICAgdGhpcy5lbGVtZW50cy5jdXJyZW50VGltZS5pbm5lckhUTUwgPSBtaWxsaXNlY29uZDtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vbk1pbGxpc2Vjb25kQ2hhbmdlICYmIGV4ZWN1dGVPbk1pbGxpc2Vjb25kQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbk1pbGxpc2Vjb25kQ2hhbmdlKG1pbGxpc2Vjb25kKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXZlbnRCcm9hZGNhc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXZlbnRCcm9hZGNhc3QoZXZlbnROYW1lLCBzdGF0ZSkge1xuICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gXCJzdGF0ZS1jaGFuZ2VcIikge1xuICAgICAgICBpZiAoc3RhdGUgPT09IFwicGF1c2VkXCIgfHwgc3RhdGUgPT09IFwiaWRsZVwiIHx8IHN0YXRlID09PSBcInRyYW5zaXRpb25hbFwiIHx8IHN0YXRlID09PSBcImFybWVkXCIgfHwgc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24uaW5uZXJIVE1MID0gc3ZnLnBsYXlTVkc7XG4gICAgICAgICAgdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24uYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5pbmRpY2F0b3IpO1xuICAgICAgICAgIHRoaXMuZWxlbWVudHMuaW5kaWNhdG9yLmlubmVySFRNTCA9IFwiXCIuY29uY2F0KHN0YXRlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RhdGUuc2xpY2UoMSkpO1xuXG4gICAgICAgICAgaWYgKHN0YXRlID09PSBcImJsb2NrZWRcIikge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5pbm5lckhUTUwgPSBcIlxcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XFxcIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuNSk7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO1xcXCI+XCIuY29uY2F0KHN2Zy5sb2FkaW5nU1ZHLCBcIjwvZGl2PlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24uaW5uZXJIVE1MID0gc3ZnLnBhdXNlU1ZHO1xuICAgICAgICAgIHRoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuaW5kaWNhdG9yKTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLmluZGljYXRvci5pbm5lckhUTUwgPSBcIlBsYXlpbmdcIjtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLnBvaW50ZXJFdmVudFBhbmVsLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICAgICAgICBpZiAoc3RhdGUgPT09IFwicGxheWluZ1wiICYmIHRoaXMuY2xpcC5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQgPT09IHRoaXMuY2xpcC5kdXJhdGlvbiAmJiB0aGlzLmNsaXAuc3BlZWQgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVKb3VybmV5KHRoaXMuY2xpcCwgMSwge1xuICAgICAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFwicGxheWluZ1wiICYmIHRoaXMuY2xpcC5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQgPT09IDAgJiYgdGhpcy5jbGlwLnNwZWVkIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVKb3VybmV5KHRoaXMuY2xpcCwgdGhpcy5jbGlwLmR1cmF0aW9uIC0gMSwge1xuICAgICAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFwicGxheWluZ1wiICYmIHRoaXMuY2xpcC5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQgPT09IHRoaXMuY2xpcC5kdXJhdGlvbiAmJiB0aGlzLmNsaXAuc3BlZWQgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUpvdXJuZXkodGhpcy5jbGlwLCB0aGlzLmNsaXAuZHVyYXRpb24gLSAxLCB7XG4gICAgICAgICAgICAgIGFmdGVyOiBcInBsYXlcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZSA9PT0gXCJkdXJhdGlvbi1jaGFuZ2VcIikge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnRvdGFsVGltZS5pbm5lckhUTUwgPSB0aGlzLmNsaXAuZHVyYXRpb247XG4gICAgICAgIHRoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kID0gdGhpcy5jbGlwLmR1cmF0aW9uO1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnBvaW50ZXJFdmVudFBhbmVsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIHRoaXMubWlsbGlzZWNvbmRDaGFuZ2UodGhpcy5jbGlwLnJ1blRpbWVJbmZvLmN1cnJlbnRNaWxsaXNlY29uZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN1YnNjcmliZVRvRHVyYXRpb25DaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlVG9EdXJhdGlvbkNoYW5nZSgpIHtcbiAgICAgIHRoaXMuY2xpcC5zdWJzY3JpYmVUb0R1cmF0aW9uQ2hhbmdlKHRoaXMuaWQsIHRoaXMuZXZlbnRCcm9hZGNhc3QuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN1YnNjcmliZVRvVGltZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlVG9UaW1lcigpIHtcbiAgICAgIHRoaXMuY2xpcC5zdWJzY3JpYmUodGhpcy5pZCwgdGhpcy5taWxsaXNlY29uZENoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlRHJhZ1N0YXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydCgpIHtcbiAgICAgIHRoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5zZXR0aW5ncy5qb3VybmV5ID0gdGltZUNhcHN1bGUuc3RhcnRKb3VybmV5KHRoaXMuY2xpcCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZURyYWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRHJhZyhsb29wQmFyUG9zaXRpb25YKSB7XG4gICAgICB2YXIgZXhlY3V0ZU9uTWlsbGlzZWNvbmRDaGFuZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICAgIGlmICghaXNGaW5pdGUobG9vcEJhclBvc2l0aW9uWCkpIHtcbiAgICAgICAgbG9vcEJhclBvc2l0aW9uWCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuY2xpcC5kdXJhdGlvbjtcbiAgICAgIHZhciBqb3VybmV5ID0gdGhpcy5zZXR0aW5ncy5qb3VybmV5O1xuICAgICAgdmFyIF90aGlzJGVsZW1lbnRzMiA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgICAgbG9vcEJhciA9IF90aGlzJGVsZW1lbnRzMi5sb29wQmFyLFxuICAgICAgICAgIHRvdGFsQmFyID0gX3RoaXMkZWxlbWVudHMyLnRvdGFsQmFyLFxuICAgICAgICAgIHJ1bm5pbmdCYXIgPSBfdGhpcyRlbGVtZW50czIucnVubmluZ0JhcixcbiAgICAgICAgICBjdXJyZW50VGltZSA9IF90aGlzJGVsZW1lbnRzMi5jdXJyZW50VGltZTtcbiAgICAgIHZhciB0b3RhbEJhclBvc2l0aW9uWCA9IGxvb3BCYXJQb3NpdGlvblggKyBsb29wQmFyLm9mZnNldExlZnQ7XG4gICAgICB2YXIgbWlsbGlzZWNvbmQgPSBNYXRoLnJvdW5kKGR1cmF0aW9uICogdG90YWxCYXJQb3NpdGlvblggLyB0b3RhbEJhci5vZmZzZXRXaWR0aCk7XG4gICAgICBjdXJyZW50VGltZS5pbm5lckhUTUwgPSBtaWxsaXNlY29uZDtcbiAgICAgIHJ1bm5pbmdCYXIuc3R5bGUud2lkdGggPSBsb29wQmFyUG9zaXRpb25YIC8gbG9vcEJhci5vZmZzZXRXaWR0aCAqIDEwMCArIFwiJVwiO1xuICAgICAgam91cm5leS5zdGF0aW9uKG1pbGxpc2Vjb25kKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vbk1pbGxpc2Vjb25kQ2hhbmdlICYmIGV4ZWN1dGVPbk1pbGxpc2Vjb25kQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbk1pbGxpc2Vjb25kQ2hhbmdlKG1pbGxpc2Vjb25kKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlRHJhZ0VuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVEcmFnRW5kKCkge1xuICAgICAgdGhpcy5zZXR0aW5ncy5qb3VybmV5LmRlc3RpbmF0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVByb2dyZXNzRHJhZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVQcm9ncmVzc0RyYWcobG9vcEJhclBvc2l0aW9uWCkge1xuICAgICAgdGhpcy5oYW5kbGVEcmFnU3RhcnQoKTtcbiAgICAgIHRoaXMuaGFuZGxlRHJhZyhsb29wQmFyUG9zaXRpb25YKTtcbiAgICAgIHRoaXMuaGFuZGxlRHJhZ0VuZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFdmVudExpc3RlbmVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIGxvb3BCYXJFbmRMaXN0ZW5lcih0aGlzKTtcbiAgICAgIHByb2dyZXNzQmFyTGlzdGVuZXIodGhpcyk7XG4gICAgICBsb29wQmFyU3RhcnRMaXN0ZW5lcih0aGlzKTtcbiAgICAgIGxvb3BTdGFydEVuZExpc3RlbmVyKHRoaXMpO1xuICAgICAgdm9sdW1lTGlzdGVuZXIodGhpcyk7XG4gICAgICBzdGF0dXNCdG5MaXN0ZW5lcih0aGlzKTtcbiAgICAgIHNldHRpbmdzTGlzdGVuZXIodGhpcyk7XG4gICAgICBzcGVlZExpc3RlbmVyKHRoaXMpO1xuICAgICAgbG9vcEJ0bkxpc3RlbmVyKHRoaXMpO1xuICAgICAgY29udHJvbHNMaXN0ZW5lcih0aGlzKTtcbiAgICAgIGZ1bGxzY3JlZW5MaXN0ZW5lcih0aGlzKTtcbiAgICAgIGRvbmtleWNsaXBMaXN0ZW5lcih0aGlzKTtcbiAgICAgIHByZXZpZXdMaXN0ZW5lcih0aGlzKTtcbiAgICAgIGJvZHlMaXN0ZW5lcih0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGF1bmNoSW50b0Z1bGxzY3JlZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGF1bmNoSW50b0Z1bGxzY3JlZW4oZWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHRoaXMuc2V0UHJldmlld0RpbWVudGlvbnMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtZW50cy5tY1BsYXllci5jbGFzc0xpc3QudG9nZ2xlKFwiZnVsbC1zY3JlZW5cIik7XG5cbiAgICAgIGlmIChlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgIGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICBlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4aXRGdWxsc2NyZWVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHRoaXMuc2V0UHJldmlld0RpbWVudGlvbnMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtZW50cy5tY1BsYXllci5jbGFzc0xpc3QudG9nZ2xlKFwiZnVsbC1zY3JlZW5cIik7XG5cbiAgICAgIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgICAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0VGhlbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGhlbWUoKSB7XG4gICAgICAvLyByZXBsYWNlIG11bHRpcGxlIHNwYWNlcyB3aXRoIG9uZSBzcGFjZVxuICAgICAgdGhpcy5vcHRpb25zLnRoZW1lLnJlcGxhY2UoL1xcc1xccysvZywgXCIgXCIpO1xuICAgICAgdGhpcy5vcHRpb25zLnRoZW1lLnRyaW0oKTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudGhlbWUuaW5jbHVkZXMoXCJvbi10b3BcIikgJiYgIXRoaXMub3B0aW9ucy50aGVtZS5pbmNsdWRlcyhcInBvc2l0aW9uLWRlZmF1bHRcIikpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnRoZW1lICs9IFwiIHBvc2l0aW9uLWRlZmF1bHRcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRoZW1lID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5vcHRpb25zLnRoZW1lLnNwbGl0KFwiIFwiKSkge1xuICAgICAgICB2YXIgY29uZlRoZW1lID0gY29uZlRoZW1lcyh0aGlzLm9wdGlvbnMudGhlbWUuc3BsaXQoXCIgXCIpW2ldKTtcblxuICAgICAgICBmb3IgKHZhciBxIGluIGNvbmZUaGVtZSB8fCB7fSkge1xuICAgICAgICAgIHRoZW1lW3FdID0gY29uZlRoZW1lW3FdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjc3MgPSBjb25mU3R5bGUodGhlbWUsIHRoaXMubmFtZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIHZhciBzdHlsZSA9IGVsY3JlYXRlKFwic3R5bGVcIik7XG4gICAgICBzdHlsZS5zdHlsZVNoZWV0ID8gc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzIDogc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7IC8vIGFwcGVuZCBwbGF5ZXIgc3R5bGUgdG8gZG9jdW1lbnRcblxuICAgICAgZWx0YWcoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U3BlZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3BlZWQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGN1cnJlbnRTcGVlZDtcbiAgICAgIHRoaXMuY2xpcC5zcGVlZCA9PSAxID8gY3VycmVudFNwZWVkID0gXCJOb3JtYWxcIiA6IGN1cnJlbnRTcGVlZCA9IHRoaXMuY2xpcC5zcGVlZDtcbiAgICAgIHRoaXMuZWxlbWVudHMuc3BlZWRDdXJyZW50LmlubmVySFRNTCA9IGN1cnJlbnRTcGVlZDtcblxuICAgICAgdmFyIHRhcmdldFpvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5vcHRpb25zLnNwZWVkVmFsdWVzW2ldIDw9IF90aGlzMy5jbGlwLnNwZWVkICYmIF90aGlzMy5vcHRpb25zLnNwZWVkVmFsdWVzW2kgKyAxXSA+IF90aGlzMy5jbGlwLnNwZWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaSArIE1hdGguYWJzKChfdGhpczMuY2xpcC5zcGVlZCAtIF90aGlzMy5vcHRpb25zLnNwZWVkVmFsdWVzW2ldKSAvIChfdGhpczMub3B0aW9ucy5zcGVlZFZhbHVlc1tpXSAtIF90aGlzMy5vcHRpb25zLnNwZWVkVmFsdWVzW2kgKyAxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSgpO1xuXG4gICAgICB2YXIgc3RlcCA9IDEgLyAodGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIHBvc2l0aW9uWSA9ICh0YXJnZXRab25lICogc3RlcCAtIDEpICogLTEgKiAodGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLmxlbmd0aCAtIDEpICogMTY7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCItc3BlZWQtY3Vyc29yXCIpKS5zdHlsZS50b3AgPSBwb3NpdGlvblkgKyBcInB4XCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhbGN1bGF0ZVNwZWVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZVNwZWVkKHN0ZXAsIGFycmF5T2ZWYWx1ZXMsIGN1cnJlbnRQZXJjZW50YWdlKSB7XG4gICAgICB2YXIgYm90TGltaXRJbmRleCA9IE1hdGguZmxvb3IoY3VycmVudFBlcmNlbnRhZ2UgLyBzdGVwKTtcblxuICAgICAgaWYgKGJvdExpbWl0SW5kZXggPT09IGFycmF5T2ZWYWx1ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gYXJyYXlPZlZhbHVlc1tib3RMaW1pdEluZGV4XS50b0ZpeGVkKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGltaXRab25lUGVyY2VudGFnZSA9IGN1cnJlbnRQZXJjZW50YWdlIC8gc3RlcCAlIDE7XG4gICAgICB2YXIgbGltaXRab25lTGVuZ3RoID0gTWF0aC5hYnMoYXJyYXlPZlZhbHVlc1tib3RMaW1pdEluZGV4XSAtIGFycmF5T2ZWYWx1ZXNbYm90TGltaXRJbmRleCArIDFdKTtcbiAgICAgIHZhciByZWFsWm9uZVNwZWVkID0gbGltaXRab25lUGVyY2VudGFnZSAqIGxpbWl0Wm9uZUxlbmd0aDtcbiAgICAgIHZhciByZWFsU3BlZWQgPSAocmVhbFpvbmVTcGVlZCArIGFycmF5T2ZWYWx1ZXNbYm90TGltaXRJbmRleF0pLnRvRml4ZWQoMSk7XG5cbiAgICAgIGlmIChyZWFsU3BlZWQgPT0gMCkge1xuICAgICAgICByZXR1cm4gXCIwLjBcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWxTcGVlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlUHJldmlld0Rpc3BsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJldmlld0Rpc3BsYXkoKSB7XG4gICAgICB0aGlzLnByZXZpZXdDbGlwID0gdGhpcy5jbGlwLnBhc3RlKGVsaWQoXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKSk7XG4gICAgICB2YXIgcHJldmlld0NsaXAgPSBlbGlkKFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCItaG92ZXItZGlzcGxheVwiKSk7XG4gICAgICBwcmV2aWV3Q2xpcC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgIHByZXZpZXdDbGlwLnN0eWxlLnpJbmRleCA9IDE7XG4gICAgICB0aGlzLnNldFByZXZpZXdEaW1lbnRpb25zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFByZXZpZXdEaW1lbnRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByZXZpZXdEaW1lbnRpb25zKCkge1xuICAgICAgdmFyIGNsaXAgPSB0aGlzLmNsaXAucHJvcHMuaG9zdDtcbiAgICAgIHZhciBwcmV2aWV3Q2xpcCA9IHRoaXMucHJldmlld0NsaXAub3duQ2xpcC5wcm9wcy5ob3N0O1xuICAgICAgdmFyIGNsaXBXaWR0aCA9IGNsaXAub2Zmc2V0V2lkdGg7XG4gICAgICB2YXIgY2xpcEhlaWdodCA9IGNsaXAub2Zmc2V0SGVpZ2h0O1xuICAgICAgdmFyIHByZXZpZXdXaWR0aCA9IGNsaXBXaWR0aCAqIHRoaXMucHJldmlld1NjYWxlOyAvLyBtYXggd2lkdGggaXMgMzAwXG5cbiAgICAgIGlmIChwcmV2aWV3V2lkdGggPiAzMDApIHtcbiAgICAgICAgLy8gcHJldmlld1dpZHRoID0gcGFyc2VGbG9hdChcbiAgICAgICAgLy8gICBlbGlkKGAke3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLm1heFdpZHRoXG4gICAgICAgIC8vICk7XG4gICAgICAgIHByZXZpZXdXaWR0aCA9IDMwMDtcbiAgICAgICAgdGhpcy5wcmV2aWV3U2NhbGUgPSBwcmV2aWV3V2lkdGggLyBjbGlwV2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGVsaWQoXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS53aWR0aCA9IGNsaXBXaWR0aCArIFwicHhcIjtcbiAgICAgIGVsaWQoXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS5oZWlnaHQgPSBjbGlwSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgcHJldmlld0NsaXAuc3R5bGUudHJhbnNmb3JtID0gXCJzY2FsZShcIi5jb25jYXQodGhpcy5wcmV2aWV3U2NhbGUsIFwiKVwiKTtcbiAgICAgIHByZXZpZXdDbGlwLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IFwiY2VudGVyIGJvdHRvbVwiO1xuICAgICAgcHJldmlld0NsaXAuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsYXllcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQbGF5ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/Player.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/config.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/config.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  // the players start name\n  name: \"mc-player\",\n\n  // set the players total name\n  set playerName(name) {\n    this.name += \"-\" + name;\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9jb25maWcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9jb25maWcuanM/NmJiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIHRoZSBwbGF5ZXJzIHN0YXJ0IG5hbWVcbiAgbmFtZTogXCJtYy1wbGF5ZXJcIixcblxuICAvLyBzZXQgdGhlIHBsYXllcnMgdG90YWwgbmFtZVxuICBzZXQgcGxheWVyTmFtZShuYW1lKSB7XG4gICAgdGhpcy5uYW1lICs9IFwiLVwiICsgbmFtZTtcbiAgfVxuXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/config.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  el: function el(selector) {\n    return document.querySelectorAll(selector);\n  },\n  elid: function elid(id) {\n    return document.getElementById(id);\n  },\n  eltag: function eltag(tag) {\n    return document.getElementsByTagName(tag);\n  },\n  elcreate: function elcreate(tag) {\n    return document.createElement(tag);\n  },\n  addListener: function addListener() {\n    var _document;\n\n    return (_document = document).addEventListener.apply(_document, arguments);\n  },\n  removeListener: function removeListener() {\n    var _document2;\n\n    return (_document2 = document).removeEventListener.apply(_document2, arguments);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9oZWxwZXJzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvaGVscGVycy5qcz83OTUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWw6IGZ1bmN0aW9uIGVsKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9LFxuICBlbGlkOiBmdW5jdGlvbiBlbGlkKGlkKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgfSxcbiAgZWx0YWc6IGZ1bmN0aW9uIGVsdGFnKHRhZykge1xuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcpO1xuICB9LFxuICBlbGNyZWF0ZTogZnVuY3Rpb24gZWxjcmVhdGUodGFnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgfSxcbiAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKCkge1xuICAgIHZhciBfZG9jdW1lbnQ7XG5cbiAgICByZXR1cm4gKF9kb2N1bWVudCA9IGRvY3VtZW50KS5hZGRFdmVudExpc3RlbmVyLmFwcGx5KF9kb2N1bWVudCwgYXJndW1lbnRzKTtcbiAgfSxcbiAgcmVtb3ZlTGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKCkge1xuICAgIHZhciBfZG9jdW1lbnQyO1xuXG4gICAgcmV0dXJuIChfZG9jdW1lbnQyID0gZG9jdW1lbnQpLnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkoX2RvY3VtZW50MiwgYXJndW1lbnRzKTtcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (config) {\n  return \"\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\".concat(config.name, \"-pointer-event-panel\\\"\\n  ></div>\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\").concat(config.name, \"-listener-helper\\\"\\n  ></div>\\n  <div class=\\\"grad\\\"></div>\\n  <div class=\\\"background\\\"></div>\\n  <div id=\\\"\").concat(config.name, \"-controls\\\">\\n    <div id=\\\"\").concat(config.name, \"-totalbar\\\">\\n      <div id=\\\"\").concat(config.name, \"-hover-display\\\">\\n        <div id=\\\"\").concat(config.name, \"-hover-millisecond\\\"></div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-loopbar\\\">\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-start\\\"\\n        ></div>\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-end\\\"\\n        ></div>\\n        <div id=\\\"\").concat(config.name, \"-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-runningbar\\\">\\n          <div id=\\\"\").concat(config.name, \"-cursor\\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\\"\").concat(config.name, \"-left-controls\\\">\\n      <div id=\\\"\").concat(config.name, \"-status-btn\\\">\\n        \").concat(config.svg.playSVG, \"\\n        <span id=\\\"\").concat(config.name, \"-indicator\\\"></span>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-volume\\\">\\n        <div id=\\\"\").concat(config.name, \"-volume-btn\\\">\\n          \").concat(config.svg.volumeSVG, \"\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar-helper\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar\\\">\\n            <div id=\\\"\").concat(config.name, \"-volumebar-active\\\">\\n              <div id=\\\"\").concat(config.name, \"-volume-cursor\\\"></div>\\n            </div>\\n        </div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-time-display\\\">\\n        <span id=\\\"\").concat(config.name, \"-time-current\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-separator\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-total\\\"></span>\\n      </div>\\n    </div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-full-screen-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\").concat(config.svg.fullScreenSVG, \"</div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-settings-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\").concat(config.svg.settingsSVG, \"</div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-dc-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\\n      \").concat(config.svg.dcSVG, \"\\n    </div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-loop-btn-container\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-btn\\\"\\n        class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n      >\").concat(config.svg.loopSVG, \"</div>\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-time\\\"\\n        class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n      >\\n        <span\\n          id=\\\"\").concat(config.name, \"-loopbar-start-time\\\"\\n          class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n        ></span>\\n        <span>:</span>\\n        <span\\n          id=\\\"\").concat(config.name, \"-loopbar-end-time\\\"\\n          class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n        ></span>\\n      </div>\\n    </div>\\n\\n  </div>\\n  <div id=\\\"\").concat(config.name, \"-settings-panel\\\">\\n    <ul id=\\\"\").concat(config.name, \"-main-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-pointer-events\\\">\\n        <label>Pointer Events</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-pointer-events-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-preview\\\">\\n        <label>Show Preview</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-preview-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-indicator\\\">\\n        <label>Show Indicator</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-indicator-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-volume\\\">\\n        <label>Show Volume</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-volume-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-show\\\">\\n        <label>Speed</label>\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowRightSVG, \"</div>\\n        <span id=\\\"\").concat(config.name, \"-speed-current\\\"></span>\\n      </li>\\n    </ul>\\n    <ul id=\\\"\").concat(config.name, \"-speed-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-hide\\\">\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowLeftSVG, \"</div>\\n        <label id=\").concat(config.name, \"-speed-runtime>Speed</label>\\n      </li>\\n      <li>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-bar\\\">\\n          <div\\n            class=\\\"\").concat(config.name, \"-speed-value-step\\\"\\n            id=\\\"\").concat(config.name, \"-speed-cursor\\\"\\n          >\\n            <div></div>\\n          </div>\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value\\\">\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./svg */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\");\n\nvar playerHTML = __webpack_require__(/*! ./playerHTML */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js\");\n\nmodule.exports = function (_this) {\n  _this.elements = {};\n  var clipIframe = _this.clip.props.host; // console.log(_this.clip);\n  // set _this.clip position to relative\n\n  clipIframe.style.display = \"flex\";\n  clipIframe.style.justifyContent = \"center\";\n  clipIframe.style.alignItems = \"center\";\n  _this.clip.props.host.style.position = \"relative\";\n  _this.clip.props.host.style.zIndex = \"0\";\n  _this.elements.mcPlayer = elcreate(\"div\");\n  _this.elements.mcPlayer.id = \"\".concat(_this.name);\n  _this.elements.mcPlayer.className = \"\".concat(_this.className);\n  _this.elements.mcPlayer.innerHTML = playerHTML({\n    svg: svg,\n    name: _this.name\n  });\n\n  _this.options.host.appendChild(_this.elements.mcPlayer);\n\n  _this.elements.pointerEventPanel = elid(\"\".concat(_this.name, \"-pointer-event-panel\"));\n  _this.elements.listenerHelper = elid(\"\".concat(_this.name, \"-listener-helper\"));\n  _this.elements.loopBar = elid(\"\".concat(_this.name, \"-loopbar\"));\n  _this.elements.totalBar = elid(\"\".concat(_this.name, \"-totalbar\"));\n  _this.elements.indicator = elid(\"\".concat(_this.name, \"-indicator\"));\n  _this.elements.loopButton = elid(\"\".concat(_this.name, \"-loop-btn\"));\n  _this.elements.volumeBar = elid(\"\".concat(_this.name, \"-volumebar\"));\n  _this.elements.totalTime = elid(\"\".concat(_this.name, \"-time-total\"));\n  _this.elements.volumeControl = elid(\"\".concat(_this.name, \"-volume\"));\n  _this.elements.volumeBtn = elid(\"\".concat(_this.name, \"-volume-btn\"));\n  _this.elements.runningBar = elid(\"\".concat(_this.name, \"-runningbar\"));\n  _this.elements.loopBarEnd = elid(\"\".concat(_this.name, \"-loopbar-end\"));\n  _this.elements.statusButton = elid(\"\".concat(_this.name, \"-status-btn\"));\n  _this.elements.speedBar = elid(\"\".concat(_this.name, \"-speed-value-bar\"));\n  _this.elements.currentTime = elid(\"\".concat(_this.name, \"-time-current\"));\n  _this.elements.timeDisplay = elid(\"\".concat(_this.name, \"-time-display\"));\n  _this.elements.speedCurrent = elid(\"\".concat(_this.name, \"-speed-current\"));\n  _this.elements.loopBarStart = elid(\"\".concat(_this.name, \"-loopbar-start\"));\n  _this.elements.volumeCursor = elid(\"\".concat(_this.name, \"-volume-cursor\"));\n  _this.elements.settingsButton = elid(\"\".concat(_this.name, \"-settings-btn\"));\n  _this.elements.donkeyclipButton = elid(\"\".concat(_this.name, \"-dc-btn\"));\n  _this.elements.timeSeparator = elid(\"\".concat(_this.name, \"-time-separator\"));\n  _this.elements.settingsPanel = elid(\"\".concat(_this.name, \"-settings-panel\"));\n  _this.elements.settingsMainPanel = elid(\"\".concat(_this.name, \"-main-settings\"));\n  _this.elements.fullScreenButton = elid(\"\".concat(_this.name, \"-full-screen-btn\"));\n  _this.elements.volumeBarHelper = elid(\"\".concat(_this.name, \"-volumebar-helper\"));\n  _this.elements.volumeBarActive = elid(\"\".concat(_this.name, \"-volumebar-active\"));\n  _this.elements.settingsSpeedPanel = elid(\"\".concat(_this.name, \"-speed-settings\"));\n  _this.elements.settingsShowVolume = elid(\"\".concat(_this.name, \"-settings-volume\"));\n  _this.elements.settingsShowPreview = elid(\"\".concat(_this.name, \"-settings-preview\"));\n  _this.elements.settingsPointerEvents = elid(\"\".concat(_this.name, \"-settings-pointer-events\"));\n  _this.elements.speedBarHelper = elid(\"\".concat(_this.name, \"-speed-value-helperbar\"));\n  _this.elements.settingsShowIndicator = elid(\"\".concat(_this.name, \"-settings-indicator\"));\n  _this.elements.settingsSpeedButtonShow = elid(\"\".concat(_this.name, \"-settings-speed-show\"));\n  _this.elements.settingsSpeedButtonHide = elid(\"\".concat(_this.name, \"-settings-speed-hide\"));\n  _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n  _this.elements.currentTime.innerHTML = 0;\n  _this.elements.totalTime.innerHTML = _this.clip.duration;\n  _this.elements.timeSeparator.innerHTML = \"/\";\n\n  _this.elements.settingsPanel.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.indicator.style.visibility = \"hidden\";\n  _this.elements.indicator.innerHTML = _this.clip.runTimeInfo.state;\n  _this.elements.settingsSpeedPanel.style.display = \"none\";\n\n  _this.elements.settingsSpeedPanel.getElementsByTagName(\"li\")[1].classList.add(\"no-hover\");\n\n  _this.elements.loopBarStart.style.left = \"0%\";\n\n  _this.elements.loopBarStart.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopBarEnd.style.left = \"100%\";\n\n  _this.elements.loopBarEnd.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopStartTime = elid(\"\".concat(_this.name, \"-loopbar-start-time\"));\n  _this.elements.loopEndTime = elid(\"\".concat(_this.name, \"-loopbar-end-time\"));\n  _this.elements.editableLoopStartTime = document.createElement(\"input\");\n  _this.elements.editableLoopStartTime.type = \"text\";\n  _this.elements.editableLoopStartTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopStartTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopStartTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopStartTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopStartTime.style.fontSize = \"8px\";\n  _this.elements.editableLoopEndTime = document.createElement(\"input\");\n  _this.elements.editableLoopEndTime.type = \"text\";\n  _this.elements.editableLoopEndTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopEndTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopEndTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopEndTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopEndTime.pattern = \"d*\";\n  _this.elements.editableLoopEndTime.style.fontSize = \"8px\";\n  elid(\"\".concat(_this.name, \"-loop-time\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-hover-display\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-show-volume-checkbox\")).checked = _this.options.showVolume;\n  elid(\"\".concat(_this.name, \"-show-preview-checkbox\")).checked = _this.options.preview;\n  elid(\"\".concat(_this.name, \"-pointer-events-checkbox\")).checked = _this.options.pointerEvents;\n\n  if (_this.options.pointerEvents) {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  } else {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  }\n\n  _this.elements.listenerHelper.style.pointerEvents = \"none\";\n\n  if (!_this.options.showVolume) {\n    _this.elements.timeDisplay.style.left = \"45px\";\n    _this.elements.volumeControl.style.visibility = \"hidden\";\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n  } else {\n    _this.elements.timeDisplay.style.left = \"\";\n    _this.elements.volumeControl.style.visibility = \"visible\";\n  }\n\n  for (var i in _this.options.speedValues) {\n    var barDiv = elcreate(\"div\");\n    barDiv.className = \"\".concat(_this.name, \"-speed-value-step\");\n    var valueDiv = elcreate(\"div\");\n    valueDiv.className = \"\".concat(_this.name, \"-speed-value\");\n    valueDiv.dataset.speedValue = _this.options.speedValues[i];\n    valueDiv.innerHTML = _this.options.speedValues[i];\n    valueDiv.dataset.zone = i;\n    elid(\"\".concat(_this.name, \"-speed-value\")).prepend(valueDiv);\n\n    _this.elements.speedBar.prepend(barDiv);\n  } // show hide buttons\n\n\n  if (_this.options.buttons.fullScreen === false) {\n    _this.elements.fullScreenButton.remove();\n  }\n\n  if (_this.options.buttons.settings === false) {\n    _this.elements.settingsButton.remove();\n  }\n\n  if (_this.options.buttons.donkeyclip === false) {\n    _this.elements.donkeyclipButton.remove();\n  }\n\n  if (_this.options.buttons.loop === false) {\n    _this.elements.loopButton.remove();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/html/style.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/html/style.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (theme, name, options) {\n  return \"\\n.background {\\n  background-color: black;\\n  width:100%;\\n  height:\".concat(theme[\"background-height\"], \";;\\n  position:absolute;\\n  top:0px;\\n  left:0px;\\n  z-index:-2000;\\n}\\n\\n.full-screen #\").concat(name, \"-controls {\\n  position:fixed;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n.full-screen #\").concat(name, \"-settings-panel {\\n  position:fixed;\\n  bottom: 45px;\\n}\\n\\n.svg {\\n  fill: \").concat(theme[\"svg-color\"], \";\\n  stroke: \").concat(theme[\"svg-color\"], \";\\n}\\n\\n.pointer-event-panel {\\n  height: \").concat(theme[\"pointer-event-panel-height\"], \";\\n  display:flex;\\n  align-items:center;\\n  justify-content:center;\\n}\\n#\").concat(name, \"-pointer-event-panel{\\n  width:100%;\\n  position:absolute;\\n  z-index:100;\\n}\\n#\").concat(name, \"-listener-helper{\\n  width:100%;\\n  height:calc( 100% - 45px );\\n  position:absolute;\\n  z-index:110;\\n}\\n.svg-selected svg{\\n  fill: \").concat(theme[\"svg-selected-color\"], \";\\n  stroke: \").concat(theme[\"svg-selected-color\"], \";\\n}\\n#\").concat(name, \"-hover-display{\\n    border: \").concat(theme[\"preview-border\"], \";\\n    display: flex;\\n    overflow:hidden;\\n    background-color: black;\\n    position: absolute;\\n    bottom: 14px;\\n    left: 0px;\\n    align-items: flex-end;\\n    justify-content: center;\\n}\\n\\n#\").concat(name, \"-hover-millisecond {\\n  background-color: \").concat(theme[\"hms-background-color\"], \";\\n  padding:3px;\\n  height:18px;\\n  margin:0px;\\n  line-height:12px;\\n  font-size:10px;\\n  text-align: center;\\n  min-width:20px;\\n  max-width:100px;\\n  z-index:2;\\n}\\n#\").concat(name, \",\\n#\").concat(name, \" ::before,\\n#\").concat(name, \" ::after,\\n#\").concat(name, \" div,\\n#\").concat(name, \" p,\\n#\").concat(name, \" span,\\n#\").concat(name, \" ul,\\n#\").concat(name, \" li {\\n  font-weight: 400;\\n  line-height: 1.9 !important;\\n  color: \").concat(theme[\"color\"], \";\\n  font-family: \\\"Century Gothic\\\", CenturyGothic, AppleGothic, sans-serif;\\n  box-sizing:border-box;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n#\").concat(name, \" {\\n  line-height: 1.9;\\n  font-size: 12px;\\n  overflow:hidden;\\n  height: calc(100% + \").concat(theme[\"controls-position\"], \");\\n  width:100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  \\n}\\n\\n#\").concat(name, \"-settings-speed-hide {\\n  text-align:right;\\n}\\n\\n.grad {\\n  background-image: linear-gradient(\\n    rgba(100,100,100,00.01),\\n    rgba(100,100,100,00.02),\\n    rgba(100,100,100,00.03),\\n    rgba(100,100,100,0.04),\\n    rgba(100,100,100,0.05),\\n    rgba(0,0,0,0.06),\\n    rgba(0,0,0,0.07),\\n    rgba(0,0,0,0.08),\\n    rgba(0,0,0,0.09),\\n    rgba(0,0,0,0.1),\\n    rgba(0,0,0,0.2),\\n    rgba(0,0,0,0.3),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.5),\\n    rgba(0,0,0,0.6),\\n    rgba(0,0,0,0.7),\\n    rgba(0,0,0,0.8),\\n    rgba(0,0,0,0.9),\\n    rgba(0,0,0,1)\\n  );\\n  position:absolute;\\n  width:100%;\\n  height:\").concat(theme[\"grad-height\"], \";\\n  left:0px;\\n  bottom:0px;\\n  z-index:100;\\n}\\n\\n#\").concat(name, \"-controls {\\n  touch-action: none;\\n  background-color: \").concat(theme[\"background-color\"], \";\\n  border: \").concat(theme[\"controls-border\"], \";\\n  position: absolute;\\n  bottom: \").concat(theme[\"controls-bottom\"], \";\\n  left: 0px;\\n  width: 100%;\\n  height: 40px;\\n  z-index:100;\\n}\\n\\n#\").concat(name, \"-totalbar {\\n  width: calc(100% - 20px);\\n  height: 5px;\\n  margin: 0px 10px 0px 10px;\\n  background-color: #505056;\\n  position: relative;\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-loopbar {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n  top: 0px;\\n  left: 0px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n}\\n\\n.\").concat(name, \"-loop-boundaries {\\n  transform:translate(-50%,-37%);\\n  position:absolute;\\n  width:18px;\\n  background-color:\").concat(theme[\"loopbar-color\"], \";\\n  height:18px;\\n  border-radius:10px;\\n  z-index:40;\\n}\\n\\n#\").concat(name, \"-helperbar {\\n  position: absolute;\\n  height: 20px;\\n  top: -10px;\\n  left: 0px;\\n  right: 0px;\\n  z-index:2;\\n}\\n\\n#\").concat(name, \"-runningbar {\\n  position: relative;\\n  width: 0px;\\n  max-width:100%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"runningbar-color\"], \";\\n}\\n\\n#\").concat(name, \"-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"cursor-color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n#\").concat(name, \"-left-controls {\\n  display:inline-block;\\n  width:200px;\\n  height:35px;\\n}\\n#\").concat(name, \"-time-display {\\n  display: table;\\n  text-align: center;\\n  width: auto;\\n  height: 34px;\\n  position: absolute;\\n  left: 90px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n\\n#\").concat(name, \"-time-display span {\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n#\").concat(name, \"-status-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 40px;\\n  height: 25px;\\n  position: absolute;\\n  overflow:visible;\\n  left: 0px;\\n  bottom: 0px;\\n  margin: 10px 5px 5px 5px;\\n  text-align: center;\\n  z-index:3;\\n}\\n\\n#\").concat(name, \"-volume {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  position: absolute;\\n  left: 45px;\\n  bottom: 5px;\\n  margin: 10px 5px 5px 5px;\\n  text-align: center;\\n  z-index:3;\\n}\\n#\").concat(name, \"-volume-btn {\\n  width: 20px;\\n  height: 15px;\\n}\\n\\n#\").concat(name, \"-volumebar {\\n  width: 0px;\\n  height: 3px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n  position:absolute;\\n  left:25px;\\n  bottom:6px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n\\n#\").concat(name, \"-volumebar-helper {\\n  position: absolute;\\n  width: 0px;\\n  height: 15px;\\n  left:25px;\\n  bottom:0px;\\n  z-index:10;\\n}\\n\\n#\").concat(name, \"-volumebar-active {\\n  position: relative;\\n  width: 0%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"color\"], \";\\n  position:relative;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n#\").concat(name, \"-volume-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n.\").concat(name, \"-loopbar-time {\\n  width:auto;\\n  height:12px;\\n  background-color:\").concat(theme[\"background-color\"], \";\\n  line-height:10px;\\n  font-size:10px;\\n}\\n\\n#\").concat(name, \"-loop-time {\\n  margin: 7px;\\n}\\n\\n#\").concat(name, \"-dc-btn {\\n    opacity: 0.8;\\n    background-repeat: no-repeat;\\n    background-size: 100% 100%;\\n    width: 20px;\\n    height: 15px;\\n    margin: 7px 10px 5px 0px;\\n    transform: scale(1.5,1.5);\\n}\\n\\n#\").concat(name, \"-loop-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n\\n#\").concat(name, \"-settings-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n#\").concat(name, \"-full-screen-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n.\").concat(name, \"-speed-btn {\\n  position: relative;\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  width: 10px;\\n  height: 10px;\\n  display: inline-block;\\n}\\n\\n#\").concat(name, \"-settings-panel {\\n  touch-action: none;\\n  box-sizing: border-box;\\n  position: absolute;\\n  z-index:101;\\n  background-color: \").concat(theme[\"settings-background-color\"], \";\\n  bottom: \").concat(theme[\"settings-panel-bottom\"], \";\\n  border: \").concat(theme[\"border\"], \";\\n  right: 5px;\\n  width: 164px;\\n  height: 175px;\\n  padding: 5px;\\n  margin: 0px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n.\").concat(name, \"-mc-right-controls {\\n  float: right;\\n}\\n\\n.\").concat(name, \"-hide {\\n  display:none !important;\\n}\\n\\n#\").concat(name, \"-speed-value-bar {\\n  position: relative;\\n  width: 5px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  margin-right:15px;\\n}\\n\\n#\").concat(name, \"-speed-value-helperbar {\\n  position: absolute;\\n  width: 25px;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  left: -5px;\\n  z-index:10;\\n}\\n\\n\\n#\").concat(name, \"-speed-value-bar:hover,\\n#\").concat(name, \"-speed-value-helperbar {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-volumebar:hover,\\n#\").concat(name, \"-volumebar-helper:hover,\\n#\").concat(name, \"-volume-btn:hover,\\n#\").concat(name, \"-volumebar:active,\\n#\").concat(name, \"-volumebar-helper:active,\\n#\").concat(name, \"-volume-btn:active {\\n  cursor:pointer;\\n}\\n\\n#\").concat(name, \"-speed-cursor {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-speed-cursor div {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  left: -2.5px;\\n  top: -4px;\\n  width: 10px;\\n  height: 10px;\\n  border-radius: 5px;\\n}\\n\\n#\").concat(name, \"-speed-cursor:hover {\\n  cursor: pointer;\\n}\\n\\n.\").concat(name, \"-speed-value-step {\\n  width: 16px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: 2px;\\n  margin-top: 7px;\\n  margin-bottom: 7px;\\n  float: left;\\n}\\n\\n#\").concat(name, \"-speed-value {\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  text-align: left;\\n}\\n\\n.\").concat(name, \"-speed-value {\\n  box-sizing: border-box;\\n  height: 16px;\\n  font-size: 12px;\\n}\\n\\n#\").concat(name, \"-indicator {\\n  font-size: 8px !important;\\n  position: relative;\\n  bottom: 15px;\\n  color: \").concat(theme[\"color\"], \";\\n  white-space: nowrap;\\n}\\n\\n#\").concat(name, \"-speed-settings {\\n  height: \").concat(options.speedValues.length * 16 + 32 + 10 - 2, \"px;\\n}\\n\\n#\").concat(name, \"-speed-settings li.no-hover { \\n  height: \").concat(options.speedValues.length * 16 + 10 - 2, \"px; \\n}\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel {\\n  overflow: hidden;\\n  width: 80px;\\n  height: \").concat(options.speedValues.length * 16 + 32 + 20, \"px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel .\").concat(name, \"-speed-btn {\\n  float: left;\\n}\\n\\n.\").concat(name, \"-settings-speed-panel ul:first-child {\\n  text-align: right;\\n}\\n\\n#\").concat(name, \"-speed-current {\\n  float: right;\\n  padding-right: 10px\\n}\\n\\n#\").concat(name, \"-settings-panel .\").concat(name, \"-speed-btn {\\n  float: right;\\n}\\n\\n#\").concat(name, \"-settings-panel ul {\\n  width: 100%;\\n  margin: 0px;\\n  padding: 0px;\\n  overflow: hidden;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel ul li {\\n  min-width: 70px;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li.no-hover:hover {\\n  background-color: transparent;\\n  cursor: default;\\n}\\n\\ndiv.\").concat(name, \"-speed-value:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li {\\n  position: relative;\\n  width: 100%;\\n  min-width: 154px;\\n  list-style-type: none;\\n  margin: 0px;\\n  padding: 5px;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label {\\n  margin: 0px;\\n}\\n\\n.switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 35px;\\n  height: 18px;\\n}\\n\\n.switch input {\\n  display: none;\\n}\\n\\n.settings-switch {\\n  float: right;\\n}\\n\\n.settings-switch:after {\\n  clear: both;\\n}\\n\\n.slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: \").concat(theme[\"slider-off-color\"], \";\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\n.slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 16px;\\n  width: 16px;\\n  left: 1px;\\n  bottom: 1px;\\n  background-color: white;\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\ninput:checked+.slider {\\n  background-color: \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:focus+.slider {\\n  box-shadow: 0 0 1px \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:checked+.slider:before {\\n  -webkit-transform: translateX(16px);\\n  -ms-transform: translateX(16px);\\n  transform: translateX(16px);\\n}\\n\\n\\n/* Rounded sliders */\\n\\n.slider.round {\\n  border-radius: 34px;\\n}\\n\\n.slider.round:before {\\n  border-radius: 50%;\\n}\\n\\n\\n.m-fadeOut {\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 300ms, opacity 300ms;\\n}\\n\\n.m-fadeIn {\\n  visibility: visible;\\n  opacity: 1;\\n  transition: visibility 0s linear 0s, opacity 300ms;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-loopbar:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-controls:active #\").concat(name, \"-cursor,\\n#\").concat(name, \"-controls:hover #\").concat(name, \"-cursor  {\\n  width: 16px;\\n  height: 16px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-cursor-transition {\\n  width: 12px;\\n  height: 12px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-width-transition\\n {\\n  width: 50px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-time-display.\").concat(name, \"-time-width-transition {\\n  left: 140px;\\n  -webkit-transition: left 0.3s ease;\\n  -moz-transition: left 0.3s ease;\\n  transition: left 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-speed:hover .\").concat(name, \"-speed-btn {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-loop-btn:hover,\\n#\").concat(name, \"-dc-btn:hover\\n {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n#\").concat(name, \"-settings-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-full-screen-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/html/style.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar svg = module.exports = {};\nsvg.playSVG = \"\\n  <svg width=\\\"100%\\\" class=\\\"svg\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"play-icon\\\" data-state=\\\"paused\\\"  d=\\\"M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28\\\" />\\n  </svg>\\n\";\nsvg.dcSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 400 400\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n<path stroke-width=\\\"10.00\\\" stroke-linecap=\\\"butt\\\" stroke-linejoin=\\\"miter\\\" opacity=\\\"1\\\" d=\\\"M 120.17407989501953 162.04714965820312 L 121.16549682617188 320.6739196777344 Q 279.79229736328125 321.66534423828125 280.78369140625 241.36053466796875 Q 281.77508544921875 161.05572509765625 439.41046142578125 160.06431579589844 L 439.41046142578125 200.71243286132812 Q 281.7751159667969 163.03857421875 280.78369140625 241.36053466796875 Q 279.7922668457031 319.6824951171875 159.8307647705078 281.0172424316406 L 158.83935546875 198.72959899902344 Q 281.7751159667969 161.05572509765625 280.78369140625 241.36053466796875 Q 279.7922668457031 321.66534423828125 440.40185546875 320.6739196777344 L 440.40185546875 280.02581787109375 Q 280.78369140625 321.66534423828125 280.78369140625 241.36053466796875 C 280.78369140625 161.05572509765625 161.8135986328125 161.05572509765625 120.17407989501953 162.04714965820312 Z\\\" selected=\\\"true\\\" transform=\\\"matrix(1 0 0 1 0 0)\\\"></path></svg>\";\nsvg.pauseSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"pause-icon\\\" data-state=\\\"playing\\\" d=\\\"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\\\" />\\n  </svg>\\n\";\nsvg.replaySVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" enable-background=\\\"new 0 0 1000 1000\\\" xml:space=\\\"preserve\\\">\\n    <metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\\n    <g><g transform=\\\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\\\">\\n      <path d=\\\"M5356.3,4203.8c-1247.8-153.1-2324.2-811.3-3000.7-1839.7c-379.4-578.2-596.5-1209-660.5-1933.4l-27.4-294.8H883.9c-431.9,0-783.9-6.9-783.9-18.3c0-9.2,477.6-493.7,1062.7-1078.7l1062.7-1062.7L3288.1-961.1C3873.1-376,4350.8,108.5,4350.8,117.6c0,11.4-356.5,18.3-790.7,18.3h-793l18.3,189.7C2831,876.3,2991,1338,3288.1,1779.1C4122.3,3026.9,5706,3472.5,7065.8,2841.8C7639.4,2578.9,8197,2035,8487.3,1461.4C8581,1274,8709,896.9,8754.7,666.1c48-246.8,54.8-811.3,9.1-1055.8C8567.3-1491.3,7788-2394,6720.7-2750.5c-315.4-107.4-541.6-139.4-941.6-139.4c-287.9,0-415.9,11.4-598.8,50.3c-523.3,112-973.6,335.9-1371.2,681c-75.4,68.6-148.5,123.4-160,123.4c-9.1,0-187.4-169.1-393.1-374.8c-434.2-434.2-420.5-363.4-105.1-628.5c852.4-710.7,1972.3-1055.8,3046.4-937c1627.2,176,2977.8,1257,3489.8,2790.4c457.1,1368.9,169.1,2843-777,3969.7C8322.7,3484,7417.8,4000.4,6503.6,4160.4C6197.4,4213,5619.2,4235.8,5356.3,4203.8z\\\"/>\\n      <path d=\\\"M4990.7,124.5c0-1503.8,4.6-1794,32-1778c16,9.1,505.1,413.6,1085.6,895.8C7113.8,78.8,7161.8,122.2,7122.9,161c-80,75.4-2109.4,1757.5-2120.8,1757.5C4995.3,1918.5,4990.7,1111.8,4990.7,124.5z\\\"/>\\n    </g></g>\\n  </svg>\\n\";\nsvg.volumeSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.374 286.374\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_2\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M233.636,26.767l-33.372,28.5c25.659,21.07,42.006,52.616,42.006,87.92\\n        c0,35.305-16.347,66.851-42.006,87.921l33.372,28.499c32.324-28.869,52.738-70.268,52.738-116.421\\n        C286.374,97.034,265.96,55.635,233.636,26.767z M177.737,74.513l-34.69,29.64c15.14,6.818,27.19,21.681,27.19,39.034\\n        s-12.05,32.216-27.19,39.034l34.69,29.64c21.294-15.717,36.051-40.586,36.051-68.674C213.788,115.099,199.03,90.23,177.737,74.513z\\n         M108.672,48.317L44.746,98.441H17.898C4.671,98.441,0,103.268,0,116.34v53.695c0,13.072,4.951,17.898,17.898,17.898h26.848\\n        l63.926,50.068c7.668,4.948,16.558,6.505,16.558-7.365V55.683C125.23,41.813,116.34,43.37,108.672,48.317z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.volumeMuteSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.277 286.277\\\" style=\\\"enable-background:new 0 0 286.277 286.277;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_none\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M245.102,143.151l36.98-37.071c5.593-5.605,5.593-14.681,0-20.284\\n        l-10.124-10.142c-5.593-5.604-14.655-5.604-20.247,0l-36.98,37.071l-36.977-37.043c-5.594-5.603-14.654-5.603-20.247,0\\n        l-10.124,10.143c-5.594,5.603-5.594,14.679,0,20.282l36.987,37.053l-36.961,37.051c-5.591,5.604-5.591,14.681,0,20.284\\n        l10.126,10.141c5.593,5.604,14.654,5.604,20.247,0l36.96-37.05l36.97,37.035c5.592,5.605,14.654,5.605,20.247,0l10.124-10.141\\n        c5.593-5.603,5.593-14.68,0-20.282L245.102,143.151z M108.674,48.296L44.747,98.42H17.9c-13.228,0-17.899,4.826-17.899,17.898\\n        L0,142.719l0.001,27.295c0,13.072,4.951,17.898,17.899,17.898h26.847l63.927,50.068c7.667,4.948,16.557,6.505,16.557-7.365V55.662\\n        C125.23,41.792,116.341,43.349,108.674,48.296z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.settingsSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 268.765 268.765\\\" style=\\\"enable-background:new 0 0 268.765 268.765;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Settings\\\">\\n      <g>\\n        <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M267.92,119.461c-0.425-3.778-4.83-6.617-8.639-6.617\\n          c-12.315,0-23.243-7.231-27.826-18.414c-4.682-11.454-1.663-24.812,7.515-33.231c2.889-2.641,3.24-7.062,0.817-10.133\\n          c-6.303-8.004-13.467-15.234-21.289-21.5c-3.063-2.458-7.557-2.116-10.213,0.825c-8.01,8.871-22.398,12.168-33.516,7.529\\n          c-11.57-4.867-18.866-16.591-18.152-29.176c0.235-3.953-2.654-7.39-6.595-7.849c-10.038-1.161-20.164-1.197-30.232-0.08\\n          c-3.896,0.43-6.785,3.786-6.654,7.689c0.438,12.461-6.946,23.98-18.401,28.672c-10.985,4.487-25.272,1.218-33.266-7.574\\n          c-2.642-2.896-7.063-3.252-10.141-0.853c-8.054,6.319-15.379,13.555-21.74,21.493c-2.481,3.086-2.116,7.559,0.802,10.214\\n          c9.353,8.47,12.373,21.944,7.514,33.53c-4.639,11.046-16.109,18.165-29.24,18.165c-4.261-0.137-7.296,2.723-7.762,6.597\\n          c-1.182,10.096-1.196,20.383-0.058,30.561c0.422,3.794,4.961,6.608,8.812,6.608c11.702-0.299,22.937,6.946,27.65,18.415\\n          c4.698,11.454,1.678,24.804-7.514,33.23c-2.875,2.641-3.24,7.055-0.817,10.126c6.244,7.953,13.409,15.19,21.259,21.508\\n          c3.079,2.481,7.559,2.131,10.228-0.81c8.04-8.893,22.427-12.184,33.501-7.536c11.599,4.852,18.895,16.575,18.181,29.167\\n          c-0.233,3.955,2.67,7.398,6.595,7.85c5.135,0.599,10.301,0.898,15.481,0.898c4.917,0,9.835-0.27,14.752-0.817\\n          c3.897-0.43,6.784-3.786,6.653-7.696c-0.451-12.454,6.946-23.973,18.386-28.657c11.059-4.517,25.286-1.211,33.281,7.572\\n          c2.657,2.89,7.047,3.239,10.142,0.848c8.039-6.304,15.349-13.534,21.74-21.494c2.48-3.079,2.13-7.559-0.803-10.213\\n          c-9.353-8.47-12.388-21.946-7.529-33.524c4.568-10.899,15.612-18.217,27.491-18.217l1.662,0.043\\n          c3.853,0.313,7.398-2.655,7.865-6.588C269.044,139.917,269.058,129.639,267.92,119.461z M134.595,179.491\\n          c-24.718,0-44.824-20.106-44.824-44.824c0-24.717,20.106-44.824,44.824-44.824c24.717,0,44.823,20.107,44.823,44.824\\n          C179.418,159.385,159.312,179.491,134.595,179.491z\\\"/>\\n      </g>\\n    </g>\\n  <g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.arrowRightSVG = \"\\n  <svg class=\\\"svg\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"0.375,0.375 45.63,38.087 0.375,75.8 \\\"/>\\n  </svg>\\n\";\nsvg.arrowLeftSVG = \"\\n  <svg class=\\\"svg\\\" class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"45.63,75.8 0.375,38.087 45.63,0.375 \\\"/>\\n  </svg> \\n\";\nsvg.fullScreenSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 298.667 298.667\\\" style=\\\"enable-background:new 0 0 298.667 298.667;\\\" xml:space=\\\"preserve\\\">\\n    <g>\\n      <g>\\n        <g>\\n          <polygon points=\\\"42.667,192 0,192 0,298.667 106.667,298.667 106.667,256 42.667,256\\\"/>\\n          <polygon points=\\\"0,106.667 42.667,106.667 42.667,42.667 106.667,42.667 106.667,0 0,0\\\"/>\\n          <polygon points=\\\"192,0 192,42.667 256,42.667 256,106.667 298.667,106.667 298.667,0\\\"/>\\n          <polygon points=\\\"256,256 192,256 192,298.667 298.667,298.667 298.667,192 256,192\\\"/>\\n        </g>\\n      </g>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.loopSVG = \"\\n<svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 32 32\\\" style=\\\"enable-background:new 0 0 32 32;\\\" xml:space=\\\"preserve\\\">\\n  <g>\\n    <g id=\\\"loop_x5F_alt3\\\">\\n      <g>\\n        <path d=\\\"M28,16v2c0,1.102-0.898,2-2,2H11.996L12,16l-8,6l8,6l-0.004-4H26c3.309,0,6-2.695,6-6v-2H28z\\\"/>\\n        <path d=\\\"M4,14c0-1.105,0.898-2,2-2h14v4l7.992-6L20,4v4H6c-3.309,0-6,2.688-6,6v2h4V14z\\\"/>\\n      </g>\\n    </g>\\n  </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n</svg>\";\nsvg.loadingSVG = \"<svg class=\\\"lds-spinner\\\" width=\\\"80px\\\"  height=\\\"80px\\\"  xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid\\\" style=\\\"background: none;\\\"><g transform=\\\"rotate(0 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.9166666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(30 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.8333333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(60 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.75s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(90 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.6666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(120 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5833333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(150 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(180 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.4166666666666667s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(210 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.3333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(240 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.25s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(270 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.16666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(300 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.08333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(330 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"0s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g></svg>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar themes = {\n  default: {\n    \"settings-background-color\": \"whitesmoke\",\n    \"hms-background-color\": \"whitesmoke\",\n    \"background-color\": \"whitesmoke\",\n    \"grad-height\": \"0px\",\n    color: \"black\",\n    \"svg-color\": \"black\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  dark: {\n    \"settings-background-color\": \"black\",\n    \"hms-background-color\": \"black\",\n    \"background-color\": \"black\",\n    \"grad-height\": \"0px\",\n    color: \"white\",\n    \"svg-color\": \"white\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  whiteGold: {\n    \"settings-background-color\": \"white\",\n    \"hms-background-color\": \"white\",\n    \"background-color\": \"white\",\n    \"grad-height\": \"0px\",\n    color: \"#a17f1a\",\n    \"svg-color\": \"#a17f1a\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"#a17f1a\",\n    \"cursor-color\": \"#a17f1a\",\n    \"speedbar-cursor-color\": \"#a17f1a\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"#a17f1a\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  darkGold: {\n    \"settings-background-color\": \"black\",\n    \"hms-background-color\": \"black\",\n    \"background-color\": \"black\",\n    \"grad-height\": \"0px\",\n    color: \"#a17f1a\",\n    \"svg-color\": \"#a17f1a\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"#a17f1a\",\n    \"cursor-color\": \"#a17f1a\",\n    \"speedbar-cursor-color\": \"#a17f1a\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"#a17f1a\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  transparent: {\n    \"background-color\": \"transparent\",\n    \"settings-background-color\": \"rgba(0,0,0,0.5)\",\n    \"hms-background-color\": \"rgba(0,0,0,0.5)\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    color: \"white\",\n    \"grad-height\": \"60px\",\n    \"svg-color\": \"white\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    border: \"1px solid rgba(255,255,255,0.1)\",\n    \"controls-border\": \"1px solid rgba(255,255,255,0.1)\",\n    \"svg-selected-color\": \"red\"\n  },\n  \"on-top\": {\n    \"background-height\": \"100%\",\n    \"pointer-event-panel-height\": \"calc(100% - 45px)\",\n    \"controls-bottom\": \"0px\",\n    \"settings-panel-bottom\": \"45px\",\n    \"controls-position\": \"0px\"\n  },\n  \"position-default\": {\n    \"background-height\": \"calc(100% - 40px)\",\n    \"pointer-event-panel-height\": \"calc(100% - 40px)\",\n    \"controls-bottom\": \"-0px\",\n    \"settings-panel-bottom\": \"45px\",\n    \"controls-position\": \"40px\"\n  }\n};\n\nmodule.exports = function (theme) {\n  return themes[theme];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9odG1sL3RoZW1lcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2h0bWwvdGhlbWVzLmpzP2I1MDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB0aGVtZXMgPSB7XG4gIGRlZmF1bHQ6IHtcbiAgICBcInNldHRpbmdzLWJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZXNtb2tlXCIsXG4gICAgXCJobXMtYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlc21va2VcIixcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZXNtb2tlXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjBweFwiLFxuICAgIGNvbG9yOiBcImJsYWNrXCIsXG4gICAgXCJzdmctY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwibG9vcGJhci1jb2xvclwiOiBcIiM4MDgwODZcIixcbiAgICBcInNwZWVkYmFyLWNvbG9yXCI6IFwiIzY2NlwiLFxuICAgIFwicnVubmluZ2Jhci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJzcGVlZGJhci1jdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcImJ1dHRvbi1vcGFjaXR5XCI6IFwiMC44XCIsXG4gICAgXCJob3Zlci1jb2xvclwiOiBcInJnYmEoMjAwLCAyMDAsIDIwMCwgMC41KVwiLFxuICAgIFwic2xpZGVyLW9mZi1jb2xvclwiOiBcIiNjY2NcIixcbiAgICBcInNsaWRlci1vbi1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCJub25lXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICBkYXJrOiB7XG4gICAgXCJzZXR0aW5ncy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImhtcy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiZ3JhZC1oZWlnaHRcIjogXCIwcHhcIixcbiAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgIFwic3ZnLWNvbG9yXCI6IFwid2hpdGVcIixcbiAgICBcImxvb3BiYXItY29sb3JcIjogXCIjODA4MDg2XCIsXG4gICAgXCJzcGVlZGJhci1jb2xvclwiOiBcIiM2NjZcIixcbiAgICBcInJ1bm5pbmdiYXItY29sb3JcIjogXCJyZWRcIixcbiAgICBcImN1cnNvci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwic3BlZWRiYXItY3Vyc29yLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJidXR0b24tb3BhY2l0eVwiOiBcIjAuOFwiLFxuICAgIFwiaG92ZXItY29sb3JcIjogXCJyZ2JhKDkwLCA5MCwgOTAsIDAuNSlcIixcbiAgICBcInNsaWRlci1vZmYtY29sb3JcIjogXCIjY2NjXCIsXG4gICAgXCJzbGlkZXItb24tY29sb3JcIjogXCJyZWRcIixcbiAgICBcInByZXZpZXctYm9yZGVyXCI6IFwiMXB4IHNvbGlkIHJnYmEoMCwwLDAsMSlcIixcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsMC4yKVwiLFxuICAgIFwiY29udHJvbHMtYm9yZGVyXCI6IFwibm9uZVwiLFxuICAgIFwic3ZnLXNlbGVjdGVkLWNvbG9yXCI6IFwicmVkXCJcbiAgfSxcbiAgd2hpdGVHb2xkOiB7XG4gICAgXCJzZXR0aW5ncy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwid2hpdGVcIixcbiAgICBcImhtcy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwid2hpdGVcIixcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwiZ3JhZC1oZWlnaHRcIjogXCIwcHhcIixcbiAgICBjb2xvcjogXCIjYTE3ZjFhXCIsXG4gICAgXCJzdmctY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwic3BlZWRiYXItY3Vyc29yLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSgyMDAsIDIwMCwgMjAwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCJub25lXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICBkYXJrR29sZDoge1xuICAgIFwic2V0dGluZ3MtYmFja2dyb3VuZC1jb2xvclwiOiBcImJsYWNrXCIsXG4gICAgXCJobXMtYmFja2dyb3VuZC1jb2xvclwiOiBcImJsYWNrXCIsXG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImdyYWQtaGVpZ2h0XCI6IFwiMHB4XCIsXG4gICAgY29sb3I6IFwiI2ExN2YxYVwiLFxuICAgIFwic3ZnLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwibG9vcGJhci1jb2xvclwiOiBcIiM4MDgwODZcIixcbiAgICBcInNwZWVkYmFyLWNvbG9yXCI6IFwiIzY2NlwiLFxuICAgIFwicnVubmluZ2Jhci1jb2xvclwiOiBcIiNhMTdmMWFcIixcbiAgICBcImN1cnNvci1jb2xvclwiOiBcIiNhMTdmMWFcIixcbiAgICBcInNwZWVkYmFyLWN1cnNvci1jb2xvclwiOiBcIiNhMTdmMWFcIixcbiAgICBcImJ1dHRvbi1vcGFjaXR5XCI6IFwiMC44XCIsXG4gICAgXCJob3Zlci1jb2xvclwiOiBcInJnYmEoOTAsIDkwLCA5MCwgMC41KVwiLFxuICAgIFwic2xpZGVyLW9mZi1jb2xvclwiOiBcIiNjY2NcIixcbiAgICBcInNsaWRlci1vbi1jb2xvclwiOiBcIiNhMTdmMWFcIixcbiAgICBcInByZXZpZXctYm9yZGVyXCI6IFwiMXB4IHNvbGlkIHJnYmEoMCwwLDAsMSlcIixcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsMC4yKVwiLFxuICAgIFwiY29udHJvbHMtYm9yZGVyXCI6IFwibm9uZVwiLFxuICAgIFwic3ZnLXNlbGVjdGVkLWNvbG9yXCI6IFwicmVkXCJcbiAgfSxcbiAgdHJhbnNwYXJlbnQ6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiLFxuICAgIFwic2V0dGluZ3MtYmFja2dyb3VuZC1jb2xvclwiOiBcInJnYmEoMCwwLDAsMC41KVwiLFxuICAgIFwiaG1zLWJhY2tncm91bmQtY29sb3JcIjogXCJyZ2JhKDAsMCwwLDAuNSlcIixcbiAgICBcInByZXZpZXctYm9yZGVyXCI6IFwiMXB4IHNvbGlkIHJnYmEoMCwwLDAsMSlcIixcbiAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgIFwiZ3JhZC1oZWlnaHRcIjogXCI2MHB4XCIsXG4gICAgXCJzdmctY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwibG9vcGJhci1jb2xvclwiOiBcIiM4MDgwODZcIixcbiAgICBcInNwZWVkYmFyLWNvbG9yXCI6IFwiIzY2NlwiLFxuICAgIFwicnVubmluZ2Jhci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJzcGVlZGJhci1jdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcImJ1dHRvbi1vcGFjaXR5XCI6IFwiMC44XCIsXG4gICAgXCJob3Zlci1jb2xvclwiOiBcInJnYmEoMjAwLCAyMDAsIDIwMCwgMC41KVwiLFxuICAgIFwic2xpZGVyLW9mZi1jb2xvclwiOiBcIiNjY2NcIixcbiAgICBcInNsaWRlci1vbi1jb2xvclwiOiBcInJlZFwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjEpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjEpXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICBcIm9uLXRvcFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWhlaWdodFwiOiBcIjEwMCVcIixcbiAgICBcInBvaW50ZXItZXZlbnQtcGFuZWwtaGVpZ2h0XCI6IFwiY2FsYygxMDAlIC0gNDVweClcIixcbiAgICBcImNvbnRyb2xzLWJvdHRvbVwiOiBcIjBweFwiLFxuICAgIFwic2V0dGluZ3MtcGFuZWwtYm90dG9tXCI6IFwiNDVweFwiLFxuICAgIFwiY29udHJvbHMtcG9zaXRpb25cIjogXCIwcHhcIlxuICB9LFxuICBcInBvc2l0aW9uLWRlZmF1bHRcIjoge1xuICAgIFwiYmFja2dyb3VuZC1oZWlnaHRcIjogXCJjYWxjKDEwMCUgLSA0MHB4KVwiLFxuICAgIFwicG9pbnRlci1ldmVudC1wYW5lbC1oZWlnaHRcIjogXCJjYWxjKDEwMCUgLSA0MHB4KVwiLFxuICAgIFwiY29udHJvbHMtYm90dG9tXCI6IFwiLTBweFwiLFxuICAgIFwic2V0dGluZ3MtcGFuZWwtYm90dG9tXCI6IFwiNDVweFwiLFxuICAgIFwiY29udHJvbHMtcG9zaXRpb25cIjogXCI0MHB4XCJcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhlbWUpIHtcbiAgcmV0dXJuIHRoZW1lc1t0aGVtZV07XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    el = _require.el,\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  el(\"body\")[0].addEventListener(\"click\", function (e) {\n    if (e.target.className === \"\".concat(_this.name, \"-speed-value\")) {\n      var speedDisplay = e.target.dataset.speedValue - 0;\n      _this.clip.executionSpeed = e.target.dataset.speedValue;\n      _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n      _this.elements.speedCurrent.innerHTML = speedDisplay;\n      var step = 1 / (_this.options.speedValues.length - 1);\n      var positionY = (e.target.dataset.zone * step - 1) * -1 * ((_this.options.speedValues.length - 1) * 16);\n      elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvYm9keS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9ib2R5LmpzPzkwZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpLFxuICAgIGVsID0gX3JlcXVpcmUuZWwsXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIGVsKFwiYm9keVwiKVswXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lID09PSBcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1zcGVlZC12YWx1ZVwiKSkge1xuICAgICAgdmFyIHNwZWVkRGlzcGxheSA9IGUudGFyZ2V0LmRhdGFzZXQuc3BlZWRWYWx1ZSAtIDA7XG4gICAgICBfdGhpcy5jbGlwLmV4ZWN1dGlvblNwZWVkID0gZS50YXJnZXQuZGF0YXNldC5zcGVlZFZhbHVlO1xuICAgICAgX3RoaXMuY2xpcC5zcGVlZCA9PSAxID8gc3BlZWREaXNwbGF5ID0gXCJOb3JtYWxcIiA6IHNwZWVkRGlzcGxheSA9IF90aGlzLmNsaXAuc3BlZWQ7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zcGVlZEN1cnJlbnQuaW5uZXJIVE1MID0gc3BlZWREaXNwbGF5O1xuICAgICAgdmFyIHN0ZXAgPSAxIC8gKF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMSk7XG4gICAgICB2YXIgcG9zaXRpb25ZID0gKGUudGFyZ2V0LmRhdGFzZXQuem9uZSAqIHN0ZXAgLSAxKSAqIC0xICogKChfdGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLmxlbmd0aCAtIDEpICogMTYpO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1zcGVlZC1jdXJzb3JcIikpLnN0eWxlLnRvcCA9IHBvc2l0aW9uWSArIFwicHhcIjtcbiAgICB9XG4gIH0pO1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseover = function () {\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeIn\");\n  };\n\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseout = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(this, e) || e === this) {\n      return;\n    }\n\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeIn\");\n  };\n\n  var twt = false;\n\n  elid(\"\".concat(_this.name, \"-controls\")).ontouchstart = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(_this.elements.statusButton, e) || e === _this.elements.statusButton || isDescendant(_this.elements.settingsButton, e) || e === _this.elements.settingsButton || isDescendant(_this.elements.fullScreenButton, e) || e === _this.elements.fullScreenButton || isDescendant(_this.elements.loopButton, e) || e === _this.elements.loopButton || isDescendant(_this.elements.totalBar, e) || e === _this.elements.totalBar) {\n      return;\n    }\n\n    _this.elements.volumeControl.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBar.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBarHelper.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.timeDisplay.className = \"\".concat(_this.name, \"-time-width-transition\");\n    _this.elements.volumeCursor.className = \"\".concat(_this.name, \"-volume-cursor-transition\");\n    twt = true;\n  };\n\n  window.addEventListener(\"touchstart\", function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-controls\")), e) || e === elid(\"\".concat(_this.name, \"-controls\"))) {\n      return;\n    }\n\n    if (twt) {\n      _this.elements.volumeControl.className = \"\";\n      _this.elements.volumeBar.className = \"\";\n      _this.elements.volumeBarHelper.className = \"\";\n      _this.elements.timeDisplay.className = \"\";\n      _this.elements.volumeCursor.className = \"\";\n    }\n  }); // elid(`${_this.name}-left-controls`).ontouchstart = function (event) {\n  //   const e = event.toElement || event.relatedTarget || event.target;\n  //     if (isDescendant(_this.elements.statusBtn, e) || e === _this.elements.statusBtn) {\n  //       return false;\n  //     }\n  //     return \"\";\n  // };\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvY29udHJvbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvY29udHJvbHMuanM/MmZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItY29udHJvbHNcIikpLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QucmVtb3ZlKFwibS1mYWRlT3V0XCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QucmVtb3ZlKFwibS1mYWRlT3V0XCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5hZGQoXCJtLWZhZGVJblwiKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LmFkZChcIm0tZmFkZUluXCIpO1xuICB9O1xuXG4gIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItY29udHJvbHNcIikpLm9ubW91c2VvdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcblxuICAgIGlmIChpc0Rlc2NlbmRhbnQodGhpcywgZSkgfHwgZSA9PT0gdGhpcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QuYWRkKFwibS1mYWRlT3V0XCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QuYWRkKFwibS1mYWRlT3V0XCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5yZW1vdmUoXCJtLWZhZGVJblwiKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LnJlbW92ZShcIm0tZmFkZUluXCIpO1xuICB9O1xuXG4gIHZhciB0d3QgPSBmYWxzZTtcblxuICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKS5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcblxuICAgIGlmIChpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLCBlKSB8fCBlID09PSBfdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24gfHwgaXNEZXNjZW5kYW50KF90aGlzLmVsZW1lbnRzLnNldHRpbmdzQnV0dG9uLCBlKSB8fCBlID09PSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc0J1dHRvbiB8fCBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkJ1dHRvbiwgZSkgfHwgZSA9PT0gX3RoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkJ1dHRvbiB8fCBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbiwgZSkgfHwgZSA9PT0gX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbiB8fCBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMudG90YWxCYXIsIGUpIHx8IGUgPT09IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQ29udHJvbC5jbGFzc05hbWUgPSBcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi12b2x1bWUtd2lkdGgtdHJhbnNpdGlvblwiKTtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItdm9sdW1lLXdpZHRoLXRyYW5zaXRpb25cIik7XG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQmFySGVscGVyLmNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXZvbHVtZS13aWR0aC10cmFuc2l0aW9uXCIpO1xuICAgIF90aGlzLmVsZW1lbnRzLnRpbWVEaXNwbGF5LmNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXRpbWUtd2lkdGgtdHJhbnNpdGlvblwiKTtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDdXJzb3IuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItdm9sdW1lLWN1cnNvci10cmFuc2l0aW9uXCIpO1xuICAgIHR3dCA9IHRydWU7XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBlID0gZXZlbnQudG9FbGVtZW50IHx8IGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKGlzRGVzY2VuZGFudChlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKSwgZSkgfHwgZSA9PT0gZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1jb250cm9sc1wiKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHd0KSB7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLmNsYXNzTmFtZSA9IFwiXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NOYW1lID0gXCJcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUJhckhlbHBlci5jbGFzc05hbWUgPSBcIlwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuY2xhc3NOYW1lID0gXCJcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUN1cnNvci5jbGFzc05hbWUgPSBcIlwiO1xuICAgIH1cbiAgfSk7IC8vIGVsaWQoYCR7X3RoaXMubmFtZX0tbGVmdC1jb250cm9sc2ApLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAvLyAgIGNvbnN0IGUgPSBldmVudC50b0VsZW1lbnQgfHwgZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudC50YXJnZXQ7XG4gIC8vICAgICBpZiAoaXNEZXNjZW5kYW50KF90aGlzLmVsZW1lbnRzLnN0YXR1c0J0biwgZSkgfHwgZSA9PT0gX3RoaXMuZWxlbWVudHMuc3RhdHVzQnRuKSB7XG4gIC8vICAgICAgIHJldHVybiBmYWxzZTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHJldHVybiBcIlwiO1xuICAvLyB9O1xufTtcblxuZnVuY3Rpb24gaXNEZXNjZW5kYW50KHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIG5vZGUgPSBjaGlsZC5wYXJlbnROb2RlO1xuXG4gIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.elements.donkeyclipButton.addEventListener(\"click\", function () {\n    var u = create_UUID();\n    var popupDC = window.open(\"https://donkeyclip.com?u=\".concat(u));\n\n    var definition = _this.clip.exportState({\n      unprocessed: true\n    });\n\n    var clipClass = _this.clipClass;\n    window.addEventListener(\"message\", receiveMessage, false);\n\n    function receiveMessage(event) {\n      if (event.data === u) {\n        popupDC.postMessage(JSON.stringify({\n          definition: definition,\n          clipClass: clipClass,\n          u: u\n        }), \"*\");\n      }\n    }\n  });\n};\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c == \"x\" ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvZG9ua2V5Y2xpcC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9kb25rZXljbGlwLmpzP2MzMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIF90aGlzLmVsZW1lbnRzLmRvbmtleWNsaXBCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdSA9IGNyZWF0ZV9VVUlEKCk7XG4gICAgdmFyIHBvcHVwREMgPSB3aW5kb3cub3BlbihcImh0dHBzOi8vZG9ua2V5Y2xpcC5jb20/dT1cIi5jb25jYXQodSkpO1xuXG4gICAgdmFyIGRlZmluaXRpb24gPSBfdGhpcy5jbGlwLmV4cG9ydFN0YXRlKHtcbiAgICAgIHVucHJvY2Vzc2VkOiB0cnVlXG4gICAgfSk7XG5cbiAgICB2YXIgY2xpcENsYXNzID0gX3RoaXMuY2xpcENsYXNzO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCByZWNlaXZlTWVzc2FnZSwgZmFsc2UpO1xuXG4gICAgZnVuY3Rpb24gcmVjZWl2ZU1lc3NhZ2UoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kYXRhID09PSB1KSB7XG4gICAgICAgIHBvcHVwREMucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGRlZmluaXRpb246IGRlZmluaXRpb24sXG4gICAgICAgICAgY2xpcENsYXNzOiBjbGlwQ2xhc3MsXG4gICAgICAgICAgdTogdVxuICAgICAgICB9KSwgXCIqXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfVVVJRCgpIHtcbiAgdmFyIGR0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciB1dWlkID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgdmFyIHIgPSAoZHQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xuICAgIGR0ID0gTWF0aC5mbG9vcihkdCAvIDE2KTtcbiAgICByZXR1cm4gKGMgPT0gXCJ4XCIgPyByIDogciAmIDB4MyB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbiAgcmV0dXJuIHV1aWQ7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.elements.fullScreenButton.addEventListener(\"click\", function () {\n    var elFullScreen = _this.clip.props.host.className.includes(\"full-screen\");\n\n    _this.clip.props.host !== _this.options.host && !elFullScreen ? _this.clip.props.host.appendChild(_this.elements.mcPlayer) : null;\n    _this.clip.props.host !== _this.options.host && elFullScreen ? _this.options.host.appendChild(_this.elements.mcPlayer) : null;\n    elFullScreen ? _this.exitFullscreen() : _this.launchIntoFullscreen(_this.clip.props.host);\n\n    _this.clip.props.host.classList.toggle(\"full-screen\");\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvZnVsbHNjcmVlbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9mdWxsc2NyZWVuLmpzPzhmNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIF90aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxGdWxsU2NyZWVuID0gX3RoaXMuY2xpcC5wcm9wcy5ob3N0LmNsYXNzTmFtZS5pbmNsdWRlcyhcImZ1bGwtc2NyZWVuXCIpO1xuXG4gICAgX3RoaXMuY2xpcC5wcm9wcy5ob3N0ICE9PSBfdGhpcy5vcHRpb25zLmhvc3QgJiYgIWVsRnVsbFNjcmVlbiA/IF90aGlzLmNsaXAucHJvcHMuaG9zdC5hcHBlbmRDaGlsZChfdGhpcy5lbGVtZW50cy5tY1BsYXllcikgOiBudWxsO1xuICAgIF90aGlzLmNsaXAucHJvcHMuaG9zdCAhPT0gX3RoaXMub3B0aW9ucy5ob3N0ICYmIGVsRnVsbFNjcmVlbiA/IF90aGlzLm9wdGlvbnMuaG9zdC5hcHBlbmRDaGlsZChfdGhpcy5lbGVtZW50cy5tY1BsYXllcikgOiBudWxsO1xuICAgIGVsRnVsbFNjcmVlbiA/IF90aGlzLmV4aXRGdWxsc2NyZWVuKCkgOiBfdGhpcy5sYXVuY2hJbnRvRnVsbHNjcmVlbihfdGhpcy5jbGlwLnByb3BzLmhvc3QpO1xuXG4gICAgX3RoaXMuY2xpcC5wcm9wcy5ob3N0LmNsYXNzTGlzdC50b2dnbGUoXCJmdWxsLXNjcmVlblwiKTtcbiAgfSk7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopEnd = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    if (_this.elements.runningBar.offsetWidth >= _this.elements.loopBar.offsetWidth) {\n      _this.elements.runningBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n    }\n\n    if (_this.settings.loopLastPositionXPxls - positionX < 0) {\n      _this.elements.loopBar.style.width = Math.abs(_this.settings.loopLastPositionXPxls - positionX) + \"px\";\n    } else {\n      _this.elements.loopBar.style.left = positionX + \"px\";\n      _this.settings.loopLastPositionXPxls = positionX;\n    }\n\n    _this.settings.loopEndMillisecond = Math.round(_this.clip.duration * ((parseFloat(_this.elements.loopBar.style.left) || 0) + parseFloat(_this.elements.loopBar.style.width)) / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n\n    if (_this.settings.loopStartMillisecond > _this.settings.loopEndMillisecond) {\n      _this.settings.loopStartMillisecond = _this.settings.loopEndMillisecond;\n      _this.settings.loopJourney = true;\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n  };\n\n  _this.listeners.onMouseUpLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.runTimeInfo.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else if (_this.clip.runTimeInfo.state === \"completed\") {\n        var _loopms;\n\n        if (_this.clip.speed >= 0) {\n          _loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          _loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, _loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.play();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth + \"px\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft + \"px\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopEnd(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n  };\n\n  _this.elements.loopBarEnd.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopEnd, false);\n\n  _this.elements.loopBarEnd.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopEnd, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopStart = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = Math.round(clientX - viewportOffset.left);\n    var endPositionsInPxls = Math.round(_this.settings.loopEndMillisecond / _this.clip.duration * _this.elements.totalBar.offsetWidth);\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    var runningBarWidthInPxls = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * _this.elements.totalBar.offsetWidth - positionX;\n    _this.elements.loopBar.style.left = positionX + \"px\";\n    _this.elements.loopBar.style.width = endPositionsInPxls - positionX + \"px\";\n    _this.elements.runningBar.style.width = runningBarWidthInPxls + \"px\";\n    _this.settings.loopLastPositionXPxls = positionX;\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.settings.loopStartMillisecond) {\n      _this.settings.loopEndMillisecond = _this.settings.loopStartMillisecond;\n      _this.elements.loopBar.style.width = \"0px\";\n      _this.elements.runningBar.style.width = \"0px\";\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n\n    if (_this.settings.loopStartMillisecond > _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n  };\n\n  _this.listeners.onMouseUpLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.runTimeInfo.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.play();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    e.preventDefault();\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopStart(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n  };\n\n  _this.elements.loopBarStart.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopStart, false);\n\n  _this.elements.loopBarStart.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopStart, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  _this.elements.loopButton.onclick = function () {\n    _this.settings.loopActivated = !_this.settings.loopActivated;\n\n    _this.elements.loopButton.classList.toggle(\"svg-selected\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarStart.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeOut\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeIn\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"\".concat(_this.name, \"-hide\"));\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n    _this.settings.needsUpdate = true;\n\n    if (!_this.settings.loopActivated) {\n      _this.elements.loopBar.style.left = \"0%\";\n      _this.elements.loopBar.style.width = \"100%\";\n      _this.settings.loopStartMillisecond = 0;\n      _this.settings.loopEndMillisecond = _this.clip.duration;\n      _this.settings.loopLastPositionXPxls = 0;\n      _this.settings.loopLastPositionXPercentage = 0;\n      _this.elements.runningBar.style.width = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * 100 + \"%\";\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvbG9vcEJ0bi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9sb29wQnRuLmpzPzkyY2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpLFxuICAgIGVsaWQgPSBfcmVxdWlyZS5lbGlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICBfdGhpcy5lbGVtZW50cy5sb29wQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZCA9ICFfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwic3ZnLXNlbGVjdGVkXCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVPdXRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVPdXRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyU3RhcnQuY2xhc3NMaXN0LnRvZ2dsZShcIm0tZmFkZUluXCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaGlkZVwiKSk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVJblwiKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1oaWRlXCIpKTtcblxuICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItbG9vcC10aW1lXCIpKS5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlT3V0XCIpO1xuICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItbG9vcC10aW1lXCIpKS5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlSW5cIik7XG4gICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1sb29wLXRpbWVcIikpLmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaGlkZVwiKSk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubG9vcFN0YXJ0TWlsbGlzZWNvbmQ7XG4gICAgX3RoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkKSB7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLnN0eWxlLmxlZnQgPSBcIjAlXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wU3RhcnRNaWxsaXNlY29uZCA9IDA7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQgPSBfdGhpcy5jbGlwLmR1cmF0aW9uO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzID0gMDtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUGVyY2VudGFnZSA9IDA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5ydW5uaW5nQmFyLnN0eWxlLndpZHRoID0gX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQgLyBfdGhpcy5jbGlwLmR1cmF0aW9uICogMTAwICsgXCIlXCI7XG4gICAgfVxuICB9O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.listeners.editableLoopStartTime = function () {\n    _this.elements.editableLoopStartTime.value = _this.elements.loopStartTime.innerHTML;\n\n    _this.elements.loopStartTime.replaceWith(_this.elements.editableLoopStartTime);\n\n    _this.elements.editableLoopStartTime.focus();\n  };\n\n  _this.listeners.editableLoopEndTime = function () {\n    _this.elements.editableLoopEndTime.value = _this.elements.loopEndTime.innerHTML;\n\n    _this.elements.loopEndTime.replaceWith(_this.elements.editableLoopEndTime);\n\n    _this.elements.editableLoopEndTime.focus();\n  };\n\n  _this.elements.editableLoopEndTime.onkeydown = _this.elements.editableLoopStartTime.onkeydown = function (e) {\n    e.preventDefault();\n\n    if (e.keyCode === 13) {\n      _this.elements.editableLoopStartTime.onfocusout();\n\n      _this.elements.editableLoopEndTime.onfocusout();\n    }\n\n    if (e.keyCode === 8) {\n      e.target.value = e.target.value.toString().substring(0, e.target.value.toString().length - 1);\n    }\n\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n\n    var newValue = parseFloat((e.target.value || 0).toString() + e.key);\n\n    if (newValue > _this.clip.duration) {\n      return;\n    }\n\n    e.target.value = newValue;\n\n    if (e.target === _this.elements.editableLoopStartTime) {\n      var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopStart(event);\n\n      _this.listeners.onCursorMoveLoopStart(event);\n\n      _this.listeners.onMouseUpLoopStart(event);\n    } else if (e.target === _this.elements.editableLoopEndTime) {\n      var _viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var _event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + _viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopEnd(_event);\n\n      _this.listeners.onCursorMoveLoopEnd(_event);\n\n      _this.listeners.onMouseUpLoopEnd(_event);\n    }\n  };\n\n  _this.elements.loopStartTime.onclick = _this.listeners.editableLoopStartTime;\n  _this.elements.loopEndTime.onclick = _this.listeners.editableLoopEndTime;\n\n  _this.elements.editableLoopStartTime.onfocusout = function () {\n    _this.elements.editableLoopStartTime.replaceWith(_this.elements.loopStartTime);\n  };\n\n  _this.elements.editableLoopEndTime.onfocusout = function () {\n    _this.elements.editableLoopEndTime.replaceWith(_this.elements.loopEndTime);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvbG9vcFN0YXJ0RW5kLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2xvb3BTdGFydEVuZC5qcz9kMDBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICBfdGhpcy5saXN0ZW5lcnMuZWRpdGFibGVMb29wU3RhcnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZS52YWx1ZSA9IF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUuaW5uZXJIVE1MO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5yZXBsYWNlV2l0aChfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLmZvY3VzKCk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLmVkaXRhYmxlTG9vcEVuZFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS52YWx1ZSA9IF90aGlzLmVsZW1lbnRzLmxvb3BFbmRUaW1lLmlubmVySFRNTDtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BFbmRUaW1lLnJlcGxhY2VXaXRoKF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5mb2N1cygpO1xuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUub25rZXlkb3duID0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLm9ua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZS5vbmZvY3Vzb3V0KCk7XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUub25mb2N1c291dCgpO1xuICAgIH1cblxuICAgIGlmIChlLmtleUNvZGUgPT09IDgpIHtcbiAgICAgIGUudGFyZ2V0LnZhbHVlID0gZS50YXJnZXQudmFsdWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZS50YXJnZXQudmFsdWUudG9TdHJpbmcoKS5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgZS50YXJnZXQuYmx1cigpO1xuICAgIH1cblxuICAgIHZhciBuZXdWYWx1ZSA9IHBhcnNlRmxvYXQoKGUudGFyZ2V0LnZhbHVlIHx8IDApLnRvU3RyaW5nKCkgKyBlLmtleSk7XG5cbiAgICBpZiAobmV3VmFsdWUgPiBfdGhpcy5jbGlwLmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZS50YXJnZXQudmFsdWUgPSBuZXdWYWx1ZTtcblxuICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lKSB7XG4gICAgICB2YXIgdmlld3BvcnRPZmZzZXQgPSBfdGhpcy5lbGVtZW50cy50b3RhbEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7fSxcbiAgICAgICAgY2xpZW50WDogX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggLyBfdGhpcy5jbGlwLmR1cmF0aW9uICogZS50YXJnZXQudmFsdWUgKyB2aWV3cG9ydE9mZnNldC5sZWZ0XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZURvd25Mb29wU3RhcnQoZXZlbnQpO1xuXG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlTG9vcFN0YXJ0KGV2ZW50KTtcblxuICAgICAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcExvb3BTdGFydChldmVudCk7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZSkge1xuICAgICAgdmFyIF92aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICB2YXIgX2V2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7fSxcbiAgICAgICAgY2xpZW50WDogX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggLyBfdGhpcy5jbGlwLmR1cmF0aW9uICogZS50YXJnZXQudmFsdWUgKyBfdmlld3BvcnRPZmZzZXQubGVmdFxuICAgICAgfTtcblxuICAgICAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duTG9vcEVuZChfZXZlbnQpO1xuXG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlTG9vcEVuZChfZXZlbnQpO1xuXG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwTG9vcEVuZChfZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5sb29wU3RhcnRUaW1lLm9uY2xpY2sgPSBfdGhpcy5saXN0ZW5lcnMuZWRpdGFibGVMb29wU3RhcnRUaW1lO1xuICBfdGhpcy5lbGVtZW50cy5sb29wRW5kVGltZS5vbmNsaWNrID0gX3RoaXMubGlzdGVuZXJzLmVkaXRhYmxlTG9vcEVuZFRpbWU7XG5cbiAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLm9uZm9jdXNvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLnJlcGxhY2VXaXRoKF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUpO1xuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUub25mb2N1c291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BFbmRUaW1lLnJlcGxhY2VXaXRoKF90aGlzLmVsZW1lbnRzLmxvb3BFbmRUaW1lKTtcbiAgfTtcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // only on desctop devices\n  if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    var loopBarMouseInOut = function loopBarMouseInOut() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeOut\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeIn\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"\".concat(_this.name, \"-hide\")); // if (elid(`${_this.name}-hover-display`).className.includes(`m-fadeIn`)) {\n      //   _this.previewJourney = hoverTimeCapsule.startJourney(_this.previewClip);\n      // } else {\n      //   _this.previewJourney.destination();\n      // }\n\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarAddListeners = function loopBarAddListeners() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      loopBarMouseInOut();\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n\n    _this.elements.loopBar.onmousedown = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = null;\n      _this.elements.loopBar.onmousemove = null;\n      addListener(\"mouseup\", loopBarAddListeners, false);\n      addListener(\"touchend\", loopBarAddListeners, false);\n      addListener(\"mousemove\", loopBarMouseMove, false);\n      addListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseup = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarMouseMove = function loopBarMouseMove(e) {\n      var clientX = e.clientX;\n\n      var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n      if (clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls > _this.settings.loopLastPositionXPxls + _this.elements.loopBar.offsetWidth && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopEndMillisecond;\n        return;\n      } else if (clientX - viewportOffset.left < 0 && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopStartMillisecond;\n        return;\n      }\n\n      var positionX = clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls;\n\n      if (positionX < 0) {\n        positionX = 0;\n      }\n\n      var previewWidth = elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth * _this.previewScale;\n\n      var halfPreviewWidth = previewWidth / 2;\n      var clipWidth = elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth;\n      var halfClipWidth = clipWidth / 2; // console.log(\n      //   elid(`${_this.name}-hover-display`).offsetWidth,\n      //   _this.previewScale,\n      //   positionX,\n      //   clipWidth,\n      //   halfClipWidth,\n      //   previewWidth,\n      //   halfPreviewWidth\n      // );\n\n      var left = positionX - halfClipWidth; // console.log(left, halfClipWidth);\n\n      if (positionX - halfPreviewWidth < 0) {\n        left = 0 - (previewWidth + halfPreviewWidth);\n      } else if (positionX + halfPreviewWidth > _this.elements.totalBar.offsetWidth) {\n        left = _this.elements.totalBar.offsetWidth - halfClipWidth - halfPreviewWidth;\n      }\n\n      var ms = Math.round(positionX / _this.elements.totalBar.offsetWidth * _this.clip.duration);\n\n      if (_this.options.preview) {\n        var fraction = ms / _this.clip.duration;\n\n        _this.previewClip.onProgress(fraction, ms);\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = ms;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.left = left + \"px\";\n    };\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvcHJldmlldy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9wcmV2aWV3LmpzPzI0YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpLFxuICAgIGVsaWQgPSBfcmVxdWlyZS5lbGlkLFxuICAgIGFkZExpc3RlbmVyID0gX3JlcXVpcmUuYWRkTGlzdGVuZXIsXG4gICAgcmVtb3ZlTGlzdGVuZXIgPSBfcmVxdWlyZS5yZW1vdmVMaXN0ZW5lcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3RoaXMpIHtcbiAgLy8gb25seSBvbiBkZXNjdG9wIGRldmljZXNcbiAgaWYgKCEvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICB2YXIgbG9vcEJhck1vdXNlSW5PdXQgPSBmdW5jdGlvbiBsb29wQmFyTW91c2VJbk91dCgpIHtcbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlT3V0XCIpO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlSW5cIik7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLWRpc3BsYXlcIikpLmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaGlkZVwiKSk7IC8vIGlmIChlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5jbGFzc05hbWUuaW5jbHVkZXMoYG0tZmFkZUluYCkpIHtcbiAgICAgIC8vICAgX3RoaXMucHJldmlld0pvdXJuZXkgPSBob3ZlclRpbWVDYXBzdWxlLnN0YXJ0Sm91cm5leShfdGhpcy5wcmV2aWV3Q2xpcCk7XG4gICAgICAvLyB9IGVsc2Uge1xuICAgICAgLy8gICBfdGhpcy5wcmV2aWV3Sm91cm5leS5kZXN0aW5hdGlvbigpO1xuICAgICAgLy8gfVxuXG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vtb3ZlID0gbG9vcEJhck1vdXNlTW92ZTtcbiAgICB9O1xuXG4gICAgdmFyIGxvb3BCYXJBZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBsb29wQmFyQWRkTGlzdGVuZXJzKCkge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsb29wQmFyTW91c2VJbk91dCgpO1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3ZlciA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW91dCA9IGxvb3BCYXJNb3VzZUluT3V0O1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgICByZW1vdmVMaXN0ZW5lcihcIm1vdXNldXBcIiwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBsb29wQmFyQWRkTGlzdGVuZXJzLCBmYWxzZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW92ZXIgPSBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdXQgPSBsb29wQmFyTW91c2VJbk91dDtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMucHJldmlldykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW92ZXIgPSBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdXQgPSBudWxsO1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IG51bGw7XG4gICAgICBhZGRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBsb29wQmFyQWRkTGlzdGVuZXJzLCBmYWxzZSk7XG4gICAgICBhZGRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICBhZGRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZW1vdmVMaXN0ZW5lcihcIm1vdXNldXBcIiwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBsb29wQmFyQWRkTGlzdGVuZXJzLCBmYWxzZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbG9vcEJhck1vdXNlSW5PdXQ7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vtb3ZlID0gbG9vcEJhck1vdXNlTW92ZTtcbiAgICB9O1xuXG4gICAgdmFyIGxvb3BCYXJNb3VzZU1vdmUgPSBmdW5jdGlvbiBsb29wQmFyTW91c2VNb3ZlKGUpIHtcbiAgICAgIHZhciBjbGllbnRYID0gZS5jbGllbnRYO1xuXG4gICAgICB2YXIgdmlld3BvcnRPZmZzZXQgPSBfdGhpcy5lbGVtZW50cy5sb29wQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoY2xpZW50WCAtIHZpZXdwb3J0T2Zmc2V0LmxlZnQgKyBfdGhpcy5zZXR0aW5ncy5sb29wTGFzdFBvc2l0aW9uWFB4bHMgPiBfdGhpcy5zZXR0aW5ncy5sb29wTGFzdFBvc2l0aW9uWFB4bHMgKyBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9mZnNldFdpZHRoICYmICFfdGhpcy5zZXR0aW5ncy5yZXNpemVMb29wKSB7XG4gICAgICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItbWlsbGlzZWNvbmRcIikpLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxvb3BFbmRNaWxsaXNlY29uZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdCA8IDAgJiYgIV90aGlzLnNldHRpbmdzLnJlc2l6ZUxvb3ApIHtcbiAgICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1taWxsaXNlY29uZFwiKSkuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubG9vcFN0YXJ0TWlsbGlzZWNvbmQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc2l0aW9uWCA9IGNsaWVudFggLSB2aWV3cG9ydE9mZnNldC5sZWZ0ICsgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzO1xuXG4gICAgICBpZiAocG9zaXRpb25YIDwgMCkge1xuICAgICAgICBwb3NpdGlvblggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldmlld1dpZHRoID0gZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5vZmZzZXRXaWR0aCAqIF90aGlzLnByZXZpZXdTY2FsZTtcblxuICAgICAgdmFyIGhhbGZQcmV2aWV3V2lkdGggPSBwcmV2aWV3V2lkdGggLyAyO1xuICAgICAgdmFyIGNsaXBXaWR0aCA9IGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItZGlzcGxheVwiKSkub2Zmc2V0V2lkdGg7XG4gICAgICB2YXIgaGFsZkNsaXBXaWR0aCA9IGNsaXBXaWR0aCAvIDI7IC8vIGNvbnNvbGUubG9nKFxuICAgICAgLy8gICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5vZmZzZXRXaWR0aCxcbiAgICAgIC8vICAgX3RoaXMucHJldmlld1NjYWxlLFxuICAgICAgLy8gICBwb3NpdGlvblgsXG4gICAgICAvLyAgIGNsaXBXaWR0aCxcbiAgICAgIC8vICAgaGFsZkNsaXBXaWR0aCxcbiAgICAgIC8vICAgcHJldmlld1dpZHRoLFxuICAgICAgLy8gICBoYWxmUHJldmlld1dpZHRoXG4gICAgICAvLyApO1xuXG4gICAgICB2YXIgbGVmdCA9IHBvc2l0aW9uWCAtIGhhbGZDbGlwV2lkdGg7IC8vIGNvbnNvbGUubG9nKGxlZnQsIGhhbGZDbGlwV2lkdGgpO1xuXG4gICAgICBpZiAocG9zaXRpb25YIC0gaGFsZlByZXZpZXdXaWR0aCA8IDApIHtcbiAgICAgICAgbGVmdCA9IDAgLSAocHJldmlld1dpZHRoICsgaGFsZlByZXZpZXdXaWR0aCk7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uWCArIGhhbGZQcmV2aWV3V2lkdGggPiBfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aCkge1xuICAgICAgICBsZWZ0ID0gX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggLSBoYWxmQ2xpcFdpZHRoIC0gaGFsZlByZXZpZXdXaWR0aDtcbiAgICAgIH1cblxuICAgICAgdmFyIG1zID0gTWF0aC5yb3VuZChwb3NpdGlvblggLyBfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aCAqIF90aGlzLmNsaXAuZHVyYXRpb24pO1xuXG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHZhciBmcmFjdGlvbiA9IG1zIC8gX3RoaXMuY2xpcC5kdXJhdGlvbjtcblxuICAgICAgICBfdGhpcy5wcmV2aWV3Q2xpcC5vblByb2dyZXNzKGZyYWN0aW9uLCBtcyk7XG4gICAgICB9XG5cbiAgICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItbWlsbGlzZWNvbmRcIikpLmlubmVySFRNTCA9IG1zO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS5sZWZ0ID0gbGVmdCArIFwicHhcIjtcbiAgICB9O1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMove = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.loopBar.offsetWidth) {\n      positionX = _this.elements.loopBar.offsetWidth;\n    }\n\n    _this.handleDrag(positionX);\n  };\n\n  _this.listeners.onMouseUp = function () {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUp, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMove, false);\n\n    _this.handleDragEnd(_this.settings);\n  };\n\n  _this.listeners.onMouseDown = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.handleDragStart(_this.clip);\n\n    _this.listeners.onCursorMove(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    addListener(\"touchend\", _this.listeners.onMouseUp, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMove, false);\n  };\n\n  _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n  _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvcHJvZ3Jlc3NCYXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvcHJvZ3Jlc3NCYXIuanM/ZGUyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgYWRkTGlzdGVuZXIgPSBfcmVxdWlyZS5hZGRMaXN0ZW5lcixcbiAgICByZW1vdmVMaXN0ZW5lciA9IF9yZXF1aXJlLnJlbW92ZUxpc3RlbmVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICAvLyBsZXQgcGUgPSBmYWxzZTtcbiAgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjbGllbnRYID0gZS5jbGllbnRYIHx8ICgoZS50b3VjaGVzIHx8IFtdKVswXSB8fCB7fSkuY2xpZW50WDtcblxuICAgIHZhciB2aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB2YXIgcG9zaXRpb25YID0gY2xpZW50WCAtIHZpZXdwb3J0T2Zmc2V0LmxlZnQ7XG5cbiAgICBpZiAocG9zaXRpb25YIDwgMCkge1xuICAgICAgcG9zaXRpb25YID0gMDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uWCA+IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub2Zmc2V0V2lkdGgpIHtcbiAgICAgIHBvc2l0aW9uWCA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub2Zmc2V0V2lkdGg7XG4gICAgfVxuXG4gICAgX3RoaXMuaGFuZGxlRHJhZyhwb3NpdGlvblgpO1xuICB9O1xuXG4gIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuICAgIHJlbW92ZUxpc3RlbmVyKFwibW91c2V1cFwiLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZSwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKFwidG91Y2htb3ZlXCIsIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUsIGZhbHNlKTtcblxuICAgIF90aGlzLmhhbmRsZURyYWdFbmQoX3RoaXMuc2V0dGluZ3MpO1xuICB9O1xuXG4gIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYXV0b1wiO1xuXG4gICAgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwicGxheWluZ1wiKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5wbGF5QWZ0ZXJSZXNpemUgPSB0cnVlO1xuICAgIH1cblxuICAgIF90aGlzLmhhbmRsZURyYWdTdGFydChfdGhpcy5jbGlwKTtcblxuICAgIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUoZSk7XG5cbiAgICBhZGRMaXN0ZW5lcihcIm1vdXNldXBcIiwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKFwidG91Y2hlbmRcIiwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUsIGZhbHNlKTtcbiAgICBhZGRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlLCBmYWxzZSk7XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93biwgZmFsc2UpO1xuXG4gIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duLCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSwgZmFsc2UpO1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  _this.elements.settingsShowIndicator.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-indicator-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.indicator.style.visibility = \"hidden\";\n      _this.elements.statusButton.style.width = \"40px\";\n      _this.elements.statusButton.style.height = \"25px\";\n      _this.elements.statusButton.style.bottom = \"0px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.indicator.style.visibility = \"visible\";\n      _this.elements.statusButton.style.width = \"35px\";\n      _this.elements.statusButton.style.height = \"20px\";\n      _this.elements.statusButton.style.bottom = \"5px\";\n    }\n  };\n\n  _this.elements.settingsPointerEvents.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-pointer-events-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.options.pointerEvents = false;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    }\n  };\n\n  _this.elements.settingsShowVolume.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeBarHelper.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\")); // _this.elements.timeDisplay.classList.toggle(\n    //   `${_this.name}-time-width-transition`\n    // );\n\n\n    var checkbox = elid(\"\".concat(_this.name, \"-show-volume-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.volumeControl.style.visibility = \"hidden\";\n      _this.elements.timeDisplay.style.left = \"45px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.volumeControl.style.visibility = \"visible\";\n      _this.elements.timeDisplay.style.left = \"\";\n    }\n  };\n\n  _this.elements.settingsShowPreview.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-preview-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"hidden\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"none\";\n      _this.options.preview = false;\n    } else {\n      if (!_this.previewClip) {\n        _this.createPreviewDisplay();\n      }\n\n      checkbox.checked = true;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"visible\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"flex\";\n      _this.options.preview = true;\n    }\n  };\n\n  _this.elements.settingsButton.onclick = function (e) {\n    e.preventDefault();\n\n    var showHideSettings = function showHideSettings(e) {\n      if (_this.elements.settingsPanel.contains(e.target)) {\n        return true;\n      }\n\n      _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeOut\");\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeIn\");\n\n      if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n        removeListener(\"click\", showHideSettings, false);\n      }\n    };\n\n    if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n      addListener(\"click\", showHideSettings, false);\n    } else {\n      removeListener(\"click\", showHideSettings, false);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvc2V0dGluZ3MuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvc2V0dGluZ3MuanM/MjljMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQsXG4gICAgYWRkTGlzdGVuZXIgPSBfcmVxdWlyZS5hZGRMaXN0ZW5lcixcbiAgICByZW1vdmVMaXN0ZW5lciA9IF9yZXF1aXJlLnJlbW92ZUxpc3RlbmVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1Nob3dJbmRpY2F0b3Iub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjaGVja2JveCA9IGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc2hvdy1pbmRpY2F0b3ItY2hlY2tib3hcIikpO1xuXG4gICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmluZGljYXRvci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS53aWR0aCA9IFwiNDBweFwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLmhlaWdodCA9IFwiMjVweFwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgX3RoaXMuZWxlbWVudHMuaW5kaWNhdG9yLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS53aWR0aCA9IFwiMzVweFwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLmhlaWdodCA9IFwiMjBweFwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLmJvdHRvbSA9IFwiNXB4XCI7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGNoZWNrYm94ID0gZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1wb2ludGVyLWV2ZW50cy1jaGVja2JveFwiKSk7XG5cbiAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMub3B0aW9ucy5wb2ludGVyRXZlbnRzID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbGVtZW50cy5tY1BsYXllci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy5tY1BsYXllci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICB9XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NTaG93Vm9sdW1lLm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi12b2x1bWUtd2lkdGgtdHJhbnNpdGlvblwiKSk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi12b2x1bWUtd2lkdGgtdHJhbnNpdGlvblwiKSk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1oaWRlXCIpKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUJhckhlbHBlci5jbGFzc0xpc3QudG9nZ2xlKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXZvbHVtZS13aWR0aC10cmFuc2l0aW9uXCIpKTsgLy8gX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAvLyAgIGAke190aGlzLm5hbWV9LXRpbWUtd2lkdGgtdHJhbnNpdGlvbmBcbiAgICAvLyApO1xuXG5cbiAgICB2YXIgY2hlY2tib3ggPSBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNob3ctdm9sdW1lLWNoZWNrYm94XCIpKTtcblxuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuc3R5bGUubGVmdCA9IFwiNDVweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuc3R5bGUubGVmdCA9IFwiXCI7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd1ByZXZpZXcub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjaGVja2JveCA9IGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc2hvdy1wcmV2aWV3LWNoZWNrYm94XCIpKTtcblxuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLWRpc3BsYXlcIikpLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5vcHRpb25zLnByZXZpZXcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFfdGhpcy5wcmV2aWV3Q2xpcCkge1xuICAgICAgICBfdGhpcy5jcmVhdGVQcmV2aWV3RGlzcGxheSgpO1xuICAgICAgfVxuXG4gICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItZGlzcGxheVwiKSkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICBfdGhpcy5vcHRpb25zLnByZXZpZXcgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc0J1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgc2hvd0hpZGVTZXR0aW5ncyA9IGZ1bmN0aW9uIHNob3dIaWRlU2V0dGluZ3MoZSkge1xuICAgICAgaWYgKF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaGlkZVwiKSk7XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NMaXN0LnRvZ2dsZShcIm0tZmFkZU91dFwiKTtcblxuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlSW5cIik7XG5cbiAgICAgIGlmIChfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTmFtZS5pbmNsdWRlcyhcIm0tZmFkZU91dFwiKSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dIaWRlU2V0dGluZ3MsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NOYW1lLmluY2x1ZGVzKFwibS1mYWRlT3V0XCIpKSB7XG4gICAgICBhZGRMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dIaWRlU2V0dGluZ3MsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJjbGlja1wiLCBzaG93SGlkZVNldHRpbmdzLCBmYWxzZSk7XG4gICAgfVxuICB9O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // const pe = false;\n  _this.elements.settingsSpeedButtonShow.onclick = _this.elements.settingsSpeedButtonHide.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    var includesClass = _this.elements.settingsPanel.className.includes(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    if (includesClass) {\n      _this.elements.settingsMainPanel.style.display = \"none\";\n      _this.elements.settingsSpeedPanel.style.display = \"block\";\n    } else {\n      _this.elements.settingsSpeedPanel.style.display = \"none\";\n      _this.elements.settingsMainPanel.style.display = \"block\";\n    }\n  };\n\n  var onCursorMoveSpeedBar = function onCursorMoveSpeedBar(e) {\n    e.preventDefault();\n\n    var viewportOffset = _this.elements.speedBar.getBoundingClientRect();\n\n    var clientY = e.clientY || ((e.touches || [])[0] || {}).clientY;\n    var positionY = clientY - viewportOffset.top;\n    positionY -= 8;\n\n    if (positionY < 0) {\n      positionY = 0;\n    } else if (positionY > _this.elements.speedBar.offsetHeight - 16) {\n      positionY = _this.elements.speedBar.offsetHeight - 16;\n    }\n\n    positionY = Math.floor(positionY); // show speed\n\n    var percentage = (positionY / ((_this.options.speedValues.length - 1) * 16) - 1) * -1;\n    var step = 1 / (_this.options.speedValues.length - 1);\n\n    var speed = _this.calculateSpeed(step, _this.options.speedValues, percentage);\n\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = speed + \"0\";\n    elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    _this.clip.executionSpeed = speed;\n  };\n\n  var onMouseUpSpeedBar = function onMouseUpSpeedBar(e) {\n    // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n    removeListener(\"mouseup\", onMouseUpSpeedBar, false);\n    removeListener(\"touchend\", onMouseUpSpeedBar, false);\n    removeListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    removeListener(\"touchmove\", onCursorMoveSpeedBar, false);\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = \"Speed\";\n    var speedDisplay;\n    _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n    _this.elements.speedCurrent.innerHTML = speedDisplay;\n  };\n\n  var onMouseDownSpeedBar = function onMouseDownSpeedBar(e) {\n    // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n    onCursorMoveSpeedBar(e);\n    addListener(\"mouseup\", onMouseUpSpeedBar, false);\n    addListener(\"touchend\", onMouseUpSpeedBar, false);\n    addListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    addListener(\"touchmove\", onCursorMoveSpeedBar, false);\n  };\n\n  _this.elements.speedBarHelper.addEventListener(\"mousedown\", onMouseDownSpeedBar, false);\n\n  _this.elements.speedBarHelper.addEventListener(\"touchstart\", onMouseDownSpeedBar, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvc3BlZWQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvc3BlZWQuanM/NDgyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQsXG4gICAgYWRkTGlzdGVuZXIgPSBfcmVxdWlyZS5hZGRMaXN0ZW5lcixcbiAgICByZW1vdmVMaXN0ZW5lciA9IF9yZXF1aXJlLnJlbW92ZUxpc3RlbmVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICAvLyBjb25zdCBwZSA9IGZhbHNlO1xuICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1NwZWVkQnV0dG9uU2hvdy5vbmNsaWNrID0gX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NTcGVlZEJ1dHRvbkhpZGUub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNldHRpbmdzLXNwZWVkLXBhbmVsXCIpKTtcblxuICAgIHZhciBpbmNsdWRlc0NsYXNzID0gX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jbGFzc05hbWUuaW5jbHVkZXMoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc2V0dGluZ3Mtc3BlZWQtcGFuZWxcIikpO1xuXG4gICAgaWYgKGluY2x1ZGVzQ2xhc3MpIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzTWFpblBhbmVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRQYW5lbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1NwZWVkUGFuZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NNYWluUGFuZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uQ3Vyc29yTW92ZVNwZWVkQmFyID0gZnVuY3Rpb24gb25DdXJzb3JNb3ZlU3BlZWRCYXIoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciB2aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLnNwZWVkQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdmFyIGNsaWVudFkgPSBlLmNsaWVudFkgfHwgKChlLnRvdWNoZXMgfHwgW10pWzBdIHx8IHt9KS5jbGllbnRZO1xuICAgIHZhciBwb3NpdGlvblkgPSBjbGllbnRZIC0gdmlld3BvcnRPZmZzZXQudG9wO1xuICAgIHBvc2l0aW9uWSAtPSA4O1xuXG4gICAgaWYgKHBvc2l0aW9uWSA8IDApIHtcbiAgICAgIHBvc2l0aW9uWSA9IDA7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvblkgPiBfdGhpcy5lbGVtZW50cy5zcGVlZEJhci5vZmZzZXRIZWlnaHQgLSAxNikge1xuICAgICAgcG9zaXRpb25ZID0gX3RoaXMuZWxlbWVudHMuc3BlZWRCYXIub2Zmc2V0SGVpZ2h0IC0gMTY7XG4gICAgfVxuXG4gICAgcG9zaXRpb25ZID0gTWF0aC5mbG9vcihwb3NpdGlvblkpOyAvLyBzaG93IHNwZWVkXG5cbiAgICB2YXIgcGVyY2VudGFnZSA9IChwb3NpdGlvblkgLyAoKF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMSkgKiAxNikgLSAxKSAqIC0xO1xuICAgIHZhciBzdGVwID0gMSAvIChfdGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIHNwZWVkID0gX3RoaXMuY2FsY3VsYXRlU3BlZWQoc3RlcCwgX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcywgcGVyY2VudGFnZSk7XG5cbiAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNwZWVkLXJ1bnRpbWVcIikpLmlubmVySFRNTCA9IHNwZWVkICsgXCIwXCI7XG4gICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1zcGVlZC1jdXJzb3JcIikpLnN0eWxlLnRvcCA9IHBvc2l0aW9uWSArIFwicHhcIjtcbiAgICBfdGhpcy5jbGlwLmV4ZWN1dGlvblNwZWVkID0gc3BlZWQ7XG4gIH07XG5cbiAgdmFyIG9uTW91c2VVcFNwZWVkQmFyID0gZnVuY3Rpb24gb25Nb3VzZVVwU3BlZWRCYXIoZSkge1xuICAgIC8vIGlmIChwZSkge1xuICAgIC8vICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQb2ludGVyRXZlbnRzLmNsaWNrKCk7XG4gICAgLy8gfVxuICAgIF90aGlzLmVsZW1lbnRzLmxpc3RlbmVySGVscGVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZXVwXCIsIG9uTW91c2VVcFNwZWVkQmFyLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBvbk1vdXNlVXBTcGVlZEJhciwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uQ3Vyc29yTW92ZVNwZWVkQmFyLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25DdXJzb3JNb3ZlU3BlZWRCYXIsIGZhbHNlKTtcbiAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNwZWVkLXJ1bnRpbWVcIikpLmlubmVySFRNTCA9IFwiU3BlZWRcIjtcbiAgICB2YXIgc3BlZWREaXNwbGF5O1xuICAgIF90aGlzLmNsaXAuc3BlZWQgPT0gMSA/IHNwZWVkRGlzcGxheSA9IFwiTm9ybWFsXCIgOiBzcGVlZERpc3BsYXkgPSBfdGhpcy5jbGlwLnNwZWVkO1xuICAgIF90aGlzLmVsZW1lbnRzLnNwZWVkQ3VycmVudC5pbm5lckhUTUwgPSBzcGVlZERpc3BsYXk7XG4gIH07XG5cbiAgdmFyIG9uTW91c2VEb3duU3BlZWRCYXIgPSBmdW5jdGlvbiBvbk1vdXNlRG93blNwZWVkQmFyKGUpIHtcbiAgICAvLyBpZiAoIV90aGlzLm9wdGlvbnMucG9pbnRlckV2ZW50cykge1xuICAgIC8vICAgcGUgPSB0cnVlO1xuICAgIC8vICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQb2ludGVyRXZlbnRzLmNsaWNrKCk7XG4gICAgLy8gfVxuICAgIF90aGlzLmVsZW1lbnRzLmxpc3RlbmVySGVscGVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25DdXJzb3JNb3ZlU3BlZWRCYXIoZSk7XG4gICAgYWRkTGlzdGVuZXIoXCJtb3VzZXVwXCIsIG9uTW91c2VVcFNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBvbk1vdXNlVXBTcGVlZEJhciwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uQ3Vyc29yTW92ZVNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25DdXJzb3JNb3ZlU3BlZWRCYXIsIGZhbHNlKTtcbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5zcGVlZEJhckhlbHBlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG9uTW91c2VEb3duU3BlZWRCYXIsIGZhbHNlKTtcblxuICBfdGhpcy5lbGVtZW50cy5zcGVlZEJhckhlbHBlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBvbk1vdXNlRG93blNwZWVkQmFyLCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSwgZmFsc2UpO1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.elements.statusButton.onclick = function (e) {\n    e.preventDefault(); // console.log(_this.clip);\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n    } else if (_this.clip.runTimeInfo.state === \"paused\" || _this.clip.runTimeInfo.state === \"idle\" || _this.clip.runTimeInfo.state === \"transitional\" || _this.clip.runTimeInfo.state === \"armed\") {\n      _this.clip.play();\n    } //not working below this\n    else if (_this.clip.runTimeInfo.state === \"idle\") {\n        if (_this.clip.speed >= 0) {\n          _this.clip.play();\n\n          _this.settings.needsUpdate = true;\n        } else {\n          _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        }\n      } else if (_this.clip.runTimeInfo.state === \"completed\") {\n        if (_this.clip.speed >= 0) {\n          _this.createJourney(_this.clip, 0, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        } else {\n          _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        }\n      }\n\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvc3RhdHVzQnRuLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3N0YXR1c0J0bi5qcz9mODVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICBfdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBjb25zb2xlLmxvZyhfdGhpcy5jbGlwKTtcblxuICAgIGlmIChfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBcInBsYXlpbmdcIikge1xuICAgICAgX3RoaXMuY2xpcC5wYXVzZSgpO1xuICAgIH0gZWxzZSBpZiAoX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PT0gXCJwYXVzZWRcIiB8fCBfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBcImlkbGVcIiB8fCBfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBcInRyYW5zaXRpb25hbFwiIHx8IF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwiYXJtZWRcIikge1xuICAgICAgX3RoaXMuY2xpcC5wbGF5KCk7XG4gICAgfSAvL25vdCB3b3JraW5nIGJlbG93IHRoaXNcbiAgICBlbHNlIGlmIChfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgICBpZiAoX3RoaXMuY2xpcC5zcGVlZCA+PSAwKSB7XG4gICAgICAgICAgX3RoaXMuY2xpcC5wbGF5KCk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuY3JlYXRlSm91cm5leShfdGhpcy5jbGlwLCBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQgLSAxLCB7XG4gICAgICAgICAgICBiZWZvcmU6IFwicGF1c2VcIixcbiAgICAgICAgICAgIGFmdGVyOiBcInBsYXlcIlxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwiY29tcGxldGVkXCIpIHtcbiAgICAgICAgaWYgKF90aGlzLmNsaXAuc3BlZWQgPj0gMCkge1xuICAgICAgICAgIF90aGlzLmNyZWF0ZUpvdXJuZXkoX3RoaXMuY2xpcCwgMCwge1xuICAgICAgICAgICAgYmVmb3JlOiBcInBhdXNlXCIsXG4gICAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5jcmVhdGVKb3VybmV5KF90aGlzLmNsaXAsIF90aGlzLnNldHRpbmdzLmxvb3BFbmRNaWxsaXNlY29uZCAtIDEsIHtcbiAgICAgICAgICAgIGJlZm9yZTogXCJwYXVzZVwiLFxuICAgICAgICAgICAgYWZ0ZXI6IFwicGxheVwiXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"./node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener,\n    elid = _require.elid;\n\nvar svg = __webpack_require__(/*! ../html/svg */ \"./node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\");\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  var volumeDrag = false;\n\n  _this.elements.volumeBtn.onclick = function () {\n    if (_this.settings.volumeMute) {\n      _this.elements.volumeBarActive.style.width = _this.settings.previousVolume * 100 + \"%\";\n\n      _this.clip.setVolume(_this.settings.previousVolume);\n\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else {\n      _this.settings.volumeMute = true;\n      _this.elements.volumeBarActive.style.width = \"0%\";\n\n      _this.clip.setVolume(0);\n\n      var _SVG = document.createElement(\"span\");\n\n      _SVG.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG);\n    }\n  };\n\n  var volumeOpen = false;\n\n  _this.elements.volumeBtn.onmouseover = function () {\n    volumeOpen = true;\n\n    _this.elements.volumeCursor.classList.add(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.add(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  elid(\"\".concat(_this.name, \"-left-controls\")).onmouseout = function () {\n    if (!volumeOpen || volumeDrag) {\n      return;\n    }\n\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-left-controls\")), e) || e === elid(\"\".concat(_this.name, \"-left-controls\"))) {\n      return;\n    }\n\n    volumeOpen = false;\n\n    _this.elements.volumeCursor.classList.remove(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.remove(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  _this.listeners.onCursorMoveVolumeBar = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.volumeBarHelper.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.volumeBarHelper.offsetWidth) {\n      positionX = _this.elements.volumeBarHelper.offsetWidth;\n    }\n\n    _this.settings.volume = Number((positionX / _this.elements.volumeBarHelper.offsetWidth).toFixed(2));\n    _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n\n    _this.clip.setVolume(_this.settings.volume);\n\n    if (_this.settings.volume > 0) {\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else if (_this.settings.volume === 0) {\n      _this.settings.volumeMute = true;\n\n      var _SVG2 = document.createElement(\"span\");\n\n      _SVG2.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG2);\n    }\n  };\n\n  _this.listeners.onMouseUpVolumeBar = function (e) {\n    volumeDrag = false; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n\n    if (_this.settings.volume > 0) {\n      _this.settings.previousVolume = _this.settings.volume;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.listeners.onMouseDownVolumeBar = function (e) {\n    volumeDrag = true; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n\n    _this.listeners.onCursorMoveVolumeBar(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.elements.volumeBarHelper.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeCursor.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeBarHelper.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n\n  _this.elements.volumeCursor.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ExtendableClip = __webpack_require__(/*! ../Clip/ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar AudioContextHandler = __webpack_require__(/*! ./AudioContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js\");\n\nvar AudioNode = __webpack_require__(/*! ./helpers/AudioNode */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioClip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(AudioClip, _ExtendableClip);\n\n  function AudioClip(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, AudioClip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioClip).call(this, attrs, props));\n    _this.audioNode = new AudioNode();\n\n    _this.audioNode.connect(helper.getAudioContext().destination);\n\n    var contextHanlder = new AudioContextHandler(_this.props.audioSources, _this.audioNode);\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: true\n    });\n    _this.audioClip = true;\n    return _this;\n  }\n\n  _createClass(AudioClip, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, ms, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      _get(_getPrototypeOf(AudioClip.prototype), \"onProgress\", this).call(this, fraction, ms, this.id, forceReset);\n    }\n  }, {\n    key: \"_onGetContextOnce\",\n    value: function _onGetContextOnce(parentClipContext) {\n      /*\n      context.master {gain, pan, highpass, lowpass}\n      */\n      // as highpass is the first node of master in row\n      this.audioNode.disconnect();\n      this.parentClipContext = parentClipContext;\n      this.audioNode.connect(parentClipContext.masterNode.input);\n    }\n  }, {\n    key: \"lastWish\",\n    value: function lastWish() {\n      this.audioNode.output.disconnect();\n      this.audioNode.output.connect(helper.getAudioContext().destination);\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(vol) {\n      this.audioNode.output.gain.value = vol;\n    }\n  }]);\n\n  return AudioClip;\n}(ExtendableClip);\n\nmodule.exports = AudioClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _base64ToArrayBuffer(base64) {\n  var binary_string = window.atob(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n\n  return bytes.buffer;\n}\n\nvar datamcidRegex = /\\[data(-mcid=\"+\\w+\")+\\]/g;\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioNode = __webpack_require__(/*! ./helpers/AudioNode */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\");\n\nvar PubSub =\n/*#__PURE__*/\nfunction () {\n  function PubSub() {\n    _classCallCheck(this, PubSub);\n\n    this.subscribers = [];\n  }\n\n  _createClass(PubSub, [{\n    key: \"sub\",\n    value: function sub(id, method) {\n      this.subscribers.push(method);\n    }\n  }, {\n    key: \"pub\",\n    value: function pub(argument) {\n      for (var i = 0; i < this.subscribers.length; i++) {\n        this.subscribers[i](argument);\n      }\n    }\n  }]);\n\n  return PubSub;\n}();\n/**\n * Specs:\n * AudioContext Handler keeps all the audio sources.\n * The audio sources are passed in the following format:\n * - src (the source of the sound)\n * - base64 (boolean, defaults to false. If the sound is base64 it's been treated\n *      in a different way)\n * - id (must be unique)\n * - classes (an array of belonging classes)\n *\n * The SoundContextHanlder creates a media element of the following format:\n * media: {\n *  src\n *  id\n *  classes\n *  base64\n *  buffer\n *  nodes: {\n *      stereo\n *      highpass\n *      lowpass\n *      gain\n *      audioNode\n *  }\n * }\n *\n * Finally the SoundContextHandler has its own nodes (the master) which look like this:\n * master: {\n *      stereo\n *      highpass\n *      lowpass\n *      gain\n * }\n **/\n\n\nvar AudioContextHandler =\n/*#__PURE__*/\nfunction () {\n  function AudioContextHandler() {\n    var _this = this;\n\n    var audioSources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var masterNode = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, AudioContextHandler);\n\n    // variables to be used for checking context rediness\n    this.totalSources = audioSources.length; // initialisation of the final audio resources colleciton\n\n    this.audioSources = {};\n    this.elementsByMCID = {}; // iterate on audioSource to create the audioSources collection\n\n    var _loop = function _loop(i) {\n      var audioSource = audioSources[i];\n      var audioResource = {\n        mcid: audioSource.mcid || helper.getAnId(),\n        id: audioSource.id,\n        src: audioSource.src,\n        classes: audioSource.classes || [],\n        base64: audioSource.base64 || false,\n        pubSub: new PubSub(),\n        soundLoaded: false,\n        startValues: audioSource.startValues || {}\n      };\n      _this.audioSources[audioResource.id] = audioResource;\n      _this.elementsByMCID[audioResource.mcid] = audioResource;\n\n      if (audioSource.base64 === true) {\n        helper.getAudioContext().decodeAudioData(_base64ToArrayBuffer(audioSource.src), function (buffer) {\n          _this._setBuffer(audioResource, buffer, masterNode);\n        });\n      } else {\n        var request = new XMLHttpRequest();\n        request.open('GET', audioResource.src, true);\n        request.responseType = 'arraybuffer'; // Decode asynchronously\n\n        _this.soundLoaded = false;\n\n        request.onload = function () {\n          helper.getAudioContext().decodeAudioData(request.response, function (buffer) {\n            _this._setBuffer(audioResource, buffer, masterNode);\n          }, _this.onError);\n        };\n\n        request.send();\n      }\n    };\n\n    for (var i = 0; i < audioSources.length; i++) {\n      _loop(i);\n    }\n\n    this.context = {\n      document: document,\n      window: window,\n      rootElement: document.body,\n      unmount: function unmount() {},\n      masterNode: masterNode,\n      audioContext: helper.getAudioContext(),\n      getElements: this.getElements.bind(this),\n      getMCID: this.getMCID.bind(this),\n      setMCID: this.setMCID.bind(this),\n      getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n      getElementByMCID: this.getElementByMCID.bind(this)\n    };\n  }\n\n  _createClass(AudioContextHandler, [{\n    key: \"_setBuffer\",\n    value: function _setBuffer(audioResource, buffer, masterNode) {\n      audioResource.soundLoaded = true;\n      audioResource.buffer = buffer;\n      audioResource.effectsAudioNode = new AudioNode();\n      audioResource.effectsAudioNode.connect(masterNode.input);\n      audioResource.pubSub.pub();\n    }\n  }, {\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      if (selector.charAt(0) === \"~\") {\n        selector = selector.substr(1);\n\n        if (selector.charAt(0) === \"#\") {\n          if (Object.prototype.hasOwnProperty.call(this.audioSources, selector.substr(1))) {\n            return [this.audioSources[selector.substr(1)]];\n          } else {\n            return [];\n          }\n        } else if (selector.charAt(0) === \".\") {\n          var className = selector.substr(1);\n          var toReturn = [];\n\n          for (var source in this.audioSources) {\n            if (source.classes.indexOf(className) >= 0) {\n              toReturn.push(source);\n            }\n          }\n\n          return toReturn;\n        }\n      } else if (datamcidRegex.exec(selector)) {\n        var mcid = selector.split('\"')[1];\n        return this.elementsByMCID[mcid];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      return element.mcid;\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.mcid = mcid;\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      return \"[data-mcid=\\\"\".concat(mcid, \"\\\"]\");\n    }\n  }]);\n\n  return AudioContextHandler;\n}();\n\nmodule.exports = AudioContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MonoIncident = __webpack_require__(/*! ../../BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n/**\n * Effect class takes on constructor:\n * attrs:\n *  - animatedAttrs: valid animated attributes are \"gain\", \"pan\"\n *  -\n **/\n\n\nvar Effect =\n/*#__PURE__*/\nfunction (_MonoIncident) {\n  _inherits(Effect, _MonoIncident);\n\n  function Effect() {\n    _classCallCheck(this, Effect);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Effect).apply(this, arguments));\n  }\n\n  _createClass(Effect, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, ms) {\n      var _this = this;\n\n      if (this.element.soundLoaded === false) {\n        this.setBlock('loading sound');\n        this.element.pubSub.sub(this.id, function () {\n          _this.unblock();\n        });\n        return false;\n      }\n\n      if (this.attributeKey === \"gain\") {\n        var gain = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);\n\n        this.element.effectsAudioNode.gainNode.gain.value = gain;\n      } else if (this.attributeKey === \"pan\") {\n        var pan = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);\n\n        this.element.effectsAudioNode.pannerNode.pan.value = pan;\n      }\n    }\n  }, {\n    key: \"getScratchValue\",\n    value: function getScratchValue() {\n      if (this.attributeKey === \"pan\") {\n        if (this.element.startValues.hasOwnProperty('pan')) {\n          return this.element.startValues.pan;\n        } else {\n          return 0;\n        }\n      } else if (this.attributeKey === \"gain\") {\n        if (this.element.startValues.hasOwnProperty('gain')) {\n          return this.element.startValues.gain;\n        } else {\n          return 1;\n        }\n      }\n    }\n  }]);\n\n  return Effect;\n}(MonoIncident);\n\nmodule.exports = Effect;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0luY2lkZW50cy9FZmZlY3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0luY2lkZW50cy9FZmZlY3QuanM/YTBkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBNb25vSW5jaWRlbnQgPSByZXF1aXJlKCcuLi8uLi9CYXNlQ2xhc3Nlcy9Nb25vSW5jaWRlbnQnKTtcbi8qKlxuICogRWZmZWN0IGNsYXNzIHRha2VzIG9uIGNvbnN0cnVjdG9yOlxuICogYXR0cnM6XG4gKiAgLSBhbmltYXRlZEF0dHJzOiB2YWxpZCBhbmltYXRlZCBhdHRyaWJ1dGVzIGFyZSBcImdhaW5cIiwgXCJwYW5cIlxuICogIC1cbiAqKi9cblxuXG52YXIgRWZmZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTW9ub0luY2lkZW50KSB7XG4gIF9pbmhlcml0cyhFZmZlY3QsIF9Nb25vSW5jaWRlbnQpO1xuXG4gIGZ1bmN0aW9uIEVmZmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWZmZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRWZmZWN0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFZmZlY3QsIFt7XG4gICAga2V5OiBcIm9uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyhmcmFjdGlvbiwgbXMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuc291bmRMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuc2V0QmxvY2soJ2xvYWRpbmcgc291bmQnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnB1YlN1Yi5zdWIodGhpcy5pZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnVuYmxvY2soKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlS2V5ID09PSBcImdhaW5cIikge1xuICAgICAgICB2YXIgZ2FpbiA9ICh0aGlzLnRhcmdldFZhbHVlIC0gdGhpcy5nZXRJbml0aWFsVmFsdWUoKSkgKiBmcmFjdGlvbiArIHRoaXMuZ2V0SW5pdGlhbFZhbHVlKCk7IC8vIGNvbnNvbGUubG9nKHRoaXMucHJvcHMubm9kZXMuc3RlcmVvUGFuLnBhbi52YWx1ZSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmVmZmVjdHNBdWRpb05vZGUuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IGdhaW47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cmlidXRlS2V5ID09PSBcInBhblwiKSB7XG4gICAgICAgIHZhciBwYW4gPSAodGhpcy50YXJnZXRWYWx1ZSAtIHRoaXMuZ2V0SW5pdGlhbFZhbHVlKCkpICogZnJhY3Rpb24gKyB0aGlzLmdldEluaXRpYWxWYWx1ZSgpOyAvLyBjb25zb2xlLmxvZyh0aGlzLnByb3BzLm5vZGVzLnN0ZXJlb1Bhbi5wYW4udmFsdWUpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5lZmZlY3RzQXVkaW9Ob2RlLnBhbm5lck5vZGUucGFuLnZhbHVlID0gcGFuO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTY3JhdGNoVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2NyYXRjaFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlS2V5ID09PSBcInBhblwiKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuc3RhcnRWYWx1ZXMuaGFzT3duUHJvcGVydHkoJ3BhbicpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdGFydFZhbHVlcy5wYW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hdHRyaWJ1dGVLZXkgPT09IFwiZ2FpblwiKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuc3RhcnRWYWx1ZXMuaGFzT3duUHJvcGVydHkoJ2dhaW4nKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3RhcnRWYWx1ZXMuZ2FpbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFZmZlY3Q7XG59KE1vbm9JbmNpZGVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWZmZWN0OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MediaPlayIncident = __webpack_require__(/*! ../../BaseClasses/MediaPlayIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * expects on its props:\n * - selector\n * - duration\n * - startFrom (optional)\n **/\n\nvar AudioPlayback =\n/*#__PURE__*/\nfunction (_MediaPlayIncident) {\n  _inherits(AudioPlayback, _MediaPlayIncident);\n\n  function AudioPlayback() {\n    _classCallCheck(this, AudioPlayback);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AudioPlayback).apply(this, arguments));\n  }\n\n  _createClass(AudioPlayback, [{\n    key: \"play\",\n    value: function play(millisecond) {\n      var _this = this;\n\n      if (this.element.soundLoaded === false) {\n        this.setBlock('loading sound');\n        this.element.pubSub.sub(this.id, function () {\n          _this.unblock();\n        });\n        return false;\n      }\n\n      var startFrom = 0;\n\n      if (Object.prototype.hasOwnProperty.call(this.props, 'startFrom')) {\n        startFrom = this.props.startFrom;\n      }\n\n      this.audioNode = helper.getAudioContext().createBufferSource();\n      this.audioNode.buffer = this.element.buffer;\n      this.audioNode.connect(this.element.effectsAudioNode.input);\n      this.audioNode.start(0, (millisecond + startFrom) / 1000);\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.audioNode.stop();\n    }\n  }]);\n\n  return AudioPlayback;\n}(MediaPlayIncident);\n\nmodule.exports = AudioPlayback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0luY2lkZW50cy9QbGF5YmFjay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQXVkaW8vSW5jaWRlbnRzL1BsYXliYWNrLmpzPzk5NzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgTWVkaWFQbGF5SW5jaWRlbnQgPSByZXF1aXJlKCcuLi8uLi9CYXNlQ2xhc3Nlcy9NZWRpYVBsYXlJbmNpZGVudCcpO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbi8qKlxuICogZXhwZWN0cyBvbiBpdHMgcHJvcHM6XG4gKiAtIHNlbGVjdG9yXG4gKiAtIGR1cmF0aW9uXG4gKiAtIHN0YXJ0RnJvbSAob3B0aW9uYWwpXG4gKiovXG5cbnZhciBBdWRpb1BsYXliYWNrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTWVkaWFQbGF5SW5jaWRlbnQpIHtcbiAgX2luaGVyaXRzKEF1ZGlvUGxheWJhY2ssIF9NZWRpYVBsYXlJbmNpZGVudCk7XG5cbiAgZnVuY3Rpb24gQXVkaW9QbGF5YmFjaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXVkaW9QbGF5YmFjayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEF1ZGlvUGxheWJhY2spLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEF1ZGlvUGxheWJhY2ssIFt7XG4gICAga2V5OiBcInBsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShtaWxsaXNlY29uZCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5zb3VuZExvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zZXRCbG9jaygnbG9hZGluZyBzb3VuZCcpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucHViU3ViLnN1Yih0aGlzLmlkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMudW5ibG9jaygpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRGcm9tID0gMDtcblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnByb3BzLCAnc3RhcnRGcm9tJykpIHtcbiAgICAgICAgc3RhcnRGcm9tID0gdGhpcy5wcm9wcy5zdGFydEZyb207XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXVkaW9Ob2RlID0gaGVscGVyLmdldEF1ZGlvQ29udGV4dCgpLmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgdGhpcy5hdWRpb05vZGUuYnVmZmVyID0gdGhpcy5lbGVtZW50LmJ1ZmZlcjtcbiAgICAgIHRoaXMuYXVkaW9Ob2RlLmNvbm5lY3QodGhpcy5lbGVtZW50LmVmZmVjdHNBdWRpb05vZGUuaW5wdXQpO1xuICAgICAgdGhpcy5hdWRpb05vZGUuc3RhcnQoMCwgKG1pbGxpc2Vjb25kICsgc3RhcnRGcm9tKSAvIDEwMDApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuYXVkaW9Ob2RlLnN0b3AoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXVkaW9QbGF5YmFjaztcbn0oTWVkaWFQbGF5SW5jaWRlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvUGxheWJhY2s7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioNode =\n/*#__PURE__*/\nfunction () {\n  function AudioNode() {\n    _classCallCheck(this, AudioNode);\n\n    // audio context initialisation\n    var audioContext = helper.getAudioContext();\n    this.output = audioContext.createGain();\n    this.gainNode = audioContext.createGain();\n    this.pannerNode = audioContext.createStereoPanner(); // this.highpassNode = audioContext.createBiquadFilter();\n    // this.lowpassNode = audioContext.createBiquadFilter();\n    // this.lowpassNode.connect(this.highpassNode);\n    // this.highpassNode.connect(this.pannerNode);\n\n    this.pannerNode.connect(this.gainNode);\n    this.gainNode.connect(this.output);\n    this.input = this.pannerNode;\n  }\n\n  _createClass(AudioNode, [{\n    key: \"connect\",\n    value: function connect(master) {\n      this.output.connect(master);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(master) {\n      this.output.disconnect();\n    }\n  }]);\n\n  return AudioNode;\n}();\n\nmodule.exports = AudioNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL2hlbHBlcnMvQXVkaW9Ob2RlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9BdWRpby9oZWxwZXJzL0F1ZGlvTm9kZS5qcz9hZmRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgQXVkaW9Ob2RlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXVkaW9Ob2RlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdWRpb05vZGUpO1xuXG4gICAgLy8gYXVkaW8gY29udGV4dCBpbml0aWFsaXNhdGlvblxuICAgIHZhciBhdWRpb0NvbnRleHQgPSBoZWxwZXIuZ2V0QXVkaW9Db250ZXh0KCk7XG4gICAgdGhpcy5vdXRwdXQgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIHRoaXMuZ2Fpbk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIHRoaXMucGFubmVyTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIoKTsgLy8gdGhpcy5oaWdocGFzc05vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlQmlxdWFkRmlsdGVyKCk7XG4gICAgLy8gdGhpcy5sb3dwYXNzTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcbiAgICAvLyB0aGlzLmxvd3Bhc3NOb2RlLmNvbm5lY3QodGhpcy5oaWdocGFzc05vZGUpO1xuICAgIC8vIHRoaXMuaGlnaHBhc3NOb2RlLmNvbm5lY3QodGhpcy5wYW5uZXJOb2RlKTtcblxuICAgIHRoaXMucGFubmVyTm9kZS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLm91dHB1dCk7XG4gICAgdGhpcy5pbnB1dCA9IHRoaXMucGFubmVyTm9kZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdWRpb05vZGUsIFt7XG4gICAga2V5OiBcImNvbm5lY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdChtYXN0ZXIpIHtcbiAgICAgIHRoaXMub3V0cHV0LmNvbm5lY3QobWFzdGVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KG1hc3Rlcikge1xuICAgICAgdGhpcy5vdXRwdXQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb05vZGU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AudioClip = __webpack_require__(/*! ./AudioClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\");\n\nvar AudioPlayback = __webpack_require__(/*! ./Incidents/Playback */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js\");\n\nvar AudioEffect = __webpack_require__(/*! ./Incidents/Effect */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js\");\n\nmodule.exports = {\n  npm_name: \"@kissmybutton/motorcortex-soundsystem\",\n  incidents: [{\n    exportable: AudioPlayback,\n    name: \"AudioPlayback\"\n  }, {\n    exportable: AudioEffect,\n    name: \"AudioEffect\"\n  }],\n  Clip: AudioClip,\n  audio: \"only\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL21haW4uanM/NmQxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEF1ZGlvQ2xpcCA9IHJlcXVpcmUoJy4vQXVkaW9DbGlwJyk7XG5cbnZhciBBdWRpb1BsYXliYWNrID0gcmVxdWlyZShcIi4vSW5jaWRlbnRzL1BsYXliYWNrXCIpO1xuXG52YXIgQXVkaW9FZmZlY3QgPSByZXF1aXJlKCcuL0luY2lkZW50cy9FZmZlY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5wbV9uYW1lOiBcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtc291bmRzeXN0ZW1cIixcbiAgaW5jaWRlbnRzOiBbe1xuICAgIGV4cG9ydGFibGU6IEF1ZGlvUGxheWJhY2ssXG4gICAgbmFtZTogXCJBdWRpb1BsYXliYWNrXCJcbiAgfSwge1xuICAgIGV4cG9ydGFibGU6IEF1ZGlvRWZmZWN0LFxuICAgIG5hbWU6IFwiQXVkaW9FZmZlY3RcIlxuICB9XSxcbiAgQ2xpcDogQXVkaW9DbGlwLFxuICBhdWRpbzogXCJvbmx5XCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Node = __webpack_require__(/*! ../Tree/Node */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar handleResize = __webpack_require__(/*! ./decorators/handleResize */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js\");\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n\nvar Group = _decorate(null, function (_initialize, _Node) {\n  var Group =\n  /*#__PURE__*/\n  function (_Node2) {\n    _inherits(Group, _Node2);\n\n    function Group(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, Group);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Group).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.mc_plugin_npm_name = 'motor-cortex-js';\n      _this.plugin_channel_class = Channel;\n      _this.hasIncidents = true;\n\n      _this.onGroupInitialise();\n\n      _this.calculatedDuration = 0;\n      return _this;\n    }\n\n    return Group;\n  }(_Node);\n\n  return {\n    F: Group,\n    d: [{\n      kind: \"method\",\n      key: \"onGroupInitialise\",\n      value: function onGroupInitialise() {// called when group gets initialised\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddIncident\",\n      value: function handleAddIncident(target, payload) {\n        if (this.id === target) {\n          var incidentFromDescription = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromDescription */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js\");\n\n          var theIncident = incidentFromDescription(payload.incident, payload.contextData, payload.audio); // in the case that an audio clip tries to process an non-audio incident or\n          // a non-audio incident tries to process an audio incident the result from incidentFromDescription is null\n          // in such a case there should be no candidate return, so this.bypass()\n\n          if (theIncident === null) {\n            return this.bypass();\n          } else {\n            return theIncident;\n          }\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleMoveIncident\",\n      value: function handleMoveIncident(target, payload) {\n        if (this.id === target) {\n          var res = this.getLeafById(payload.incidentId, true);\n\n          if (res === null) {\n            return this.bypass();\n          }\n\n          return res;\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleRemoveIncident\",\n      value: function handleRemoveIncident(target, payload) {\n        if (this.id === target) {\n          var res = this.getLeafById(payload.incidentId, true);\n\n          if (res === null) {\n            return this.bypass();\n          }\n\n          return res;\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      decorators: [handleResize],\n      key: \"handleResize\",\n      value: function handleResize() {}\n    }, {\n      kind: \"method\",\n      key: \"removeChild\",\n      value: function removeChild(id) {\n        this.children[id].leaf.lastWish();\n\n        _get(_getPrototypeOf(Group.prototype), \"removeChild\", this).call(this, id);\n      }\n      /**\n       * Returns an object that has the key of the npm plugin name the Channel of which manages the specific Incident\n       * With the same logic all Incidents that belong to this Group as categorised by plugin / channel on the same object\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {\n        var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        // initially it only puts itself onthe incidentsByPlugin array, exactly as the plain Incidents do\n        var incidentsByPlugin = {};\n        incidentsByPlugin['motor-cortex-js'] = [{\n          millisecond: adjustMillisecond,\n          parentMillisecond: parentMillisecond,\n          incident: this,\n          id: this.id\n        }]; // proceed to gather the contained incidents as well\n\n        for (var childId in this.children) {\n          var child = this.children[childId];\n          var incidentsToAdd = child.leaf.getIncidentsByChannel(adjustMillisecond + child.position, adjustMillisecond);\n\n          for (var key in incidentsToAdd) {\n            if (Object.prototype.hasOwnProperty.call(incidentsByPlugin, key)) {\n              incidentsByPlugin[key] = incidentsByPlugin[key].concat(incidentsToAdd[key]);\n            } else {\n              incidentsByPlugin[key] = incidentsToAdd[key];\n            }\n          }\n        }\n\n        return incidentsByPlugin;\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var childId in this.children) {\n          this.children[childId].leaf.lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n}, Node);\n\nmodule.exports = Group;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar MediaChannel = __webpack_require__(/*! ../Channels/Media/AudioPlaybackChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n/*\ndna:\n- originalId\n- context\n*/\n\n\nvar MediaPlay = _decorate(null, function (_initialize) {\n  var MediaPlay = function MediaPlay() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MediaPlay);\n\n    _initialize(this);\n\n    // super(props);\n    this.attrs = attrs;\n    this.props = props;\n    this.dna = dna;\n    this.context = dna.context;\n    this.mcid = dna.mcid;\n    this.id = props.id || helper.getAnId();\n    this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n    // is set to true so we prevent multiple executions of the onGetContext method\n\n    this.gotContext = false;\n    /*\n    these are the default values that define channeling for the default Incidents. These values get ovewriden through\n    the loadPlugin method of MC with the values found on the main.js file of the plugin\n    */\n\n    this.plugin_channel_class = MediaChannel;\n    this.mc_plugin_npm_name = \"motor-cortex-js-media-playback\";\n\n    if (Object.prototype.hasOwnProperty.call(props, \"plugin_channel_class\")) {\n      this.plugin_channel_class = props.plugin_channel_class;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(props, \"mc_plugin_npm_name\")) {\n      this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n    }\n\n    this.hasIncidents = false;\n    /**\n     * @member {boolean} - if autoGenerated is set to true, it means that this Incident has been auto-generated by its parent on initialisation.\n     * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n     * on specific points on their timeline.\n     */\n\n    this.autoGenerated = false;\n    this.onInitialise(attrs, props);\n  };\n\n  return {\n    F: MediaPlay,\n    d: [{\n      kind: \"get\",\n      key: \"selector\",\n      value: function selector() {\n        return this.props.selector;\n      }\n    }, {\n      kind: \"get\",\n      key: \"element\",\n      value: function element() {\n        return this.context.getElementByMCID(this.mcid);\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        // if the Incident belongs to a fragmented context there absolutely\n        // no reason to run the getContext method of it\n        try {\n          if (this.context.fragment === true) {\n            return;\n          }\n\n          if (!this.gotContext) {\n            this.onGetContext();\n            this.gotContext = true;\n          }\n        } catch (e) {\n          console.log(e);\n          console.log(this.mcid); // console.log(this.context);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {}\n    }, {\n      kind: \"method\",\n      key: \"onInitialise\",\n      value: function onInitialise() {\n        helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {} // eslint-disable-line no-unused-vars\n\n      /**\n       * starts the execution of the media from the specified millisecond\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"play\",\n      value: function play(millisecond) {\n        return true;\n      }\n      /**\n       * stops the execution of the media\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"stop\",\n      value: function stop() {}\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n});\n\nmodule.exports = MediaPlay;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL01lZGlhUGxheUluY2lkZW50LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9NZWRpYVBsYXlJbmNpZGVudC5qcz8xN2E5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVjb3JhdGUoZGVjb3JhdG9ycywgZmFjdG9yeSwgc3VwZXJDbGFzcywgbWl4aW5zKSB7IHZhciBhcGkgPSBfZ2V0RGVjb3JhdG9yc0FwaSgpOyBpZiAobWl4aW5zKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7IGFwaSA9IG1peGluc1tpXShhcGkpOyB9IH0gdmFyIHIgPSBmYWN0b3J5KGZ1bmN0aW9uIGluaXRpYWxpemUoTykgeyBhcGkuaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHMoTywgZGVjb3JhdGVkLmVsZW1lbnRzKTsgfSwgc3VwZXJDbGFzcyk7IHZhciBkZWNvcmF0ZWQgPSBhcGkuZGVjb3JhdGVDbGFzcyhfY29hbGVzY2VDbGFzc0VsZW1lbnRzKHIuZC5tYXAoX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKSksIGRlY29yYXRvcnMpOyBhcGkuaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHMoci5GLCBkZWNvcmF0ZWQuZWxlbWVudHMpOyByZXR1cm4gYXBpLnJ1bkNsYXNzRmluaXNoZXJzKHIuRiwgZGVjb3JhdGVkLmZpbmlzaGVycyk7IH1cblxuZnVuY3Rpb24gX2dldERlY29yYXRvcnNBcGkoKSB7IF9nZXREZWNvcmF0b3JzQXBpID0gZnVuY3Rpb24gX2dldERlY29yYXRvcnNBcGkoKSB7IHJldHVybiBhcGk7IH07IHZhciBhcGkgPSB7IGVsZW1lbnRzRGVmaW5pdGlvbk9yZGVyOiBbW1wibWV0aG9kXCJdLCBbXCJmaWVsZFwiXV0sIGluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzOiBmdW5jdGlvbiBpbml0aWFsaXplSW5zdGFuY2VFbGVtZW50cyhPLCBlbGVtZW50cykgeyBbXCJtZXRob2RcIiwgXCJmaWVsZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChraW5kKSB7IGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgaWYgKGVsZW1lbnQua2luZCA9PT0ga2luZCAmJiBlbGVtZW50LnBsYWNlbWVudCA9PT0gXCJvd25cIikgeyB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChPLCBlbGVtZW50KTsgfSB9LCB0aGlzKTsgfSwgdGhpcyk7IH0sIGluaXRpYWxpemVDbGFzc0VsZW1lbnRzOiBmdW5jdGlvbiBpbml0aWFsaXplQ2xhc3NFbGVtZW50cyhGLCBlbGVtZW50cykgeyB2YXIgcHJvdG8gPSBGLnByb3RvdHlwZTsgW1wibWV0aG9kXCIsIFwiZmllbGRcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2luZCkgeyBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHZhciBwbGFjZW1lbnQgPSBlbGVtZW50LnBsYWNlbWVudDsgaWYgKGVsZW1lbnQua2luZCA9PT0ga2luZCAmJiAocGxhY2VtZW50ID09PSBcInN0YXRpY1wiIHx8IHBsYWNlbWVudCA9PT0gXCJwcm90b3R5cGVcIikpIHsgdmFyIHJlY2VpdmVyID0gcGxhY2VtZW50ID09PSBcInN0YXRpY1wiID8gRiA6IHByb3RvOyB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChyZWNlaXZlciwgZWxlbWVudCk7IH0gfSwgdGhpcyk7IH0sIHRoaXMpOyB9LCBkZWZpbmVDbGFzc0VsZW1lbnQ6IGZ1bmN0aW9uIGRlZmluZUNsYXNzRWxlbWVudChyZWNlaXZlciwgZWxlbWVudCkgeyB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnQuZGVzY3JpcHRvcjsgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJmaWVsZFwiKSB7IHZhciBpbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7IGRlc2NyaXB0b3IgPSB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsIHZhbHVlOiBpbml0aWFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbGl6ZXIuY2FsbChyZWNlaXZlcikgfTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIGVsZW1lbnQua2V5LCBkZXNjcmlwdG9yKTsgfSwgZGVjb3JhdGVDbGFzczogZnVuY3Rpb24gZGVjb3JhdGVDbGFzcyhlbGVtZW50cywgZGVjb3JhdG9ycykgeyB2YXIgbmV3RWxlbWVudHMgPSBbXTsgdmFyIGZpbmlzaGVycyA9IFtdOyB2YXIgcGxhY2VtZW50cyA9IHsgXCJzdGF0aWNcIjogW10sIHByb3RvdHlwZTogW10sIG93bjogW10gfTsgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7IH0sIHRoaXMpOyBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IGlmICghX2hhc0RlY29yYXRvcnMoZWxlbWVudCkpIHJldHVybiBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpOyB2YXIgZWxlbWVudEZpbmlzaGVyc0V4dHJhcyA9IHRoaXMuZGVjb3JhdGVFbGVtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpOyBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMuZWxlbWVudCk7IG5ld0VsZW1lbnRzLnB1c2guYXBwbHkobmV3RWxlbWVudHMsIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMuZXh0cmFzKTsgZmluaXNoZXJzLnB1c2guYXBwbHkoZmluaXNoZXJzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmZpbmlzaGVycyk7IH0sIHRoaXMpOyBpZiAoIWRlY29yYXRvcnMpIHsgcmV0dXJuIHsgZWxlbWVudHM6IG5ld0VsZW1lbnRzLCBmaW5pc2hlcnM6IGZpbmlzaGVycyB9OyB9IHZhciByZXN1bHQgPSB0aGlzLmRlY29yYXRlQ29uc3RydWN0b3IobmV3RWxlbWVudHMsIGRlY29yYXRvcnMpOyBmaW5pc2hlcnMucHVzaC5hcHBseShmaW5pc2hlcnMsIHJlc3VsdC5maW5pc2hlcnMpOyByZXN1bHQuZmluaXNoZXJzID0gZmluaXNoZXJzOyByZXR1cm4gcmVzdWx0OyB9LCBhZGRFbGVtZW50UGxhY2VtZW50OiBmdW5jdGlvbiBhZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMsIHNpbGVudCkgeyB2YXIga2V5cyA9IHBsYWNlbWVudHNbZWxlbWVudC5wbGFjZW1lbnRdOyBpZiAoIXNpbGVudCAmJiBrZXlzLmluZGV4T2YoZWxlbWVudC5rZXkpICE9PSAtMSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRHVwbGljYXRlZCBlbGVtZW50IChcIiArIGVsZW1lbnQua2V5ICsgXCIpXCIpOyB9IGtleXMucHVzaChlbGVtZW50LmtleSk7IH0sIGRlY29yYXRlRWxlbWVudDogZnVuY3Rpb24gZGVjb3JhdGVFbGVtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpIHsgdmFyIGV4dHJhcyA9IFtdOyB2YXIgZmluaXNoZXJzID0gW107IGZvciAodmFyIGRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnMsIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7IHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07IGtleXMuc3BsaWNlKGtleXMuaW5kZXhPZihlbGVtZW50LmtleSksIDEpOyB2YXIgZWxlbWVudE9iamVjdCA9IHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnQpOyB2YXIgZWxlbWVudEZpbmlzaGVyRXh0cmFzID0gdGhpcy50b0VsZW1lbnRGaW5pc2hlckV4dHJhcygoMCwgZGVjb3JhdG9yc1tpXSkoZWxlbWVudE9iamVjdCkgfHwgZWxlbWVudE9iamVjdCk7IGVsZW1lbnQgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZWxlbWVudDsgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpOyBpZiAoZWxlbWVudEZpbmlzaGVyRXh0cmFzLmZpbmlzaGVyKSB7IGZpbmlzaGVycy5wdXNoKGVsZW1lbnRGaW5pc2hlckV4dHJhcy5maW5pc2hlcik7IH0gdmFyIG5ld0V4dHJhcyA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5leHRyYXM7IGlmIChuZXdFeHRyYXMpIHsgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdFeHRyYXMubGVuZ3RoOyBqKyspIHsgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KG5ld0V4dHJhc1tqXSwgcGxhY2VtZW50cyk7IH0gZXh0cmFzLnB1c2guYXBwbHkoZXh0cmFzLCBuZXdFeHRyYXMpOyB9IH0gcmV0dXJuIHsgZWxlbWVudDogZWxlbWVudCwgZmluaXNoZXJzOiBmaW5pc2hlcnMsIGV4dHJhczogZXh0cmFzIH07IH0sIGRlY29yYXRlQ29uc3RydWN0b3I6IGZ1bmN0aW9uIGRlY29yYXRlQ29uc3RydWN0b3IoZWxlbWVudHMsIGRlY29yYXRvcnMpIHsgdmFyIGZpbmlzaGVycyA9IFtdOyBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgeyB2YXIgb2JqID0gdGhpcy5mcm9tQ2xhc3NEZXNjcmlwdG9yKGVsZW1lbnRzKTsgdmFyIGVsZW1lbnRzQW5kRmluaXNoZXIgPSB0aGlzLnRvQ2xhc3NEZXNjcmlwdG9yKCgwLCBkZWNvcmF0b3JzW2ldKShvYmopIHx8IG9iaik7IGlmIChlbGVtZW50c0FuZEZpbmlzaGVyLmZpbmlzaGVyICE9PSB1bmRlZmluZWQpIHsgZmluaXNoZXJzLnB1c2goZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlcik7IH0gaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHMgIT09IHVuZGVmaW5lZCkgeyBlbGVtZW50cyA9IGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHM7IGZvciAodmFyIGogPSAwOyBqIDwgZWxlbWVudHMubGVuZ3RoIC0gMTsgaisrKSB7IGZvciAodmFyIGsgPSBqICsgMTsgayA8IGVsZW1lbnRzLmxlbmd0aDsgaysrKSB7IGlmIChlbGVtZW50c1tqXS5rZXkgPT09IGVsZW1lbnRzW2tdLmtleSAmJiBlbGVtZW50c1tqXS5wbGFjZW1lbnQgPT09IGVsZW1lbnRzW2tdLnBsYWNlbWVudCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRHVwbGljYXRlZCBlbGVtZW50IChcIiArIGVsZW1lbnRzW2pdLmtleSArIFwiKVwiKTsgfSB9IH0gfSB9IHJldHVybiB7IGVsZW1lbnRzOiBlbGVtZW50cywgZmluaXNoZXJzOiBmaW5pc2hlcnMgfTsgfSwgZnJvbUVsZW1lbnREZXNjcmlwdG9yOiBmdW5jdGlvbiBmcm9tRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudCkgeyB2YXIgb2JqID0geyBraW5kOiBlbGVtZW50LmtpbmQsIGtleTogZWxlbWVudC5rZXksIHBsYWNlbWVudDogZWxlbWVudC5wbGFjZW1lbnQsIGRlc2NyaXB0b3I6IGVsZW1lbnQuZGVzY3JpcHRvciB9OyB2YXIgZGVzYyA9IHsgdmFsdWU6IFwiRGVzY3JpcHRvclwiLCBjb25maWd1cmFibGU6IHRydWUgfTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkZXNjKTsgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJmaWVsZFwiKSBvYmouaW5pdGlhbGl6ZXIgPSBlbGVtZW50LmluaXRpYWxpemVyOyByZXR1cm4gb2JqOyB9LCB0b0VsZW1lbnREZXNjcmlwdG9yczogZnVuY3Rpb24gdG9FbGVtZW50RGVzY3JpcHRvcnMoZWxlbWVudE9iamVjdHMpIHsgaWYgKGVsZW1lbnRPYmplY3RzID09PSB1bmRlZmluZWQpIHJldHVybjsgcmV0dXJuIF90b0FycmF5KGVsZW1lbnRPYmplY3RzKS5tYXAoZnVuY3Rpb24gKGVsZW1lbnRPYmplY3QpIHsgdmFyIGVsZW1lbnQgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudE9iamVjdCk7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImZpbmlzaGVyXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJleHRyYXNcIiwgXCJBbiBlbGVtZW50IGRlc2NyaXB0b3JcIik7IHJldHVybiBlbGVtZW50OyB9LCB0aGlzKTsgfSwgdG9FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24gdG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KSB7IHZhciBraW5kID0gU3RyaW5nKGVsZW1lbnRPYmplY3Qua2luZCk7IGlmIChraW5kICE9PSBcIm1ldGhvZFwiICYmIGtpbmQgIT09IFwiZmllbGRcIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbiBlbGVtZW50IGRlc2NyaXB0b3JcXCdzIC5raW5kIHByb3BlcnR5IG11c3QgYmUgZWl0aGVyIFwibWV0aG9kXCIgb3InICsgJyBcImZpZWxkXCIsIGJ1dCBhIGRlY29yYXRvciBjcmVhdGVkIGFuIGVsZW1lbnQgZGVzY3JpcHRvciB3aXRoJyArICcgLmtpbmQgXCInICsga2luZCArICdcIicpOyB9IHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShlbGVtZW50T2JqZWN0LmtleSk7IHZhciBwbGFjZW1lbnQgPSBTdHJpbmcoZWxlbWVudE9iamVjdC5wbGFjZW1lbnQpOyBpZiAocGxhY2VtZW50ICE9PSBcInN0YXRpY1wiICYmIHBsYWNlbWVudCAhPT0gXCJwcm90b3R5cGVcIiAmJiBwbGFjZW1lbnQgIT09IFwib3duXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAucGxhY2VtZW50IHByb3BlcnR5IG11c3QgYmUgb25lIG9mIFwic3RhdGljXCIsJyArICcgXCJwcm90b3R5cGVcIiBvciBcIm93blwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3InICsgJyB3aXRoIC5wbGFjZW1lbnQgXCInICsgcGxhY2VtZW50ICsgJ1wiJyk7IH0gdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50T2JqZWN0LmRlc2NyaXB0b3I7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImVsZW1lbnRzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpOyB2YXIgZWxlbWVudCA9IHsga2luZDoga2luZCwga2V5OiBrZXksIHBsYWNlbWVudDogcGxhY2VtZW50LCBkZXNjcmlwdG9yOiBPYmplY3QuYXNzaWduKHt9LCBkZXNjcmlwdG9yKSB9OyBpZiAoa2luZCAhPT0gXCJmaWVsZFwiKSB7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImluaXRpYWxpemVyXCIsIFwiQSBtZXRob2QgZGVzY3JpcHRvclwiKTsgfSBlbHNlIHsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwiZ2V0XCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJzZXRcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcInZhbHVlXCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpOyBlbGVtZW50LmluaXRpYWxpemVyID0gZWxlbWVudE9iamVjdC5pbml0aWFsaXplcjsgfSByZXR1cm4gZWxlbWVudDsgfSwgdG9FbGVtZW50RmluaXNoZXJFeHRyYXM6IGZ1bmN0aW9uIHRvRWxlbWVudEZpbmlzaGVyRXh0cmFzKGVsZW1lbnRPYmplY3QpIHsgdmFyIGVsZW1lbnQgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudE9iamVjdCk7IHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJmaW5pc2hlclwiKTsgdmFyIGV4dHJhcyA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcnMoZWxlbWVudE9iamVjdC5leHRyYXMpOyByZXR1cm4geyBlbGVtZW50OiBlbGVtZW50LCBmaW5pc2hlcjogZmluaXNoZXIsIGV4dHJhczogZXh0cmFzIH07IH0sIGZyb21DbGFzc0Rlc2NyaXB0b3I6IGZ1bmN0aW9uIGZyb21DbGFzc0Rlc2NyaXB0b3IoZWxlbWVudHMpIHsgdmFyIG9iaiA9IHsga2luZDogXCJjbGFzc1wiLCBlbGVtZW50czogZWxlbWVudHMubWFwKHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yLCB0aGlzKSB9OyB2YXIgZGVzYyA9IHsgdmFsdWU6IFwiRGVzY3JpcHRvclwiLCBjb25maWd1cmFibGU6IHRydWUgfTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkZXNjKTsgcmV0dXJuIG9iajsgfSwgdG9DbGFzc0Rlc2NyaXB0b3I6IGZ1bmN0aW9uIHRvQ2xhc3NEZXNjcmlwdG9yKG9iaikgeyB2YXIga2luZCA9IFN0cmluZyhvYmoua2luZCk7IGlmIChraW5kICE9PSBcImNsYXNzXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBjbGFzcyBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIFwiY2xhc3NcIiwgYnV0IGEgZGVjb3JhdG9yJyArICcgY3JlYXRlZCBhIGNsYXNzIGRlc2NyaXB0b3Igd2l0aCAua2luZCBcIicgKyBraW5kICsgJ1wiJyk7IH0gdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJrZXlcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwicGxhY2VtZW50XCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImRlc2NyaXB0b3JcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiZXh0cmFzXCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgXCJmaW5pc2hlclwiKTsgdmFyIGVsZW1lbnRzID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9ycyhvYmouZWxlbWVudHMpOyByZXR1cm4geyBlbGVtZW50czogZWxlbWVudHMsIGZpbmlzaGVyOiBmaW5pc2hlciB9OyB9LCBydW5DbGFzc0ZpbmlzaGVyczogZnVuY3Rpb24gcnVuQ2xhc3NGaW5pc2hlcnMoY29uc3RydWN0b3IsIGZpbmlzaGVycykgeyBmb3IgKHZhciBpID0gMDsgaSA8IGZpbmlzaGVycy5sZW5ndGg7IGkrKykgeyB2YXIgbmV3Q29uc3RydWN0b3IgPSAoMCwgZmluaXNoZXJzW2ldKShjb25zdHJ1Y3Rvcik7IGlmIChuZXdDb25zdHJ1Y3RvciAhPT0gdW5kZWZpbmVkKSB7IGlmICh0eXBlb2YgbmV3Q29uc3RydWN0b3IgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmluaXNoZXJzIG11c3QgcmV0dXJuIGEgY29uc3RydWN0b3IuXCIpOyB9IGNvbnN0cnVjdG9yID0gbmV3Q29uc3RydWN0b3I7IH0gfSByZXR1cm4gY29uc3RydWN0b3I7IH0sIGRpc2FsbG93UHJvcGVydHk6IGZ1bmN0aW9uIGRpc2FsbG93UHJvcGVydHkob2JqLCBuYW1lLCBvYmplY3RUeXBlKSB7IGlmIChvYmpbbmFtZV0gIT09IHVuZGVmaW5lZCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKG9iamVjdFR5cGUgKyBcIiBjYW4ndCBoYXZlIGEgLlwiICsgbmFtZSArIFwiIHByb3BlcnR5LlwiKTsgfSB9IH07IHJldHVybiBhcGk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKGRlZikgeyB2YXIga2V5ID0gX3RvUHJvcGVydHlLZXkoZGVmLmtleSk7IHZhciBkZXNjcmlwdG9yOyBpZiAoZGVmLmtpbmQgPT09IFwibWV0aG9kXCIpIHsgZGVzY3JpcHRvciA9IHsgdmFsdWU6IGRlZi52YWx1ZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UgfTsgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJnZXRcIikgeyBkZXNjcmlwdG9yID0geyBnZXQ6IGRlZi52YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSB9OyB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBcInNldFwiKSB7IGRlc2NyaXB0b3IgPSB7IHNldDogZGVmLnZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlIH07IH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwiZmllbGRcIikgeyBkZXNjcmlwdG9yID0geyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH07IH0gdmFyIGVsZW1lbnQgPSB7IGtpbmQ6IGRlZi5raW5kID09PSBcImZpZWxkXCIgPyBcImZpZWxkXCIgOiBcIm1ldGhvZFwiLCBrZXk6IGtleSwgcGxhY2VtZW50OiBkZWZbXCJzdGF0aWNcIl0gPyBcInN0YXRpY1wiIDogZGVmLmtpbmQgPT09IFwiZmllbGRcIiA/IFwib3duXCIgOiBcInByb3RvdHlwZVwiLCBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yIH07IGlmIChkZWYuZGVjb3JhdG9ycykgZWxlbWVudC5kZWNvcmF0b3JzID0gZGVmLmRlY29yYXRvcnM7IGlmIChkZWYua2luZCA9PT0gXCJmaWVsZFwiKSBlbGVtZW50LmluaXRpYWxpemVyID0gZGVmLnZhbHVlOyByZXR1cm4gZWxlbWVudDsgfVxuXG5mdW5jdGlvbiBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpIHsgaWYgKGVsZW1lbnQuZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkgeyBvdGhlci5kZXNjcmlwdG9yLmdldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5nZXQ7IH0gZWxzZSB7IG90aGVyLmRlc2NyaXB0b3Iuc2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLnNldDsgfSB9XG5cbmZ1bmN0aW9uIF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoZWxlbWVudHMpIHsgdmFyIG5ld0VsZW1lbnRzID0gW107IHZhciBpc1NhbWVFbGVtZW50ID0gZnVuY3Rpb24gaXNTYW1lRWxlbWVudChvdGhlcikgeyByZXR1cm4gb3RoZXIua2luZCA9PT0gXCJtZXRob2RcIiAmJiBvdGhlci5rZXkgPT09IGVsZW1lbnQua2V5ICYmIG90aGVyLnBsYWNlbWVudCA9PT0gZWxlbWVudC5wbGFjZW1lbnQ7IH07IGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTsgdmFyIG90aGVyOyBpZiAoZWxlbWVudC5raW5kID09PSBcIm1ldGhvZFwiICYmIChvdGhlciA9IG5ld0VsZW1lbnRzLmZpbmQoaXNTYW1lRWxlbWVudCkpKSB7IGlmIChfaXNEYXRhRGVzY3JpcHRvcihlbGVtZW50LmRlc2NyaXB0b3IpIHx8IF9pc0RhdGFEZXNjcmlwdG9yKG90aGVyLmRlc2NyaXB0b3IpKSB7IGlmIChfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSB8fCBfaGFzRGVjb3JhdG9ycyhvdGhlcikpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRHVwbGljYXRlZCBtZXRob2RzIChcIiArIGVsZW1lbnQua2V5ICsgXCIpIGNhbid0IGJlIGRlY29yYXRlZC5cIik7IH0gb3RoZXIuZGVzY3JpcHRvciA9IGVsZW1lbnQuZGVzY3JpcHRvcjsgfSBlbHNlIHsgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSB7IGlmIChfaGFzRGVjb3JhdG9ycyhvdGhlcikpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRGVjb3JhdG9ycyBjYW4ndCBiZSBwbGFjZWQgb24gZGlmZmVyZW50IGFjY2Vzc29ycyB3aXRoIGZvciBcIiArIFwidGhlIHNhbWUgcHJvcGVydHkgKFwiICsgZWxlbWVudC5rZXkgKyBcIikuXCIpOyB9IG90aGVyLmRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnM7IH0gX2NvYWxlc2NlR2V0dGVyU2V0dGVyKGVsZW1lbnQsIG90aGVyKTsgfSB9IGVsc2UgeyBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpOyB9IH0gcmV0dXJuIG5ld0VsZW1lbnRzOyB9XG5cbmZ1bmN0aW9uIF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuZGVjb3JhdG9ycyAmJiBlbGVtZW50LmRlY29yYXRvcnMubGVuZ3RoOyB9XG5cbmZ1bmN0aW9uIF9pc0RhdGFEZXNjcmlwdG9yKGRlc2MpIHsgcmV0dXJuIGRlc2MgIT09IHVuZGVmaW5lZCAmJiAhKGRlc2MudmFsdWUgPT09IHVuZGVmaW5lZCAmJiBkZXNjLndyaXRhYmxlID09PSB1bmRlZmluZWQpOyB9XG5cbmZ1bmN0aW9uIF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBuYW1lKSB7IHZhciB2YWx1ZSA9IG9ialtuYW1lXTsgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkICdcIiArIG5hbWUgKyBcIicgdG8gYmUgYSBmdW5jdGlvblwiKTsgfSByZXR1cm4gdmFsdWU7IH1cblxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cblxuZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIE1lZGlhQ2hhbm5lbCA9IHJlcXVpcmUoJy4uL0NoYW5uZWxzL01lZGlhL0F1ZGlvUGxheWJhY2tDaGFubmVsJyk7XG5cbnZhciBnZXRJbmNpZGVudHNCeUNoYW5uZWwgPSByZXF1aXJlKCcuLi9fZGVjb3JhdG9ycy9nZXRJbmNpZGVudHNCeUNoYW5uZWwnKTtcblxudmFyIHNldEJsb2NrID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2Jsb2NrJyk7XG5cbnZhciB1bmJsb2NrID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL3VuYmxvY2snKTtcbi8qXG5kbmE6XG4tIG9yaWdpbmFsSWRcbi0gY29udGV4dFxuKi9cblxuXG52YXIgTWVkaWFQbGF5ID0gX2RlY29yYXRlKG51bGwsIGZ1bmN0aW9uIChfaW5pdGlhbGl6ZSkge1xuICB2YXIgTWVkaWFQbGF5ID0gZnVuY3Rpb24gTWVkaWFQbGF5KCkge1xuICAgIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgZG5hID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFQbGF5KTtcblxuICAgIF9pbml0aWFsaXplKHRoaXMpO1xuXG4gICAgLy8gc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuYXR0cnMgPSBhdHRycztcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgdGhpcy5kbmEgPSBkbmE7XG4gICAgdGhpcy5jb250ZXh0ID0gZG5hLmNvbnRleHQ7XG4gICAgdGhpcy5tY2lkID0gZG5hLm1jaWQ7XG4gICAgdGhpcy5pZCA9IHByb3BzLmlkIHx8IGhlbHBlci5nZXRBbklkKCk7XG4gICAgdGhpcy5tb2RlbElkID0gcHJvcHMubW9kZWxJZDsgLy8gdGhpcyBwYXJhbWV0ZXIgaXMgaW5pdGlhbGlzZWQgdG8gZmFsc2UuIE9uY2UgdGhlIG9uR2V0Q29udGV4dCBtZXRob2QgZ2V0cyBpbnZva2VkIHRoaXMgcGFyYW1ldGVyXG4gICAgLy8gaXMgc2V0IHRvIHRydWUgc28gd2UgcHJldmVudCBtdWx0aXBsZSBleGVjdXRpb25zIG9mIHRoZSBvbkdldENvbnRleHQgbWV0aG9kXG5cbiAgICB0aGlzLmdvdENvbnRleHQgPSBmYWxzZTtcbiAgICAvKlxuICAgIHRoZXNlIGFyZSB0aGUgZGVmYXVsdCB2YWx1ZXMgdGhhdCBkZWZpbmUgY2hhbm5lbGluZyBmb3IgdGhlIGRlZmF1bHQgSW5jaWRlbnRzLiBUaGVzZSB2YWx1ZXMgZ2V0IG92ZXdyaWRlbiB0aHJvdWdoXG4gICAgdGhlIGxvYWRQbHVnaW4gbWV0aG9kIG9mIE1DIHdpdGggdGhlIHZhbHVlcyBmb3VuZCBvbiB0aGUgbWFpbi5qcyBmaWxlIG9mIHRoZSBwbHVnaW5cbiAgICAqL1xuXG4gICAgdGhpcy5wbHVnaW5fY2hhbm5lbF9jbGFzcyA9IE1lZGlhQ2hhbm5lbDtcbiAgICB0aGlzLm1jX3BsdWdpbl9ucG1fbmFtZSA9IFwibW90b3ItY29ydGV4LWpzLW1lZGlhLXBsYXliYWNrXCI7XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBcInBsdWdpbl9jaGFubmVsX2NsYXNzXCIpKSB7XG4gICAgICB0aGlzLnBsdWdpbl9jaGFubmVsX2NsYXNzID0gcHJvcHMucGx1Z2luX2NoYW5uZWxfY2xhc3M7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJtY19wbHVnaW5fbnBtX25hbWVcIikpIHtcbiAgICAgIHRoaXMubWNfcGx1Z2luX25wbV9uYW1lID0gcHJvcHMubWNfcGx1Z2luX25wbV9uYW1lO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSW5jaWRlbnRzID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn0gLSBpZiBhdXRvR2VuZXJhdGVkIGlzIHNldCB0byB0cnVlLCBpdCBtZWFucyB0aGF0IHRoaXMgSW5jaWRlbnQgaGFzIGJlZW4gYXV0by1nZW5lcmF0ZWQgYnkgaXRzIHBhcmVudCBvbiBpbml0aWFsaXNhdGlvbi5cbiAgICAgKiBUaGlzIGhhcHBlbnMgd2hlbiBwbHVnaW5zIGV4cG9ydCBJbmNpZGVudHMgdGhhdCBvbiBpbml0aWFsaXNhdGlvbiB0aGV5IGF1dG9tYXRpY2FsbHkgY3JlYXRlIG90aGVyIGluY2lkZW50cyBhbmQgYXV0b21hdGljYWxseSBwdXQgdGhlbVxuICAgICAqIG9uIHNwZWNpZmljIHBvaW50cyBvbiB0aGVpciB0aW1lbGluZS5cbiAgICAgKi9cblxuICAgIHRoaXMuYXV0b0dlbmVyYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMub25Jbml0aWFsaXNlKGF0dHJzLCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBGOiBNZWRpYVBsYXksXG4gICAgZDogW3tcbiAgICAgIGtpbmQ6IFwiZ2V0XCIsXG4gICAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2VsZWN0b3I7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJnZXRcIixcbiAgICAgIGtleTogXCJlbGVtZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRFbGVtZW50QnlNQ0lEKHRoaXMubWNpZCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGRlY29yYXRvcnM6IFtnZXRJbmNpZGVudHNCeUNoYW5uZWxdLFxuICAgICAga2V5OiBcImdldEluY2lkZW50c0J5Q2hhbm5lbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluY2lkZW50c0J5Q2hhbm5lbCgpIHt9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJfb25HZXRDb250ZXh0T25jZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkdldENvbnRleHRPbmNlKCkge1xuICAgICAgICAvLyBpZiB0aGUgSW5jaWRlbnQgYmVsb25ncyB0byBhIGZyYWdtZW50ZWQgY29udGV4dCB0aGVyZSBhYnNvbHV0ZWx5XG4gICAgICAgIC8vIG5vIHJlYXNvbiB0byBydW4gdGhlIGdldENvbnRleHQgbWV0aG9kIG9mIGl0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5mcmFnbWVudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdGhpcy5nb3RDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLm9uR2V0Q29udGV4dCgpO1xuICAgICAgICAgICAgdGhpcy5nb3RDb250ZXh0ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1jaWQpOyAvLyBjb25zb2xlLmxvZyh0aGlzLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJvbkdldENvbnRleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkdldENvbnRleHQoKSB7XG4gICAgICAgIGhlbHBlci5pbmZvKCdPdmVyd3JpdHRlIHRoZSBcIm9uR2V0Q29udGV4dFwiIG1ldGhvZCB3aXRoIHRoZSBjb2RlIHlvdSB3YW50IHRvIGdldCBleGVjdXRlZCcsICdpbmZvJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJsYXN0V2lzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxhc3RXaXNoKCkge31cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAga2V5OiBcIm9uSW5pdGlhbGlzZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uSW5pdGlhbGlzZSgpIHtcbiAgICAgICAgaGVscGVyLmluZm8oJ092ZXJ3cml0dGUgdGhlIFwib25JbmlhbGlzZVwiIG1ldGhvZCB3aXRoIHRoZSBjb2RlIHlvdSB3YW50IHRvIGdldCBleGVjdXRlZCcsICdpbmZvJyk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIE1ldGhvZCBjYWxsZWQgb24gcHJvZ3Jlc3Mgb2YgdGhlIHRpbWVkIGluY2lkZW50LlxuICAgICAgICogQHBhcmFtIHtmbG9hdH0gZnJhY3Rpb24gLSBhIG51bWJlciBmcm9tIDAgdG8gMSByZXByZXNlbnRpbmcgdGhlIGZyYWN0aW9uIG9mIGR1cmF0aW9uIGNvdmVyZWRcbiAgICAgICAqIEBwYXJhbSB7aW50fSBtaWxsaXNlY29uZHMgLSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBwYXNzZWQgZnJvbSBzdGFydCBvZiB0aGUgaW5jaWRlbnRcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJvblByb2dyZXNzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyhmcmFjdGlvbiwgbWlsbGlzZWNvbmRzKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAgIC8qKlxuICAgICAgICogc3RhcnRzIHRoZSBleGVjdXRpb24gb2YgdGhlIG1lZGlhIGZyb20gdGhlIHNwZWNpZmllZCBtaWxsaXNlY29uZFxuICAgICAgICoqL1xuXG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJwbGF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShtaWxsaXNlY29uZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogc3RvcHMgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbWVkaWFcbiAgICAgICAqKi9cblxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7fVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBkZWNvcmF0b3JzOiBbc2V0QmxvY2tdLFxuICAgICAga2V5OiBcInNldEJsb2NrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QmxvY2soKSB7fVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBkZWNvcmF0b3JzOiBbdW5ibG9ja10sXG4gICAgICBrZXk6IFwidW5ibG9ja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmxvY2soKSB7fVxuICAgIH1dXG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYVBsYXk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n/* @handleResize is missing from Incident. The reason is that when the\nExtendableClip asks for the under-resize candidates via the \"checkResize\" pipe\nmessage the message will never be handled by an Incident directly but rather via\nits corresponding ElementSplitter\n*/\n\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n/*\ndna:\n- originalId\n- context\n*/\n\n\nvar MonoIncident = _decorate(null, function (_initialize) {\n  var MonoIncident = function MonoIncident() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MonoIncident);\n\n    _initialize(this);\n\n    // super(props);\n    this.attrs = attrs;\n    this.props = props;\n    this.dna = dna;\n    this.context = dna.context;\n    this.mcid = dna.mcid;\n    this.id = props.id || helper.getAnId();\n    this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n    // is set to true so we prevent multiple executions of the onGetContext method\n\n    this.gotContext = false;\n    /*\n    these are the default values that define channeling for the default Incidents. These values get ovewriden through\n    the loadPlugin method of MC with the values found on the main.js file of the plugin\n    */\n\n    this.plugin_channel_class = Channel;\n    this.mc_plugin_npm_name = \"motor-cortex-js\";\n\n    if (Object.prototype.hasOwnProperty.call(props, \"plugin_channel_class\")) {\n      this.plugin_channel_class = props.plugin_channel_class;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(props, \"mc_plugin_npm_name\")) {\n      this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n    }\n\n    this.hasIncidents = false;\n    /*\n    initialValues is an object holding the autmatically computed initial values of the animatedAttrs\n    (if any). The initialValues are calculated by the AttributesChannel (only Incidents belonging to\n    an AttributesChannel have initialValues).\n    The keys set of this object is identical to the object attrs.animatedAttrs\n    The only thing the generic AttributesChannel can't calculate is the initial value of an animated attr\n    of a specific element when there are no other Incidents entered on its lanes yet. These values are\n    the \"scratchValues\" and they are strongly dependend on the nature of the lib. E.g. for a CSS animation\n    what we are looking for can be found on the computedStyle.\n    The initialValues are the values that are actually going to be used by\n    the MonoIncident in the real execution of them\n    */\n\n    this.initialValues = {};\n    /*\n    The initial values defined by the user via the initialValues key on the\n    attributes (if present)\n    */\n\n    this.userDefinedInitialValues = attrs.initialValues || {};\n    /*\n    The initialValues of the Incident as passed by the Attribute Channel.\n    These values are been altered by the userDefinedInitialValues (if any)\n    but we need them for passing them on other Incidents on edit and delete operations\n    */\n\n    this.pureInitialValues = null;\n    /**\n     * @member {boolean} - if autoGenerated is set to true, it means that this MonoIncident has been auto-generated by its parent on initialisation.\n     * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n     * on specific points on their timeline.\n     */\n\n    this.autoGenerated = false;\n    this.onInitialise(attrs, props);\n  };\n\n  return {\n    F: MonoIncident,\n    d: [{\n      kind: \"get\",\n      key: \"selector\",\n      value: function selector() {\n        return this.props.selector;\n      }\n      /* shortcuts for attrs.attrs and attrs.animatedAttrs */\n\n    }, {\n      kind: \"get\",\n      key: \"animAttributes\",\n      value: function animAttributes() {\n        return this.attrs.animatedAttrs;\n      }\n    }, {\n      kind: \"set\",\n      key: \"animAttributes\",\n      value: function animAttributes(value) {\n        this.attrs.animatedAttrs[this.attributeKey] = value;\n      }\n      /**\n      This method shoudl be overwritten by the Incidents of the plugins. The method returns\n      the initial value that the element of it has as the library calculates / defines them. The\n      returned value represents the very initial value of the element's attribute before\n      any Incident that alters it gets added.\n       @returns {mixed} - the initial value of the element's attribute just when the HTML & CSS\n      of the Clip gets rendered\n      */\n\n    }, {\n      kind: \"method\",\n      key: \"getScratchValue\",\n      value: function getScratchValue() {\n        return 0;\n      }\n    }, {\n      kind: \"get\",\n      key: \"element\",\n      value: function element() {\n        if (this.contex === null) {\n          return [];\n        }\n\n        if (this.context.getElementByMCID) {\n          return this.context.getElementByMCID(this.mcid);\n        }\n\n        return this.context.getElements(this.selector)[0];\n      }\n    }, {\n      kind: \"get\",\n      key: \"attributeKey\",\n      value: function attributeKey() {\n        return Object.keys(this.attrs.animatedAttrs)[0];\n      }\n    }, {\n      kind: \"get\",\n      key: \"targetValue\",\n      value: function targetValue() {\n        return this.animAttributes[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getElementAttribute\",\n      value: function getElementAttribute(attr) {\n        return this.element.getAttribute(attr);\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"hasUserDefinedInitialValue\",\n      value: function hasUserDefinedInitialValue() {\n        if (Object.prototype.hasOwnProperty.call(this.userDefinedInitialValues, this.attributeKey)) {\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setInitialValue\",\n      value: function setInitialValue(value) {\n        var storePure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (storePure === true) {\n          this.pureInitialValues = JSON.parse(JSON.stringify(value)); // keep a copy of the\n          // passed initial values\n        }\n\n        if (!this.hasUserDefinedInitialValue()) {\n          this.initialValues[this.attributeKey] = value;\n          return;\n        }\n\n        if (_typeof(this.targetValue) === \"object\") {\n          // if it is a combo attribute\n          for (var key in this.userDefinedInitialValues[this.attributeKey]) {\n            value[key] = this.userDefinedInitialValues[this.attributeKey][key];\n          }\n\n          this.initialValues[this.attributeKey] = value;\n        } else {\n          this.initialValues[this.attributeKey] = this.userDefinedInitialValues[this.attributeKey];\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"initialValue\",\n      value: function initialValue() {\n        return this.initialValues[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getInitialValue\",\n      value: function getInitialValue() {\n        return this.initialValues[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        // if the MonoIncident belongs to a fragmented context there absolutely\n        // no reason to run the getContext method of it\n        try {\n          if (this.context.fragment === true) {\n            return;\n          }\n\n          if (!this.gotContext) {\n            this.onGetContext();\n            this.gotContext = true;\n          }\n        } catch (e) {\n          console.log(e);\n          console.log(this.mcid); // console.log(this.context);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {}\n    }, {\n      kind: \"method\",\n      key: \"onInitialise\",\n      value: function onInitialise() {\n        helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {// eslint-disable-line no-unused-vars\n      }\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n});\n\nmodule.exports = MonoIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction block(pld) {\n  pld.descriptor.value = function (description) {\n    if (this.blockID === undefined) {\n      this.blockID = helper.getAnId();\n    }\n\n    this.DescriptiveIncident.putMessageOnPipe('setBlock', {\n      id: this.blockID,\n      description: description,\n      incidentId: this.DescriptiveIncident.id,\n      realIncidentId: this.id\n    }, 'rootClip', {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n  };\n}\n\nmodule.exports = block;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvYmxvY2suanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvYmxvY2suanM/M2Q1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG5cbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcblxuZnVuY3Rpb24gYmxvY2socGxkKSB7XG4gIHBsZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgaWYgKHRoaXMuYmxvY2tJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmJsb2NrSUQgPSBoZWxwZXIuZ2V0QW5JZCgpO1xuICAgIH1cblxuICAgIHRoaXMuRGVzY3JpcHRpdmVJbmNpZGVudC5wdXRNZXNzYWdlT25QaXBlKCdzZXRCbG9jaycsIHtcbiAgICAgIGlkOiB0aGlzLmJsb2NrSUQsXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBpbmNpZGVudElkOiB0aGlzLkRlc2NyaXB0aXZlSW5jaWRlbnQuaWQsXG4gICAgICByZWFsSW5jaWRlbnRJZDogdGhpcy5pZFxuICAgIH0sICdyb290Q2xpcCcsIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJsb2NrOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction handleResize(pld) {\n  pld.descriptor.value = function (target, payload) {\n    // eslint-disable-line no-unused-vars\n    if (this.id === target) {\n      return this;\n    } else {\n      return this.bypass();\n    }\n  };\n}\n\nmodule.exports = handleResize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvaGFuZGxlUmVzaXplLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9kZWNvcmF0b3JzL2hhbmRsZVJlc2l6ZS5qcz82M2ExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYW5kbGVSZXNpemUocGxkKSB7XG4gIHBsZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKHRhcmdldCwgcGF5bG9hZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBpZiAodGhpcy5pZCA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYnlwYXNzKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhbmRsZVJlc2l6ZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction unblock(pld) {\n  pld.descriptor.value = function (description) {\n    this.DescriptiveIncident.putMessageOnPipe('unBlock', {\n      id: this.blockID\n    }, 'rootClip', {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n  };\n}\n\nmodule.exports = unblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvdW5ibG9jay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQmFzZUNsYXNzZXMvZGVjb3JhdG9ycy91bmJsb2NrLmpzPzZiOTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgX1RSRUVDT05TVCA9IHJlcXVpcmUoJy4uLy4uL1RyZWUvX0NPTlNUJyk7XG5cbmZ1bmN0aW9uIHVuYmxvY2socGxkKSB7XG4gIHBsZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgdGhpcy5EZXNjcmlwdGl2ZUluY2lkZW50LnB1dE1lc3NhZ2VPblBpcGUoJ3VuQmxvY2snLCB7XG4gICAgICBpZDogdGhpcy5ibG9ja0lEXG4gICAgfSwgJ3Jvb3RDbGlwJywge1xuICAgICAgc2VsZkV4ZWN1dGU6IHRydWUsXG4gICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5ibG9jazsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar lanesHandler = __webpack_require__(/*! ./LanesHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js\");\n\nvar AttributeChannel =\n/*#__PURE__*/\nfunction (_Channel) {\n  _inherits(AttributeChannel, _Channel);\n\n  function AttributeChannel(props) {\n    var _this;\n\n    _classCallCheck(this, AttributeChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannel).call(this, props));\n    /*\n    comboAttributes are attributes of type object, holding a number of other attributes.\n    E.g. CSS \"transform\" attribute is a combo that holds a number of other attributes such as:\n    translateX, translateY, etc. The lanes handler keeps just one lane for the combo attrs\n    in an object format keeping the value of each attribute at any given point.\n    Combo attributes are passed on the constructor of the Channel in the format:\n    props.comboAttributes: {\n        transition: ['translateX', 'translateY', ...],\n        <something_else>: ['<attrName1>', '<attrName2>', ...]\n    }\n    */\n\n    _this.comboAttributes = {};\n    /**\n     * For incidents that do not have animatedAttrs there should be only one lane per element.\n     * The attributes Channel will use a default (fake), fixed attribute for this cases so it always ends\n     * up with just one lane per element: <element_id>_<this.fixedAttributeName>\n     */\n\n    _this.fixedAttributeName = \"_\";\n\n    if (props.comboAttributes != null) {\n      _this.comboAttributes = props.comboAttributes;\n    }\n\n    _this.LanesHandler = new lanesHandler({\n      comboAttributes: _this.comboAttributes,\n      runTimeInfo: _this.runTimeInfo\n    }); // this.type = \"attributes\";\n\n    return _this;\n  }\n\n  _createClass(AttributeChannel, [{\n    key: \"setComboAttributes\",\n    value: function setComboAttributes(comboAttributes) {\n      this.comboAttributes = comboAttributes;\n      this.LanesHandler = new lanesHandler({\n        comboAttributes: this.comboAttributes\n      });\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      this.LanesHandler._resize(durationFraction);\n    }\n    /* *******************************************************\n     DECISION METHODS\n     ********************************************************/\n\n    /**\n     * All of the incidents coming to this method are element-attribute incidents meaning that they only\n     * target just one element and also they include just a single attribute on the incident.attrs.animatedAttrs\n     * object\n     *\n     * @param {array} incidents - A collection of Incidents in the form:\n     * {\n     *  millisecond\n     *  incident\n     *  id\n     * }\n     * @param {string} type - can be either \"all-or-nothing\" (default) or \"keep-passing\". If type = \"all-or-nothing\"\n     *  the addition passes only if all incidents pass. If type = \"keep-passing\" the method will still return true\n     *  but will also include an errors array on its return and also will only include the success callbacks on\n     *  the execute key of its return\n     * @returns either:\n     *   {\n     *       result:true,\n     *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n     *   }\n     *   or\n     *   {\n     *       result: false,\n     *       errors\n     *   }\n     */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      var _this2 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      /* an array where we keep all affected lanes so we can slip on them at the end.\n      The format for each affected lane we keep is:\n      {\n          mcid: mcid,\n          attribute: attribute\n      }\n      */\n\n      var affectedLanes = []; // while the LanesHandlerSanbox adds lane items it makes decisions of which permanent changes should be made to\n      // the permanent and pre-existing objects it handles, such as changes on the initial values of existing animations.\n      // Because of the fact the LanesSandboxHandler is only there for testing we don't want to execute these changes\n      // during checks but still we need to know them on success. For this, the onSuccessActions array holds all executable\n      // functions retured by various LanesHandlerSanbox functions so it can execute them on success.\n\n      var onSuccessActions = [];\n      var conflicts = [];\n\n      var _loop = function _loop(i) {\n        var incidentConflicts = false; // a boolean that keeps the information whether the incident conflicts or not\n\n        var laneItem = incidents[i];\n        var incident = laneItem.incident;\n        var mcid = incident.mcid;\n        var attribute = incident.attribute || _this2.fixedAttributeName;\n        LanesHandlerSandbox.laneExists(mcid, attribute); // create the lane if it doesn't exist already\n\n        affectedLanes.push({\n          mcid: mcid,\n          attribute: attribute\n        }); // **** if the lane did exist before the new addition check for conflicts\n\n        var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(laneItem, mcid, attribute); // helper.log(overlappingAnim)\n\n        if (overlappingAnims.length > 0) {\n          incidentConflicts = true;\n          conflicts.push({\n            type: 'unauthorised, overlapping incidents on the same element',\n            meta: {\n              element_mcid: mcid,\n              attribute: attribute,\n              incident: laneItem,\n              overlappingAnims: overlappingAnims\n            }\n          });\n        }\n\n        if (!incidentConflicts) {\n          onSuccessActions.push(function () {\n            LanesHandlerSandbox.addElementToLane(mcid, attribute, laneItem.millisecond, incident);\n\n            incident._onGetContextOnce();\n          });\n        }\n      };\n\n      for (var i = 0; i < incidents.length; i++) {\n        _loop(i);\n      } // end for each incident\n      // if we have conflicts and the type = \"all-or-nothing\"\n\n\n      if (conflicts.length > 0 && type === \"all-or-nothing\") {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        // as soon as we want all passing additions to get applied the Lanes Handler will create a callback that will be passed to the result.\n        // This callback will apply all passing additions.\n        // success message\n        var that = this;\n\n        var exec = function exec() {\n          for (var i = 0; i < onSuccessActions.length; i++) {\n            onSuccessActions[i]();\n          }\n\n          that.LanesHandler.applySandboxChanges(LanesHandlerSandbox);\n        };\n\n        return {\n          result: true,\n          errors: conflicts,\n          execute: exec\n        };\n      }\n    }\n    /**\n     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n     * that apply the change\n     * @param {array} incidents - the list of the lane items to edit in an array format [object, object, ...]\n     * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n     * @returns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidents, millisecondsDelta) {\n      // console.log(incidents);\n      var affectedIncidentIds = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        affectedIncidentIds.push(incidents[i].id);\n      }\n\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      var conflicts = [];\n      var affectedLanes = []; // for each of the affectedAnimations\n\n      for (var _i = 0; _i < incidents.length; _i++) {\n        var incident = incidents[_i].incident;\n        var incidentId = incident.id;\n        var mcid = incidents[_i].incident.mcid;\n        var attribute = incidents[_i].incident.attribute || this.fixedAttributeName;\n        var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n        var laneAttrs = {\n          mcid: mcid,\n          attribute: attribute // check for conflicts and edit lane items millisecond\n\n        };\n\n        for (var k = 0; k < lane.length; k++) {\n          if (lane[k].id === incidentId) {\n            affectedLanes.push(laneAttrs);\n            var affectedAnim = lane[k];\n            var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n            testLaneElement.millisecond += millisecondsDelta;\n            testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n            var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, mcid, attribute, affectedIncidentIds);\n\n            if (overlappingAnims.length > 0) {\n              conflicts.push({\n                type: 'anauthorised, overlapping animations on the same element',\n                meta: {\n                  element_mcid: mcid,\n                  attribute: attribute,\n                  newAnimation: testLaneElement,\n                  overlappingAnims: overlappingAnims\n                }\n              });\n            }\n\n            break;\n          } // end of if we found the specific animation on the lane's sequence\n\n        } // end of each lane's item\n\n      } // end for each affected animation's id\n\n\n      if (conflicts.length > 0) {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        var that = this;\n\n        var exec = function exec() {\n          that.LanesHandler.updateLane(affectedIncidentIds, millisecondsDelta);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n    }\n    /**\n     * @param {array} incidents - [{id, start, end, startDelta}]\n     * @param {boolean} fullChannelResize - if set to true then the full html channel is resizing. This is a special case as in\n     *  that case no checks should be actually perfomed nor the projected candidate should be applied directly\n     **/\n\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      var fullChannelResize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var excludeIdsFromCheck = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        excludeIdsFromCheck.push(incidents[i].id);\n      }\n\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      var conflicts = [];\n      var affectedLanes = []; // for each of the incidents passed\n\n      for (var _i2 = 0; _i2 < incidents.length; _i2++) {\n        // get the ContextAwareIncident\n        var incident = this.LanesHandler.incidentsById._get(incidents[_i2].id);\n\n        var mcid = incident.mcid;\n        var attribute = incident.attribute || this.fixedAttributeName;\n        var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n        var laneAttrs = {\n          mcid: mcid,\n          attribute: attribute\n        };\n        var testDuration = incidents[_i2].end - incidents[_i2].start; // check for conflicts and edit lane items millisecond\n\n        for (var k = 0; k < lane.length; k++) {\n          if (lane[k].id === incidents[_i2].id) {\n            affectedLanes.push(laneAttrs);\n\n            if (fullChannelResize === false) {\n              var affectedAnim = lane[k];\n              var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n              testLaneElement.millisecond += incidents[_i2].startDelta;\n              testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n              var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, laneAttrs.mcid, laneAttrs.attribute, excludeIdsFromCheck, testDuration);\n\n              if (overlappingAnims.length > 0) {\n                conflicts.push({\n                  type: 'anauthorised overlapping animations on the same element',\n                  meta: {\n                    element_mcid: laneAttrs.mcid,\n                    attribute: laneAttrs.attribute,\n                    newAnimation: testLaneElement,\n                    overlappingAnims: overlappingAnims\n                  }\n                });\n              }\n            }\n\n            break;\n          } // end of if we found the specific animation on the lane's sequence\n\n        } // end of each lane's item\n\n      } // end for each affected animation's id\n\n\n      if (conflicts.length > 0) {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        var that = this;\n\n        var exec = function exec() {\n          // updateLanes (only this time animation by animation as the milliseconds delta is not standard for all)\n          // as soon as there are no conflicts the Lanes Handler applies the changes before sending over the\n          // success message\n          for (var _i3 = 0; _i3 < incidents.length; _i3++) {\n            that.LanesHandler.updateLane([incidents[_i3].id], incidents[_i3].startDelta);\n          }\n        };\n\n        return {\n          execute: exec,\n          result: true\n        };\n      }\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(removedAnimations) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // eslint-disable-line no-unused-vars\n      var removedAnimationIds = [];\n\n      for (var i = 0; i < removedAnimations.length; i++) {\n        removedAnimationIds.push(removedAnimations[i].id);\n      }\n\n      var that = this;\n\n      var exec = function exec() {\n        that.LanesHandler.deleteAnimations(removedAnimationIds);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     * This method is responsible for recalculating the scratch values of the first\n     * Incident of each of the lanes of the LanesHandler according to the provided\n     * context id\n     **/\n\n  }, {\n    key: \"recalcScratchValues\",\n    value: function recalcScratchValues(contextId) {\n      this.LanesHandler.recalcScratchValues(contextId);\n    }\n    /**\n     * Slips to just one lane forwards\n     * @param {array} lane - the lane to slip into\n     * @param {object} laneData - an object with keys: attribute & mcid\n     * @param {int} currentMillisecond - the millisecond the slip starts from\n     * @param {int} millisecond - the target millisecond of the slip\n     * @param {string} contextId - the contextId of the Incidents to slip\n     */\n\n  }, {\n    key: \"slipIntoLaneForwards\",\n    value: function slipIntoLaneForwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n      var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      // console.log(lane, currentMillisecond, millisecond);\n      var that = this;\n\n      var participatingAnims = _filter(lane, function (laneItem) {\n        return laneItem.millisecond + that.incidentsById._get(laneItem.id).duration >= currentMillisecond && laneItem.millisecond + that.incidentsById._get(laneItem.id).duration <= millisecond || // it ends after currentMillisecond and before target millisecond\n        that.incidentsById._get(laneItem.id).duration + laneItem.millisecond >= millisecond && laneItem.millisecond <= millisecond; // or it ends after the target millisecond but also starts before it\n      });\n\n      if (participatingAnims.length == 0) {\n        // there are two cases forceReset can be used: a) when we are flashing the Clip\n        // going from 0 to millisecond via flash method of ExtendableClip or when\n        // we want to seek the Clip without executing it (like it was in transitional state)\n        // we diferentiate the two by the currentMillisecond value which in case (a) is always 0\n        if (forceReset === true && currentMillisecond === 0) {\n          var firstIncident = this.incidentsById._get(lane[0].id);\n\n          firstIncident.onProgress(0, 0, contextId);\n        }\n\n        return true;\n      }\n\n      participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n        return laneItem.millisecond;\n      }]); // We only care about the last (in chronological order) Incident, as this\n      // will define the final value\n\n      var lastIndex = participatingAnims.length - 1;\n\n      var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n      var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation ends before the target millisecond\n\n      if (participatingAnim.duration + startMillisecond <= millisecond) {\n        // and it's the last one on the row\n        participatingAnim.onProgress(1, participatingAnim.duration, contextId);\n      } else {\n        // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n        // and store this info somewhere\n        var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n        participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n      }\n    }\n    /**\n     * Slips to just one lane backwards\n     * @param {array} lane - the lane to slip into\n     * @param {object} laneData - an object with keys: attribute & mcid\n     * @param {int} currentMillisecond - the millisecond the slip starts from\n     * @param {int} millisecond - the target millisecond of the slip\n     * @param {string} contextId - the contextId of the Incidents to slip\n     */\n\n  }, {\n    key: \"slipToLaneBackwards\",\n    value: function slipToLaneBackwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n      var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      // we take all Animations that are either currently running or\n      // they end after the destination point\n      // helper.log('<------');\n      var that = this;\n\n      var participatingAnims = _filter(lane, function (laneItem) {\n        var laneItemEnd = that.incidentsById._get(laneItem.id).duration + laneItem.millisecond;\n        return laneItemEnd <= millisecond && laneItemEnd >= currentMillisecond || // they end in the hot area\n        laneItem.millisecond >= currentMillisecond && laneItem.millisecond <= millisecond || // they start in the hot area\n        laneItem.millisecond < currentMillisecond && laneItemEnd > millisecond; // they overlap the hot area\n      });\n\n      if (participatingAnims.length == 0) {\n        return true;\n      }\n\n      participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n        return laneItem.millisecond;\n      }]); // We only care about the first (in chronological order) Incident, as this\n      // will define the final value of the backwards move\n\n      var lastIndex = 0;\n\n      var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n      var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation starts after the target millisecond\n\n      if (startMillisecond >= millisecond) {\n        participatingAnim.onProgress(0, 0, contextId);\n      } else {\n        // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n        // and store this info somewhere\n        var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n        participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n      }\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {sring} contextId - the context id to \"move\"\n     @param {boolean} forceReset - set to true if status recalc is needed after edit\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      // step 1: iterate through all lanes\n      var laneKeys = this.lanes._keys();\n\n      for (var i = 0; i < laneKeys.length; i++) {\n        var laneid = laneKeys[i];\n\n        var lane = this.lanes._get(laneid);\n\n        var laneData = helper.getMCIDandAttrOutOfLaneKey(laneid);\n\n        if (from <= to) {\n          this.slipIntoLaneForwards(lane, laneData, from, to, contextId, forceReset);\n        } else if (from > to) {\n          this.slipToLaneBackwards(lane, laneData, from, to, contextId, forceReset);\n        }\n      }\n    }\n  }, {\n    key: \"lanes\",\n    get: function get() {\n      return this.LanesHandler.lanes;\n    }\n  }, {\n    key: \"incidentsById\",\n    get: function get() {\n      return this.LanesHandler.incidentsById;\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return \"attributes\";\n    }\n  }]);\n\n  return AttributeChannel;\n}(Channel);\n\nmodule.exports = AttributeChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar _findIndex = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.findindex/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper({\n  logLevel: 4\n});\n\nvar Collection = __webpack_require__(/*! ./helpers/Collection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js\");\n\nvar SandboxLanes = __webpack_require__(/*! ./helpers/SandboxLanes */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js\");\n\nvar SandboxCollection = __webpack_require__(/*! ./helpers/SandboxCollection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxIncidentsById = __webpack_require__(/*! ./helpers/SandboxIncidentsById */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js\");\n\nvar setInitialValueForCombo = __webpack_require__(/*! ./helpers/ComboAttrsCascading */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js\");\n\nvar LanesHandler =\n/*#__PURE__*/\nfunction () {\n  function LanesHandler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LanesHandler);\n\n    /*\n     * Keeps the lanes of the Channel in the form:\n     * {\n     *  <motorcortex-id>_<attribute>: [\n     *      {\n     *          id: the id of the Incident\n     *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n     *      }\n     *  ]\n     * }\n     /** @type {{}}\n     */\n    this.lanes = new Collection({});\n\n    if (props.lanes) {\n      this.lanes = props.lanes;\n    }\n\n    this.comboAttributes = {};\n\n    if (props.comboAttributes != null) {\n      this.comboAttributes = props.comboAttributes;\n    }\n\n    this.runTimeInfo = props.runTimeInfo;\n    /*\n    Keeps an indexing of the lanes each Animation belongs to. The form is the following:\n    belongingLaneKeysByAnimationId: {\n        <animation_id>: [laneKey1, laneKey2, ...],\n        <animation_id>: [laneKey2, laneKey3, ...],\n        ...\n    }\n     */\n\n    this.belongingLaneKeysByAnimationId = new Collection({});\n\n    if (props.belongingLaneKeysByAnimationId) {\n      this.belongingLaneKeysByAnimationId = props.belongingLaneKeysByAnimationId;\n    }\n    /*\n    keeps all Incidents (that appear on the lanes) mapped on a key - value pair\n    object on which the keys are the ids and the values the corresponding Incidents.\n    The Incidents of this object are ContextAwareIncidents\n    */\n\n\n    this.incidentsById = new Collection({});\n\n    if (props.incidentsById) {\n      this.incidentsById = props.incidentsById;\n    }\n  }\n  /**\n   * This method resizes all the lanes of the Lanes Handler by the durationFraction provided.\n   * No checks are performed.\n   * This method is been invoked in cases where a full Clip gets resized, so no conflict checks need to\n   * run.\n   * @param {float} durationFration: the fraction between the new duration and the current\n   */\n\n\n  _createClass(LanesHandler, [{\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      var keys = this.lanes._keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        var theLane = this.lanes._get(key);\n\n        for (var _i = 0; _i < theLane.length; _i++) {\n          theLane[_i].millisecond = theLane[_i].millisecond * durationFraction;\n        }\n      }\n    }\n    /**\n     * it creates a new LanesHandler that acts as a sanbox for testing changes\n     */\n\n  }, {\n    key: \"createTestLanesSanbox\",\n    value: function createTestLanesSanbox() {\n      var props = {\n        lanes: new SandboxLanes(this.lanes._export()),\n        belongingLaneKeysByAnimationId: new SandboxCollection(this.belongingLaneKeysByAnimationId._export()),\n        incidentsById: new SandboxIncidentsById(this.incidentsById._export())\n      };\n\n      if (this.comboAttributes) {\n        props.comboAttributes = this.comboAttributes;\n      }\n\n      return new LanesHandler(props);\n    }\n  }, {\n    key: \"getLanesCopy\",\n    value: function getLanesCopy(lane) {\n      var laneToReturn = [];\n\n      for (var i = 0; i < lane.length; i++) {\n        laneToReturn.push({\n          id: lane[i].id,\n          millisecond: lane[i].millisecond * 1\n        });\n      }\n\n      return laneToReturn;\n    }\n  }, {\n    key: \"getLaneElementsClone\",\n    value: function getLaneElementsClone(laneElement) {\n      return {\n        id: laneElement.id,\n        millisecond: laneElement.millisecond * 1\n      };\n    }\n  }, {\n    key: \"applySandboxChanges\",\n    value: function applySandboxChanges(SanboxObject) {\n      this.lanes = new Collection(SanboxObject.lanes._export());\n      this.belongingLaneKeysByAnimationId = new Collection(SanboxObject.belongingLaneKeysByAnimationId._export());\n      this.incidentsById = new Collection(SanboxObject.incidentsById._export());\n    }\n  }, {\n    key: \"getLane\",\n    value: function getLane(mcid, attr) {\n      return this.lanes._get(helper.getLaneKey(mcid, attr));\n    }\n    /**\n     * return true if lane exists or false otherwise\n     * @param {String} mcid\n     * @param {String} attr\n     * @param {boolean} ifNotCreateIt - if is set to true and the lane doesn't exist it creates it but still returning false\n     */\n\n  }, {\n    key: \"laneExists\",\n    value: function laneExists(mcid, attr) {\n      var ifNotCreateIt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var laneKey = helper.getLaneKey(mcid, attr);\n\n      if (!this.lanes._hasOwnProperty(laneKey)) {\n        if (ifNotCreateIt) {\n          this.lanes._set(laneKey, []);\n        }\n\n        return false;\n      } else {\n        return true;\n      }\n    }\n    /**\n     * @param {Object} newAnim - an object of the form of a lane item (with keys \"millisecond\" and \"incident\"\n     * @param {string} mcid\n     * @param {String} attr\n     * @param {array} excludeIdsFromCheck - optional. If exists it excludes all the ids of this array from check. This\n     *  parameter has been added for the edit checks where an animation might overlap another animation that participates on\n     *  the move, something that should not happen as the edited animations pre-existed without conflicts and the move of all\n     *  of them together guarantees that there is going to be no conflict between them even after the edit\n     * @param {int} testDuration - optional. This parameter is used when the channel needs to addcheck overlaps after duration\n     *  edits, so the testDuration is passed (we don't want to polute the original animation object as it refers to the real one)\n     * @retuns {array} - a list of all overlapping animations of the lane\n     */\n\n  }, {\n    key: \"getOverlappingAnims\",\n    value: function getOverlappingAnims(newAnim, mcid, attr) {\n      var excludeIdsFromCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      var testDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var that = this;\n\n      var overlappingAnims = _filter(this.lanes._get(helper.getLaneKey(mcid, attr)), function (existingAnim) {\n        var durationToUseOnChecks = newAnim.incident.duration;\n\n        if (testDuration != null) {\n          durationToUseOnChecks = testDuration;\n        }\n\n        return existingAnim.id != newAnim.incident.id && excludeIdsFromCheck.indexOf(existingAnim.id) < 0 && ( // existing anim starts within the new anim's extend\n        existingAnim.millisecond >= newAnim.millisecond && existingAnim.millisecond < durationToUseOnChecks + newAnim.millisecond || // or ends within the new anim's extend\n        existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration <= durationToUseOnChecks + newAnim.millisecond // or it starts before and ends after the new anim's extend\n        || existingAnim.millisecond < newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > durationToUseOnChecks + newAnim.millisecond);\n      });\n\n      return overlappingAnims;\n    }\n    /**\n     * it justs adds the lane item to the lane and adjusts the initial values of the Anims in sequence\n     * No checks are performed, just execution.\n     * @param {String} mcid\n     * @param {String} attr\n     * @param {int} millisecond\n     * @param {Object} incident\n     */\n\n  }, {\n    key: \"addElementToLane\",\n    value: function addElementToLane(mcid, attr, millisecond, incident) {\n      var laneKey = helper.getLaneKey(mcid, attr);\n\n      this.incidentsById._set(incident.id, incident);\n\n      var laneElement = {\n        millisecond: millisecond,\n        id: incident.id\n      };\n      this.laneExists(mcid, attr, true);\n\n      var theLane = this.lanes._get(laneKey);\n\n      theLane.push(laneElement);\n      theLane = _sortBy(theLane, ['millisecond']);\n\n      this.lanes._set(laneKey, theLane); // indexing stuff\n\n\n      if (!this.belongingLaneKeysByAnimationId._hasOwnProperty(incident.id)) {\n        this.belongingLaneKeysByAnimationId._set(incident.id, []);\n      }\n\n      this.belongingLaneKeysByAnimationId._get(incident.id).push(laneKey); // indexing\n\n\n      var newAnimsIndex = _findIndex(theLane, function (item) {\n        return item.id === incident.id;\n      }); // helper.log(newAnimsIndex);\n      // step 1: set the intial values of the new Animation\n\n\n      if (newAnimsIndex === 0) {\n        // if the newly entered animation is the first of the lane\n        if (theLane.length > 1) {\n          // and it has other animations too\n          incident.setInitialValue(this.incidentsById._get(theLane[1].id).pureInitialValues);\n        } else {\n          incident.setInitialValue();\n        }\n      } else {\n        incident.setInitialValue(this.incidentsById._get(theLane[newAnimsIndex - 1].id).animatedAttributeValue);\n      }\n      /* if the attribute of the lane is a compo attribute */\n\n\n      if (Object.prototype.hasOwnProperty.call(this.comboAttributes, attr)) {\n        var incidentInitialValues = incident.initialValue;\n        setInitialValueForCombo(theLane, this.incidentsById, incidentInitialValues, newAnimsIndex);\n      } // step 2: set the inital values of the following Animation (if any).\n\n\n      if (newAnimsIndex + 1 < theLane.length) {\n        this.incidentsById._get(theLane[newAnimsIndex + 1].id).setInitialValue(incident.animatedAttributeValue);\n\n        if (this.incidentsById._get(theLane[newAnimsIndex + 1].id).gotContext) {\n          this.incidentsById._get(theLane[newAnimsIndex + 1].id).lastWish();\n\n          this.incidentsById._get(theLane[newAnimsIndex + 1].id).onGetContext();\n        }\n      }\n    }\n    /**\n     * it justs updates the lane\n     * No checks are performed, just execution\n     * @param {array} affectedAnimationsIds\n     * @param {int} millisecondDelta\n     */\n\n  }, {\n    key: \"updateLane\",\n    value: function updateLane(affectedAnimationsIds, millisecondsDelta) {\n      var _this = this;\n\n      // first we group the affected animations by lanes\n      var affectedLanes = {};\n      var that = this;\n\n      for (var i = 0; i < affectedAnimationsIds.length; i++) {\n        var belongingLanes = this.belongingLaneKeysByAnimationId._get(affectedAnimationsIds[i]);\n\n        for (var j = 0; j < belongingLanes.length; j++) {\n          var laneKey = belongingLanes[j];\n\n          if (!Object.prototype.hasOwnProperty.call(affectedLanes, laneKey)) {\n            affectedLanes[laneKey] = {\n              animations: [],\n              lane: that.lanes._get(laneKey),\n              laneData: helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j])\n            };\n          }\n\n          affectedLanes[laneKey].animations.push(affectedAnimationsIds[i]);\n        }\n      } // for each of the affected lanes\n\n\n      for (var _laneKey in affectedLanes) {\n        var affectedLane = affectedLanes[_laneKey];\n        var lane = affectedLane.lane;\n        var laneData = affectedLane.laneData;\n\n        var laneBeforeEdit = _sortBy(this.getLanesCopy(lane), ['millisecond']);\n\n        var isComboAttr = Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute); // edit lane items millisecond\n\n        for (var k = 0; k < lane.length; k++) {\n          if (affectedLane.animations.indexOf(lane[k].id) >= 0) {\n            lane[k].millisecond += millisecondsDelta;\n          }\n        } // end for searching for the animations within the lane\n\n\n        var sortedLane = _sortBy(lane, ['millisecond']);\n\n        this.lanes._set(_laneKey, sortedLane);\n\n        lane = sortedLane;\n\n        var _loop = function _loop(_i2) {\n          var animationToCheck = affectedLane.animations[_i2];\n\n          var animationIndexBeforeEdit = _findIndex(laneBeforeEdit, function (item) {\n            return item.id === animationToCheck;\n          });\n\n          var animationIndexAfterEdit = _findIndex(lane, function (item) {\n            return item.id === animationToCheck;\n          });\n\n          var animation = _this.incidentsById._get(lane[animationIndexAfterEdit].id);\n\n          if (animationIndexBeforeEdit !== animationIndexAfterEdit || animationIndexAfterEdit > 1) {\n            if (animationIndexBeforeEdit + 1 < lane.length) {\n              // if the animation was not the last animation on the lane before the edit\n              // we should take care of the initial values of the animation's previous successor\n              if (animationIndexBeforeEdit === 0) {\n                // if the edited animation was the first one before the edit\n                // pass its initial values to its previous successor as its new initial values\n                if (isComboAttr) {\n                  setInitialValueForCombo(lane, _this.incidentsById, animation.pureInitialValues, 0, true);\n                } else {\n                  _this.incidentsById._get(laneBeforeEdit[1].id).setInitialValue(animation.pureInitialValues);\n\n                  _this.incidentsById._get(laneBeforeEdit[1].id).onGetContext();\n                }\n              } else {\n                // else if the edited animation was not the first one before the edit\n                // meaning its previous successor is not the first one on the lane after the edit\n                // just grab the target value of the new previous animation of the animation's previous successor and set it as initial value\n                if (isComboAttr) {\n                  var indexToAffect = animationIndexAfterEdit > animationIndexBeforeEdit ? animationIndexBeforeEdit : animationIndexAfterEdit;\n                  setInitialValueForCombo(lane, _this.incidentsById, _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue, indexToAffect, true);\n                } else {\n                  _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).setInitialValue(_this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue);\n\n                  _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).onGetContext();\n                }\n              }\n            } // for the edited animation itself now:\n\n\n            if (animationIndexAfterEdit === 0) {\n              // is it the first one (after edit)?\n              // get the initial values of the previously 0 indexed animation of the lane\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this.incidentsById, _this.incidentsById._get(laneBeforeEdit[0].id).pureInitialValues, animationIndexAfterEdit, true);\n              } else {\n                animation.setInitialValue(_this.incidentsById._get(laneBeforeEdit[0].id).pureInitialValues);\n                animation.onGetContext();\n              }\n            } else {\n              // else if it is not the first one after editd\n              // just grab the target value of the previous animation on the updated lane and set it as its initial value\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this.incidentsById, _this.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue, animationIndexAfterEdit, true);\n              } else {\n                animation.setInitialValue(_this.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue);\n                animation.onGetContext();\n              }\n            } // for its new next animation (if it has one)\n\n\n            if (animationIndexAfterEdit + 1 < lane.length) {\n              // set its initial value to equal the target value of the edited animation\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this.incidentsById, animation.animatedAttributeValue, animationIndexAfterEdit + 1, true);\n              } else {\n                _this.incidentsById._get(lane[animationIndexAfterEdit + 1].id).setInitialValue(animation.animatedAttributeValue);\n\n                _this.incidentsById._get(lane[animationIndexAfterEdit + 1].id).onGetContext();\n              }\n            }\n          }\n        };\n\n        for (var _i2 = 0; _i2 < affectedLane.animations.length; _i2++) {\n          _loop(_i2);\n        }\n      } // end for each of the belonging lanes of the animation\n\n    }\n    /**\n     * removes the list of animations as provided\n     * @param {array} removedAnimations - an array with the removed animations' ids\n     */\n\n  }, {\n    key: \"deleteAnimations\",\n    value: function deleteAnimations(removedAnimations) {\n      var affectedLanes = {};\n\n      for (var i = 0; i < removedAnimations.length; i++) {\n        var id = removedAnimations[i]; // for each lane the affected Animation appears in\n\n        var belongingLanes = this.belongingLaneKeysByAnimationId._get(id);\n\n        for (var j = 0; j < belongingLanes.length; j++) {\n          var lane = this.lanes._get(belongingLanes[j]);\n\n          var animationIndexBeforeEdit = -1;\n\n          for (var k = 0; k < lane.length; k++) {\n            if (lane[k].id === id) {\n              animationIndexBeforeEdit = k;\n              break;\n            }\n          } // helper.log(animationIndexBeforeEdit);\n\n\n          var animationToDelete = Object.assign({}, lane[animationIndexBeforeEdit]);\n\n          var animationObjectToDelete = this.incidentsById._get(animationToDelete.id);\n\n          var laneData = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]); // gets the lane without the removed animation\n\n          var newLane = [];\n\n          for (var _k = 0; _k < lane.length; _k++) {\n            if (lane[_k].id != id) {\n              newLane.push(lane[_k]);\n            }\n          }\n\n          this.lanes._set(belongingLanes[j], newLane);\n\n          lane = this.lanes._get(belongingLanes[j]);\n\n          if (lane.length === 0) {\n            // in case there are no more animations on the lane any more we reset\n            // the lane by running the progress(0,0), so that the affected elements\n            // will get back to their original attribute value\n            animationObjectToDelete.onProgress(0, 0);\n\n            this.lanes._delete(belongingLanes[j]);\n\n            if (Object.prototype.hasOwnProperty.call(affectedLanes, belongingLanes[j])) {\n              delete affectedLanes[belongingLanes[j]];\n            }\n          } else {\n            affectedLanes[belongingLanes[j]] = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n\n            if (animationIndexBeforeEdit < lane.length && this.incidentsById._get(animationToDelete.id).pureInitialValues !== false) {\n              if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n                setInitialValueForCombo(lane, this.incidentsById, this.incidentsById._get(animationToDelete.id).pureInitialValues, animationIndexBeforeEdit, true);\n              } else {\n                this.incidentsById._get(lane[animationIndexBeforeEdit].id).setInitialValue(this.incidentsById._get(animationToDelete.id).pureInitialValues);\n\n                this.incidentsById._get(lane[animationIndexBeforeEdit].id).onGetContext();\n              }\n            }\n          }\n        }\n\n        this.belongingLaneKeysByAnimationId._delete(removedAnimations[i]);\n      }\n\n      return affectedLanes;\n    }\n    /**\n     * This method is responsible for recalculating the scratch values of the first\n     * Incident of each of the lanes of the LanesHandler according to the provided\n     * context id\n     **/\n\n  }, {\n    key: \"recalcScratchValues\",\n    value: function recalcScratchValues(contextId) {\n      var keys = this.lanes._keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        var theLane = this.lanes._get(key);\n\n        if (theLane.length > 0) {\n          var firstIncident = this.incidentsById._get(theLane[0].id);\n\n          var newScratchValue = firstIncident.getScratchValue(contextId);\n          var laneData = helper.getLaneDataFromLaneKey(key);\n\n          if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n            // if it is a combo\n            setInitialValueForCombo(theLane, this.incidentsById, newScratchValue, 0, true);\n          } else {\n            // else if it's not a combo attribute\n            firstIncident.setInitialValue(newScratchValue);\n          }\n\n          firstIncident.lastWish();\n          firstIncident.onGetContext();\n        }\n      }\n    }\n  }]);\n\n  return LanesHandler;\n}();\n\nmodule.exports = LanesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Collection =\n/*#__PURE__*/\nfunction () {\n  function Collection() {\n    var initialArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, Collection);\n\n    this.realArray = [];\n\n    if (initialArray != null) {\n      this.realArray = initialArray;\n    }\n  }\n\n  _createClass(Collection, [{\n    key: \"_hasOwnProperty\",\n    value: function _hasOwnProperty(key) {\n      return Object.prototype.hasOwnProperty.call(this.realArray, key);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      return this.realArray[key];\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(key, value) {\n      this.realArray[key] = value;\n    }\n  }, {\n    key: \"_keys\",\n    value: function _keys() {\n      return Object.keys(this.realArray);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key) {\n      return delete this.realArray[key];\n    }\n    /**\n     * exports a Collection object\n     */\n\n  }, {\n    key: \"_export\",\n    value: function _export() {\n      return this.realArray;\n    }\n  }]);\n\n  return Collection;\n}();\n\nmodule.exports = Collection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbGxlY3Rpb24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbGxlY3Rpb24uanM/OGQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgQ29sbGVjdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgdmFyIGluaXRpYWxBcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsZWN0aW9uKTtcblxuICAgIHRoaXMucmVhbEFycmF5ID0gW107XG5cbiAgICBpZiAoaW5pdGlhbEFycmF5ICE9IG51bGwpIHtcbiAgICAgIHRoaXMucmVhbEFycmF5ID0gaW5pdGlhbEFycmF5O1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2xsZWN0aW9uLCBbe1xuICAgIGtleTogXCJfaGFzT3duUHJvcGVydHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc093blByb3BlcnR5KGtleSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnJlYWxBcnJheSwga2V5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhbEFycmF5W2tleV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldChrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLnJlYWxBcnJheVtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9rZXlzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9rZXlzKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVhbEFycmF5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLnJlYWxBcnJheVtrZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBleHBvcnRzIGEgQ29sbGVjdGlvbiBvYmplY3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9leHBvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V4cG9ydCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWxBcnJheTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sbGVjdGlvbjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nlane:\n     * [\n     *      {\n     *          id: the id of the Incident\n     *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n     *      }\n     *  ]\n*/\nfunction updateFinalValues(affectedIncident, initialValues, originalFinalValues, finalValues) {\n  // console.log(initialValues, originalFinalValues);\n  var change = false;\n\n  for (var key in initialValues) {\n    if (!Object.prototype.hasOwnProperty.call(originalFinalValues, key)) {\n      change = true;\n      finalValues[key] = initialValues[key];\n    }\n  }\n\n  affectedIncident.animatedAttributeValue = finalValues;\n  return change;\n}\n/**\n * This function takes as input the index of the affected incident on the lane,\n * the lane and it re-calculates the\n * initial and final values of all the following incidents in the lane.\n * The function is used only in cases of combo attributes\n *\n * @param {boolean} store - if set to true the first Incident to be edited stores the\n *      initial values as its pureInitialValues\n **/\n\n\nfunction setInitialValue(lane, incidentsById, newInitialValues, affectedIndex) {\n  var store = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var affectedItem = lane[affectedIndex];\n\n  var affectedIncident = incidentsById._get(affectedItem.id);\n\n  affectedIncident.setInitialValue(newInitialValues, store);\n  var change = updateFinalValues(affectedIncident, affectedIncident.initialValue, affectedIncident.originalAnimatedAttributeValue, JSON.parse(JSON.stringify(affectedIncident.animatedAttributeValue))); /// if the final values have changed according to the new initial values and there is\n  // a following incident on the lane\n\n  if (change) {\n    affectedIncident.lastWish();\n    affectedIncident.onGetContext();\n  }\n\n  if (change && affectedIndex < lane.length - 1) {\n    setInitialValue(lane, incidentsById, affectedIncident.animatedAttributeValue, affectedIndex + 1, false);\n  }\n}\n\nmodule.exports = setInitialValue;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbWJvQXR0cnNDYXNjYWRpbmcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbWJvQXR0cnNDYXNjYWRpbmcuanM/MzQ0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbmxhbmU6XG4gICAgICogW1xuICAgICAqICAgICAge1xuICAgICAqICAgICAgICAgIGlkOiB0aGUgaWQgb2YgdGhlIEluY2lkZW50XG4gICAgICogICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgY2hhbm5lbCB0aGlzIEFuaW1hdGlvbiAodGhhdCBhZmZlY3RzIHRoZSBzZWxlY3Rvci9hdHRyaWJ1dGUgcGFpcikgcnVuc1xuICAgICAqICAgICAgfVxuICAgICAqICBdXG4qL1xuZnVuY3Rpb24gdXBkYXRlRmluYWxWYWx1ZXMoYWZmZWN0ZWRJbmNpZGVudCwgaW5pdGlhbFZhbHVlcywgb3JpZ2luYWxGaW5hbFZhbHVlcywgZmluYWxWYWx1ZXMpIHtcbiAgLy8gY29uc29sZS5sb2coaW5pdGlhbFZhbHVlcywgb3JpZ2luYWxGaW5hbFZhbHVlcyk7XG4gIHZhciBjaGFuZ2UgPSBmYWxzZTtcblxuICBmb3IgKHZhciBrZXkgaW4gaW5pdGlhbFZhbHVlcykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9yaWdpbmFsRmluYWxWYWx1ZXMsIGtleSkpIHtcbiAgICAgIGNoYW5nZSA9IHRydWU7XG4gICAgICBmaW5hbFZhbHVlc1trZXldID0gaW5pdGlhbFZhbHVlc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIGFmZmVjdGVkSW5jaWRlbnQuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSA9IGZpbmFsVmFsdWVzO1xuICByZXR1cm4gY2hhbmdlO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFzIGlucHV0IHRoZSBpbmRleCBvZiB0aGUgYWZmZWN0ZWQgaW5jaWRlbnQgb24gdGhlIGxhbmUsXG4gKiB0aGUgbGFuZSBhbmQgaXQgcmUtY2FsY3VsYXRlcyB0aGVcbiAqIGluaXRpYWwgYW5kIGZpbmFsIHZhbHVlcyBvZiBhbGwgdGhlIGZvbGxvd2luZyBpbmNpZGVudHMgaW4gdGhlIGxhbmUuXG4gKiBUaGUgZnVuY3Rpb24gaXMgdXNlZCBvbmx5IGluIGNhc2VzIG9mIGNvbWJvIGF0dHJpYnV0ZXNcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0b3JlIC0gaWYgc2V0IHRvIHRydWUgdGhlIGZpcnN0IEluY2lkZW50IHRvIGJlIGVkaXRlZCBzdG9yZXMgdGhlXG4gKiAgICAgIGluaXRpYWwgdmFsdWVzIGFzIGl0cyBwdXJlSW5pdGlhbFZhbHVlc1xuICoqL1xuXG5cbmZ1bmN0aW9uIHNldEluaXRpYWxWYWx1ZShsYW5lLCBpbmNpZGVudHNCeUlkLCBuZXdJbml0aWFsVmFsdWVzLCBhZmZlY3RlZEluZGV4KSB7XG4gIHZhciBzdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG4gIHZhciBhZmZlY3RlZEl0ZW0gPSBsYW5lW2FmZmVjdGVkSW5kZXhdO1xuXG4gIHZhciBhZmZlY3RlZEluY2lkZW50ID0gaW5jaWRlbnRzQnlJZC5fZ2V0KGFmZmVjdGVkSXRlbS5pZCk7XG5cbiAgYWZmZWN0ZWRJbmNpZGVudC5zZXRJbml0aWFsVmFsdWUobmV3SW5pdGlhbFZhbHVlcywgc3RvcmUpO1xuICB2YXIgY2hhbmdlID0gdXBkYXRlRmluYWxWYWx1ZXMoYWZmZWN0ZWRJbmNpZGVudCwgYWZmZWN0ZWRJbmNpZGVudC5pbml0aWFsVmFsdWUsIGFmZmVjdGVkSW5jaWRlbnQub3JpZ2luYWxBbmltYXRlZEF0dHJpYnV0ZVZhbHVlLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFmZmVjdGVkSW5jaWRlbnQuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSkpKTsgLy8vIGlmIHRoZSBmaW5hbCB2YWx1ZXMgaGF2ZSBjaGFuZ2VkIGFjY29yZGluZyB0byB0aGUgbmV3IGluaXRpYWwgdmFsdWVzIGFuZCB0aGVyZSBpc1xuICAvLyBhIGZvbGxvd2luZyBpbmNpZGVudCBvbiB0aGUgbGFuZVxuXG4gIGlmIChjaGFuZ2UpIHtcbiAgICBhZmZlY3RlZEluY2lkZW50Lmxhc3RXaXNoKCk7XG4gICAgYWZmZWN0ZWRJbmNpZGVudC5vbkdldENvbnRleHQoKTtcbiAgfVxuXG4gIGlmIChjaGFuZ2UgJiYgYWZmZWN0ZWRJbmRleCA8IGxhbmUubGVuZ3RoIC0gMSkge1xuICAgIHNldEluaXRpYWxWYWx1ZShsYW5lLCBpbmNpZGVudHNCeUlkLCBhZmZlY3RlZEluY2lkZW50LmFuaW1hdGVkQXR0cmlidXRlVmFsdWUsIGFmZmVjdGVkSW5kZXggKyAxLCBmYWxzZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbml0aWFsVmFsdWU7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * The goal of this class is to get an original array, provide all the functionality\n * of the Collection class but by keeping the originalArray clean as it was provided.\n */\nvar SandboxCollection =\n/*#__PURE__*/\nfunction () {\n  function SandboxCollection(originalArray) {\n    _classCallCheck(this, SandboxCollection);\n\n    this.originalArray = originalArray;\n    this.extraArray = {};\n    this.addedKeys = [];\n    this.removedKeys = [];\n  }\n\n  _createClass(SandboxCollection, [{\n    key: \"_hasOwnProperty\",\n    value: function _hasOwnProperty(key) {\n      return Object.prototype.hasOwnProperty.call(this.originalArray, key) || Object.prototype.hasOwnProperty.call(this.extraArray, key);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        this.extraArray[key] = Object.assign({}, this.originalArray[key]);\n        return this.extraArray[key];\n      }\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(key, value) {\n      this.extraArray[key] = value;\n\n      if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        this.addedKeys.push(key);\n      }\n\n      var indexOnRemovedKeys = this.removedKeys.indexOf(key);\n\n      if (indexOnRemovedKeys > -1) {\n        this.removedKeys.splice(indexOnRemovedKeys, 1);\n      }\n    }\n  }, {\n    key: \"_keys\",\n    value: function _keys() {\n      var allKeys = Object.keys(this.originalArray).concat(this.addedKeys);\n\n      for (var i = 0; i < this.removedKeys.length; i++) {\n        var indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);\n        allKeys.splice(indexOnArray, 1);\n      }\n\n      return allKeys;\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key) {\n      var indexOnAddedKeys = this.addedKeys.indexOf(key);\n\n      if (indexOnAddedKeys > -1) {\n        this.addedKeys.splice(indexOnAddedKeys);\n        return delete this.extraArray[key];\n      } else {\n        return this.removedKeys.push(key);\n      }\n    }\n  }, {\n    key: \"_export\",\n    value: function _export() {\n      for (var key in this.extraArray) {\n        this.originalArray[key] = this.extraArray[key];\n      }\n\n      for (var i = 0; i < this.removedKeys.length; i++) {\n        delete this.originalArray[this.removedKeys[i]];\n      }\n\n      return this.originalArray;\n    }\n  }]);\n\n  return SandboxCollection;\n}();\n\nmodule.exports = SandboxCollection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hDb2xsZWN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94Q29sbGVjdGlvbi5qcz81MWZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qKlxuICogVGhlIGdvYWwgb2YgdGhpcyBjbGFzcyBpcyB0byBnZXQgYW4gb3JpZ2luYWwgYXJyYXksIHByb3ZpZGUgYWxsIHRoZSBmdW5jdGlvbmFsaXR5XG4gKiBvZiB0aGUgQ29sbGVjdGlvbiBjbGFzcyBidXQgYnkga2VlcGluZyB0aGUgb3JpZ2luYWxBcnJheSBjbGVhbiBhcyBpdCB3YXMgcHJvdmlkZWQuXG4gKi9cbnZhciBTYW5kYm94Q29sbGVjdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNhbmRib3hDb2xsZWN0aW9uKG9yaWdpbmFsQXJyYXkpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FuZGJveENvbGxlY3Rpb24pO1xuXG4gICAgdGhpcy5vcmlnaW5hbEFycmF5ID0gb3JpZ2luYWxBcnJheTtcbiAgICB0aGlzLmV4dHJhQXJyYXkgPSB7fTtcbiAgICB0aGlzLmFkZGVkS2V5cyA9IFtdO1xuICAgIHRoaXMucmVtb3ZlZEtleXMgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTYW5kYm94Q29sbGVjdGlvbiwgW3tcbiAgICBrZXk6IFwiX2hhc093blByb3BlcnR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYXNPd25Qcm9wZXJ0eShrZXkpIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5vcmlnaW5hbEFycmF5LCBrZXkpIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmV4dHJhQXJyYXksIGtleSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYUFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcmlnaW5hbEFycmF5W2tleV0pO1xuICAgICAgICByZXR1cm4gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldChrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmV4dHJhQXJyYXlba2V5XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgdGhpcy5hZGRlZEtleXMucHVzaChrZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXhPblJlbW92ZWRLZXlzID0gdGhpcy5yZW1vdmVkS2V5cy5pbmRleE9mKGtleSk7XG5cbiAgICAgIGlmIChpbmRleE9uUmVtb3ZlZEtleXMgPiAtMSkge1xuICAgICAgICB0aGlzLnJlbW92ZWRLZXlzLnNwbGljZShpbmRleE9uUmVtb3ZlZEtleXMsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfa2V5c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfa2V5cygpIHtcbiAgICAgIHZhciBhbGxLZXlzID0gT2JqZWN0LmtleXModGhpcy5vcmlnaW5hbEFycmF5KS5jb25jYXQodGhpcy5hZGRlZEtleXMpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVtb3ZlZEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGluZGV4T25BcnJheSA9IHRoaXMucmVtb3ZlZEtleXMuaW5kZXhPZih0aGlzLnJlbW92ZWRLZXlzW2ldKTtcbiAgICAgICAgYWxsS2V5cy5zcGxpY2UoaW5kZXhPbkFycmF5LCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFsbEtleXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9kZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBpbmRleE9uQWRkZWRLZXlzID0gdGhpcy5hZGRlZEtleXMuaW5kZXhPZihrZXkpO1xuXG4gICAgICBpZiAoaW5kZXhPbkFkZGVkS2V5cyA+IC0xKSB7XG4gICAgICAgIHRoaXMuYWRkZWRLZXlzLnNwbGljZShpbmRleE9uQWRkZWRLZXlzKTtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2V4cG9ydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXhwb3J0KCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZXh0cmFBcnJheSkge1xuICAgICAgICB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XSA9IHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVtb3ZlZEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVsZXRlIHRoaXMub3JpZ2luYWxBcnJheVt0aGlzLnJlbW92ZWRLZXlzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxBcnJheTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2FuZGJveENvbGxlY3Rpb247XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2FuZGJveENvbGxlY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxIncidentsById =\n/*#__PURE__*/\nfunction (_SandboxCollection) {\n  _inherits(SandboxIncidentsById, _SandboxCollection);\n\n  function SandboxIncidentsById() {\n    _classCallCheck(this, SandboxIncidentsById);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SandboxIncidentsById).apply(this, arguments));\n  }\n\n  _createClass(SandboxIncidentsById, [{\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        return this.originalArray[key];\n      }\n    }\n  }]);\n\n  return SandboxIncidentsById;\n}(SandboxCollection);\n\nmodule.exports = SandboxIncidentsById;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hJbmNpZGVudHNCeUlkLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94SW5jaWRlbnRzQnlJZC5qcz9iZTAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIFNhbmRib3hDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9TYW5kYm94Q29sbGVjdGlvbicpO1xuXG52YXIgU2FuZGJveEluY2lkZW50c0J5SWQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TYW5kYm94Q29sbGVjdGlvbikge1xuICBfaW5oZXJpdHMoU2FuZGJveEluY2lkZW50c0J5SWQsIF9TYW5kYm94Q29sbGVjdGlvbik7XG5cbiAgZnVuY3Rpb24gU2FuZGJveEluY2lkZW50c0J5SWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNhbmRib3hJbmNpZGVudHNCeUlkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2FuZGJveEluY2lkZW50c0J5SWQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNhbmRib3hJbmNpZGVudHNCeUlkLCBbe1xuICAgIGtleTogXCJfZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXQoa2V5KSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXh0cmFBcnJheSwga2V5KSkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5vcmlnaW5hbEFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbEFycmF5W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNhbmRib3hJbmNpZGVudHNCeUlkO1xufShTYW5kYm94Q29sbGVjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gU2FuZGJveEluY2lkZW50c0J5SWQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxLanes =\n/*#__PURE__*/\nfunction (_SandboxCollection) {\n  _inherits(SandboxLanes, _SandboxCollection);\n\n  function SandboxLanes() {\n    _classCallCheck(this, SandboxLanes);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SandboxLanes).apply(this, arguments));\n  }\n\n  _createClass(SandboxLanes, [{\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        this.extraArray[key] = [];\n\n        for (var i = 0; i < this.originalArray[key].length; i++) {\n          this.extraArray[key].push({\n            id: this.originalArray[key][i].id,\n            // incident: this.originalArray[key][i].incident,\n            millisecond: this.originalArray[key][i].millisecond * 1\n          });\n        }\n\n        return this.extraArray[key];\n      }\n    }\n  }]);\n\n  return SandboxLanes;\n}(SandboxCollection);\n\nmodule.exports = SandboxLanes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hMYW5lcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2hhbm5lbHMvQXR0cmlidXRlL2hlbHBlcnMvU2FuZGJveExhbmVzLmpzPzdmZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgU2FuZGJveENvbGxlY3Rpb24gPSByZXF1aXJlKCcuL1NhbmRib3hDb2xsZWN0aW9uJyk7XG5cbnZhciBTYW5kYm94TGFuZXMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TYW5kYm94Q29sbGVjdGlvbikge1xuICBfaW5oZXJpdHMoU2FuZGJveExhbmVzLCBfU2FuZGJveENvbGxlY3Rpb24pO1xuXG4gIGZ1bmN0aW9uIFNhbmRib3hMYW5lcygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FuZGJveExhbmVzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2FuZGJveExhbmVzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTYW5kYm94TGFuZXMsIFt7XG4gICAga2V5OiBcIl9nZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYUFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLmlkLFxuICAgICAgICAgICAgLy8gaW5jaWRlbnQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLmluY2lkZW50LFxuICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLm1pbGxpc2Vjb25kICogMVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTYW5kYm94TGFuZXM7XG59KFNhbmRib3hDb2xsZWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTYW5kYm94TGFuZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel =\n/*#__PURE__*/\nfunction () {\n  function Channel(props) {\n    _classCallCheck(this, Channel);\n\n    this.runTimeInfo = props.runTimeInfo;\n    this.context = props.context;\n    this.onInitialise();\n    this.getIncidentById = props.getIncidentById; // this.type = \"plain\";\n  }\n\n  _createClass(Channel, [{\n    key: \"onInitialise\",\n    value: function onInitialise() {}\n  }, {\n    key: \"_resize\",\n    value: function _resize() {\n      helper.log('Please overwite the _resize method of the Channel');\n    }\n    /**\n     * @param {array} incidents - A collection of Incidents in the form:\n     * {\n     *  millisecond\n     *  incident\n     *  id\n     * }\n     * @returns either:\n     *   {\n     *       result:true,\n     *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n     *   }\n     *   or\n     *   {\n     *       result: false,\n     *       errors\n     *   }\n     */\n\n  }, {\n    key: \"addIncidents\",\n    value: function addIncidents(incidents) {\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkAddition(incidents);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n     * that apply the change\n     * @param {array} incidents - the list of the incidents to edit in an array format [object, object, ...]\n     * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n     * @returns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"editIncidents\",\n    value: function editIncidents(incidents, millisecondsDelta) {\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkEdit(incidents, millisecondsDelta);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * Method to remove incidents\n     * @param {array} incidents - the ids of the incidents to remove in an array format\n     * @param {object} props\n     * @retuns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"removeIncidents\",\n    value: function removeIncidents(incidents) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkDelete(incidents, props);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * This method is invoked whenever a CASI (the owner of the Channel) enters\n     * the tree of another clip, so the scratch values of all first Incidents of\n     * each channel should be recalculated based on the context. All Channels\n     * that extend Channel can rewrite this method accordingly\n     * @param {string} contextId - The id of the context of the Clip Copy according to which\n     *      we are going to recalc the scratch values\n     **/\n\n  }, {\n    key: \"recalcScratchValues\",\n    value: function recalcScratchValues(contextId) {}\n    /**\n     * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n     * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n     *  {\n            incident: // reference to the Incident object that has bee discarded\n            error: // text\n        }\n    * @param {array} incidents - a colleciton of all incidents to be added on the form:\n    *\n        {\n            id\n            millisecond\n            incident\n        }\n    * @returns {object} -\n    * either:\n        {\n            result:true,\n            execute: // a function that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidentsArray, millisecondsDelta) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentIds) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {} // eslint-disable-line no-unused-vars\n\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return \"plain\";\n    }\n  }]);\n\n  return Channel;\n}();\n\nmodule.exports = Channel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index.js */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar ClipChannel =\n/*#__PURE__*/\nfunction (_Channel) {\n  _inherits(ClipChannel, _Channel);\n\n  function ClipChannel() {\n    _classCallCheck(this, ClipChannel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClipChannel).apply(this, arguments));\n  }\n\n  _createClass(ClipChannel, [{\n    key: \"onInitialise\",\n\n    /*\n    this.incidents is a collection of {incident, id, millisecond} objects always kept in order\n        from lower to higher millisecond\n    this.incidetnsById is an index of the incidents kept by id (this.incidents[incident-id] = Incident)\n    */\n    value: function onInitialise() {\n      this.incidents = [];\n      this.incidentsById = {};\n    }\n  }, {\n    key: \"_incidentById\",\n    value: function _incidentById(id) {\n      return this.incidentsById[id];\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      for (var i = 0; i < this.incidents.length; i++) {\n        this.incidents[i].millisecond = this.incidents[i].millisecond * durationFraction;\n      }\n    }\n    /**\n    * @param {array} incidents - a colleciton of all incidents to be added on the form:\n    *\n        {\n            id\n            millisecond\n            incident\n        }\n    * @returns {object} -\n    * either:\n        {\n            result:true,\n            execute: // a function that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      var errors = [];\n      var candidateIncidentsById = {};\n      var incidentsToConcat = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        candidateIncidentsById[incidents[i].id] = incidents[i].incident;\n        incidentsToConcat.push({\n          id: incidents[i].id,\n          millisecond: incidents[i].millisecond\n        });\n\n        if (Object.prototype.hasOwnProperty.call(this.incidentsById, incidents[i].id)) {\n          helper.error(\"Incident with the id \".concat(incidents[i].id, \" already exists. Addition is rejected.\"));\n          errors.push({\n            type: 'Already existing id',\n            meta: {\n              id: incidents[i].id\n            }\n          });\n        }\n      }\n\n      if (errors.length > 0) {\n        return {\n          result: false,\n          errors: errors\n        };\n      }\n\n      var that = this;\n\n      var exec = function exec() {\n        that.incidentsById = Object.assign(that.incidentsById, candidateIncidentsById);\n        that.incidents = that.incidents.concat(incidentsToConcat);\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n\n        for (var _i = 0; _i < incidents.length; _i++) {\n          that._incidentById(incidents[_i].id)._onGetContextOnce(that.context);\n        }\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n    @param {array} incidentsArray - A collection of the Incidetns to get edited in the form:\n    {\n        id\n        millisecond\n        incident\n    }\n    @param {int} millisecondsDelta- the delta of the star point of the provided incidents\n    */\n\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidentsArray, millisecondsDelta) {\n      var that = this;\n\n      var exec = function exec() {\n        for (var i = 0; i < incidentsArray.length; i++) {\n          for (var j = 0; j < that.incidents.length; j++) {\n            if (that.incidents[j].id === incidentsArray[i].id) {\n              that.incidents[j].millisecond += millisecondsDelta;\n              break;\n            }\n          }\n        }\n\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentsArray) {\n      var that = this;\n      var incidentIds = [];\n\n      for (var i = 0; i < incidentsArray.length; i++) {\n        incidentIds.push(incidentsArray[i].id);\n      }\n\n      var exec = function exec() {\n        var newIncidents = _filter(that.incidents, function (incident) {\n          return incidentIds.indexOf(incident.id) === -1;\n        });\n\n        that.incidents = newIncidents;\n\n        for (var _i2 = 0; _i2 < incidentIds.length; _i2++) {\n          delete that.incidentsById[incidentIds[_i2]];\n        }\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     * @param {array} incidents - [{id, start, end, startDelta}]\n     */\n\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      var that = this;\n\n      var exec = function exec() {\n        for (var i = 0; i < incidents.length; i++) {\n          for (var j = 0; j < that.incidents.length; j++) {\n            if (that.incidents[j].id === incidents[i].id) {\n              that.incidents[j].millisecond += incidents[i].startDelta;\n              break;\n            }\n          }\n        }\n\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {string} contextId - the context id to move\n     @param {boolean} forceReset - set to true when we want full flash\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (forceReset === true) {\n        // incidents: [{id, millisecond}, {}, {}...]\n        for (var i = 0; i < this.incidents.length; i++) {\n          var laneItem = this.incidents[i];\n\n          var incident = this._incidentById(laneItem.id);\n\n          if (to < laneItem.millisecond) {\n            incident.onProgress(0, 0, contextId, true);\n          } else if (to > laneItem.millisecond + incident.duration) {\n            incident.onProgress(1, incident.duration, contextId, true);\n          } else {\n            incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n          }\n        }\n      } else {\n        var that = this;\n        var participatingItems;\n\n        if (to > from) {\n          participatingItems = _filter(this.incidents, function (laneItem) {\n            return laneItem.millisecond + that._incidentById(laneItem.id).duration >= from && laneItem.millisecond + that._incidentById(laneItem.id).duration <= to || // it ends after from and before to millisecond\n            that._incidentById(laneItem.id).duration + laneItem.millisecond >= to && laneItem.millisecond <= to; // or it ends after the target millisecond but also starts before it\n          });\n        } else {\n          participatingItems = _filter(this.incidents, function (laneItem) {\n            return laneItem.millisecond + that._incidentById(laneItem.id).duration >= to && laneItem.millisecond + that._incidentById(laneItem.id).duration <= from || // it ends after from and before to millisecond\n            that._incidentById(laneItem.id).duration + laneItem.millisecond >= from && laneItem.millisecond <= from; // or it ends after the target millisecond but also starts before it\n          });\n        }\n\n        for (var _i3 = 0; _i3 < participatingItems.length; _i3++) {\n          var _laneItem = participatingItems[_i3];\n\n          var contextAwareClipIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n          var overcameEnd = (to - _laneItem.millisecond) / contextAwareClipIncident.duration >= 1;\n          var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / contextAwareClipIncident.duration;\n          var millisecond = overcameEnd ? contextAwareClipIncident.duration : to - _laneItem.millisecond;\n          contextAwareClipIncident.onProgress(fraction, millisecond, contextId, false);\n        }\n      } // this.runTimeInfo.currentMillisecond = to;\n\n    }\n  }]);\n\n  return ClipChannel;\n}(Channel);\n\nmodule.exports = ClipChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClipsChannel = __webpack_require__(/*! ../Clip/ClipsChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar dataSeparator = \"|||\";\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioPlaybackChannel =\n/*#__PURE__*/\nfunction (_ClipsChannel) {\n  _inherits(AudioPlaybackChannel, _ClipsChannel);\n\n  function AudioPlaybackChannel(props) {\n    var _this;\n\n    _classCallCheck(this, AudioPlaybackChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioPlaybackChannel).call(this, props)); // keeps the list of the ids of MediaIncidents that are currently been played\n    // in the form `${id}|||$[contextId}`\n\n    _this.playingIncidentsIds = []; // when the Channel's Clip enters the transitional state the Channel ignores\n    // moveTos. When the transition ends though, no matter the currentMillisecond\n    // its Clip was it should recalc which sources to play as if we were going from\n    // 0 to the the target millisecond because of the different way the Playback operates\n    // (it has no onProgress). For this, it's very important to store the information\n    // that it entered the transitional state so on the next playing state moveTo\n    // to force as from ms 0.\n\n    _this.transitioned = false;\n    props.subscribe(helper.getAnId(), _this._stateChange.bind(_assertThisInitialized(_this)), 0, 1, true);\n    return _this;\n  }\n\n  _createClass(AudioPlaybackChannel, [{\n    key: \"_stateChange\",\n    value: function _stateChange(ms, state) {\n      if (state === \"paused\" || state === \"idle\" || state === \"blocked\") {\n        this._stopPlayingIncidents();\n\n        this.transitioned = true;\n      }\n    }\n  }, {\n    key: \"_stopPlayingIncidents\",\n    value: function _stopPlayingIncidents() {\n      for (var i = 0; i < this.playingIncidentsIds.length; i++) {\n        var incidentInfo = this.playingIncidentsIds[i].split(dataSeparator);\n\n        this._incidentById(incidentInfo[0]).stop(incidentInfo[1]);\n      }\n\n      this.playingIncidentsIds = [];\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {string} contextId - the context id to move\n     @param {boolean} forceReset - set to true when we want full flash\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (this.runTimeInfo.state === 'transitional' || forceReset === true) {\n        this.transitioned = true;\n\n        this._stopPlayingIncidents();\n\n        for (var i = 0; i < this.incidents.length; i++) {\n          var laneItem = this.incidents[i];\n\n          var incident = this._incidentById(laneItem.id);\n\n          if (to < laneItem.millisecond) {\n            incident.onProgress(0, 0, contextId, true);\n          } else if (to > laneItem.millisecond + incident.duration) {\n            incident.onProgress(1, incident.duration, contextId, true);\n          } else {\n            incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n          }\n        }\n\n        return;\n      } else {\n        if (this.transitioned === true) {\n          from = 0;\n          this.transitioned = false;\n        }\n      }\n\n      var that = this;\n\n      var startingAnims = _filter(this.incidents, function (laneItem) {\n        return laneItem.millisecond >= from && laneItem.millisecond < to && laneItem.millisecond + that._incidentById(laneItem.id).duration > to;\n      });\n\n      var finishingAnims = _filter(this.incidents, function (laneItem) {\n        return that._incidentById(laneItem.id).duration + laneItem.millisecond > from && that._incidentById(laneItem.id).duration + laneItem.millisecond <= to; // or it ends after the target millisecond but also starts before it\n      }); //console.log(this._incidentById);\n      // console.log(from, to);\n      // console.log(startingAnims);\n      // console.log(finishingAnims);\n\n\n      for (var _i = 0; _i < startingAnims.length; _i++) {\n        var _laneItem = startingAnims[_i];\n\n        var MediaIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n        var overcameEnd = (to - _laneItem.millisecond) / MediaIncident.duration >= 1;\n        var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / MediaIncident.duration;\n        var millisecond = overcameEnd ? MediaIncident.duration : to - _laneItem.millisecond;\n        var startAttempt = MediaIncident.play(fraction, millisecond, contextId);\n\n        if (startAttempt === true) {\n          this.playingIncidentsIds.push(\"\".concat(_laneItem.id).concat(dataSeparator).concat(contextId));\n        }\n      }\n\n      for (var _i2 = 0; _i2 < finishingAnims.length; _i2++) {\n        var _laneItem2 = finishingAnims[_i2];\n\n        var _MediaIncident = this._incidentById(_laneItem2.id);\n\n        _MediaIncident.stop(contextId);\n\n        var index = this.playingIncidentsIds.indexOf(\"\".concat(_laneItem2.id).concat(dataSeparator).concat(contextId));\n\n        if (index > -1) {\n          this.playingIncidentsIds.splice(index, 1);\n        }\n      }\n\n      this.runTimeInfo.currentMillisecond = to;\n    }\n  }]);\n\n  return AudioPlaybackChannel;\n}(ClipsChannel);\n\nmodule.exports = AudioPlaybackChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL01lZGlhL0F1ZGlvUGxheWJhY2tDaGFubmVsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9NZWRpYS9BdWRpb1BsYXliYWNrQ2hhbm5lbC5qcz84MmM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIENsaXBzQ2hhbm5lbCA9IHJlcXVpcmUoJy4uL0NsaXAvQ2xpcHNDaGFubmVsJyk7XG5cbnZhciBfZmlsdGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vbG9kYXNoLWN1c3RvbS1idWlsZC9tb2R1bGFyaXplL2xvZGFzaC5maWx0ZXIvaW5kZXguanMnKTtcblxudmFyIGRhdGFTZXBhcmF0b3IgPSBcInx8fFwiO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIEF1ZGlvUGxheWJhY2tDaGFubmVsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ2xpcHNDaGFubmVsKSB7XG4gIF9pbmhlcml0cyhBdWRpb1BsYXliYWNrQ2hhbm5lbCwgX0NsaXBzQ2hhbm5lbCk7XG5cbiAgZnVuY3Rpb24gQXVkaW9QbGF5YmFja0NoYW5uZWwocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXVkaW9QbGF5YmFja0NoYW5uZWwpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXVkaW9QbGF5YmFja0NoYW5uZWwpLmNhbGwodGhpcywgcHJvcHMpKTsgLy8ga2VlcHMgdGhlIGxpc3Qgb2YgdGhlIGlkcyBvZiBNZWRpYUluY2lkZW50cyB0aGF0IGFyZSBjdXJyZW50bHkgYmVlbiBwbGF5ZWRcbiAgICAvLyBpbiB0aGUgZm9ybSBgJHtpZH18fHwkW2NvbnRleHRJZH1gXG5cbiAgICBfdGhpcy5wbGF5aW5nSW5jaWRlbnRzSWRzID0gW107IC8vIHdoZW4gdGhlIENoYW5uZWwncyBDbGlwIGVudGVycyB0aGUgdHJhbnNpdGlvbmFsIHN0YXRlIHRoZSBDaGFubmVsIGlnbm9yZXNcbiAgICAvLyBtb3ZlVG9zLiBXaGVuIHRoZSB0cmFuc2l0aW9uIGVuZHMgdGhvdWdoLCBubyBtYXR0ZXIgdGhlIGN1cnJlbnRNaWxsaXNlY29uZFxuICAgIC8vIGl0cyBDbGlwIHdhcyBpdCBzaG91bGQgcmVjYWxjIHdoaWNoIHNvdXJjZXMgdG8gcGxheSBhcyBpZiB3ZSB3ZXJlIGdvaW5nIGZyb21cbiAgICAvLyAwIHRvIHRoZSB0aGUgdGFyZ2V0IG1pbGxpc2Vjb25kIGJlY2F1c2Ugb2YgdGhlIGRpZmZlcmVudCB3YXkgdGhlIFBsYXliYWNrIG9wZXJhdGVzXG4gICAgLy8gKGl0IGhhcyBubyBvblByb2dyZXNzKS4gRm9yIHRoaXMsIGl0J3MgdmVyeSBpbXBvcnRhbnQgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uXG4gICAgLy8gdGhhdCBpdCBlbnRlcmVkIHRoZSB0cmFuc2l0aW9uYWwgc3RhdGUgc28gb24gdGhlIG5leHQgcGxheWluZyBzdGF0ZSBtb3ZlVG9cbiAgICAvLyB0byBmb3JjZSBhcyBmcm9tIG1zIDAuXG5cbiAgICBfdGhpcy50cmFuc2l0aW9uZWQgPSBmYWxzZTtcbiAgICBwcm9wcy5zdWJzY3JpYmUoaGVscGVyLmdldEFuSWQoKSwgX3RoaXMuX3N0YXRlQ2hhbmdlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCAwLCAxLCB0cnVlKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXVkaW9QbGF5YmFja0NoYW5uZWwsIFt7XG4gICAga2V5OiBcIl9zdGF0ZUNoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RhdGVDaGFuZ2UobXMsIHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IFwicGF1c2VkXCIgfHwgc3RhdGUgPT09IFwiaWRsZVwiIHx8IHN0YXRlID09PSBcImJsb2NrZWRcIikge1xuICAgICAgICB0aGlzLl9zdG9wUGxheWluZ0luY2lkZW50cygpO1xuXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3N0b3BQbGF5aW5nSW5jaWRlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdG9wUGxheWluZ0luY2lkZW50cygpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wbGF5aW5nSW5jaWRlbnRzSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbmNpZGVudEluZm8gPSB0aGlzLnBsYXlpbmdJbmNpZGVudHNJZHNbaV0uc3BsaXQoZGF0YVNlcGFyYXRvcik7XG5cbiAgICAgICAgdGhpcy5faW5jaWRlbnRCeUlkKGluY2lkZW50SW5mb1swXSkuc3RvcChpbmNpZGVudEluZm9bMV0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBsYXlpbmdJbmNpZGVudHNJZHMgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgIEBwYXJhbSB7aW50fSBmcm9tIC0gdGhlIG1pbGxpc2Vjb25kIHRvIHN0YXJ0IGZyb21cbiAgICAgQHBhcmFtIHtpbnR9IHRvIC0gdGhlIG1pbGxpc2Vjb25kIHRvIGdvIHRvXG4gICAgIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0SWQgLSB0aGUgY29udGV4dCBpZCB0byBtb3ZlXG4gICAgIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VSZXNldCAtIHNldCB0byB0cnVlIHdoZW4gd2Ugd2FudCBmdWxsIGZsYXNoXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtb3ZlVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRvKGZyb20sIHRvLCBjb250ZXh0SWQpIHtcbiAgICAgIHZhciBmb3JjZVJlc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMucnVuVGltZUluZm8uc3RhdGUgPT09ICd0cmFuc2l0aW9uYWwnIHx8IGZvcmNlUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX3N0b3BQbGF5aW5nSW5jaWRlbnRzKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmluY2lkZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBsYW5lSXRlbSA9IHRoaXMuaW5jaWRlbnRzW2ldO1xuXG4gICAgICAgICAgdmFyIGluY2lkZW50ID0gdGhpcy5faW5jaWRlbnRCeUlkKGxhbmVJdGVtLmlkKTtcblxuICAgICAgICAgIGlmICh0byA8IGxhbmVJdGVtLm1pbGxpc2Vjb25kKSB7XG4gICAgICAgICAgICBpbmNpZGVudC5vblByb2dyZXNzKDAsIDAsIGNvbnRleHRJZCwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0byA+IGxhbmVJdGVtLm1pbGxpc2Vjb25kICsgaW5jaWRlbnQuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIGluY2lkZW50Lm9uUHJvZ3Jlc3MoMSwgaW5jaWRlbnQuZHVyYXRpb24sIGNvbnRleHRJZCwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluY2lkZW50Lm9uUHJvZ3Jlc3MoKHRvIC0gbGFuZUl0ZW0ubWlsbGlzZWNvbmQpIC8gaW5jaWRlbnQuZHVyYXRpb24sIHRvIC0gbGFuZUl0ZW0ubWlsbGlzZWNvbmQsIGNvbnRleHRJZCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgdGhpcy50cmFuc2l0aW9uZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgIHZhciBzdGFydGluZ0FuaW1zID0gX2ZpbHRlcih0aGlzLmluY2lkZW50cywgZnVuY3Rpb24gKGxhbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiBsYW5lSXRlbS5taWxsaXNlY29uZCA+PSBmcm9tICYmIGxhbmVJdGVtLm1pbGxpc2Vjb25kIDwgdG8gJiYgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgKyB0aGF0Ll9pbmNpZGVudEJ5SWQobGFuZUl0ZW0uaWQpLmR1cmF0aW9uID4gdG87XG4gICAgICB9KTtcblxuICAgICAgdmFyIGZpbmlzaGluZ0FuaW1zID0gX2ZpbHRlcih0aGlzLmluY2lkZW50cywgZnVuY3Rpb24gKGxhbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGF0Ll9pbmNpZGVudEJ5SWQobGFuZUl0ZW0uaWQpLmR1cmF0aW9uICsgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgPiBmcm9tICYmIHRoYXQuX2luY2lkZW50QnlJZChsYW5lSXRlbS5pZCkuZHVyYXRpb24gKyBsYW5lSXRlbS5taWxsaXNlY29uZCA8PSB0bzsgLy8gb3IgaXQgZW5kcyBhZnRlciB0aGUgdGFyZ2V0IG1pbGxpc2Vjb25kIGJ1dCBhbHNvIHN0YXJ0cyBiZWZvcmUgaXRcbiAgICAgIH0pOyAvL2NvbnNvbGUubG9nKHRoaXMuX2luY2lkZW50QnlJZCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhmcm9tLCB0byk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhzdGFydGluZ0FuaW1zKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGZpbmlzaGluZ0FuaW1zKTtcblxuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc3RhcnRpbmdBbmltcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIF9sYW5lSXRlbSA9IHN0YXJ0aW5nQW5pbXNbX2ldO1xuXG4gICAgICAgIHZhciBNZWRpYUluY2lkZW50ID0gdGhpcy5faW5jaWRlbnRCeUlkKF9sYW5lSXRlbS5pZCk7IC8vIG9uUHJvZ3Jlc3MoZnJhY3Rpb24sIG1pbGxpc2Vjb25kcywgY29udGV4dElkLCBmb3JjZVJlc2V0ID0gZmFsc2UpIHtcblxuXG4gICAgICAgIHZhciBvdmVyY2FtZUVuZCA9ICh0byAtIF9sYW5lSXRlbS5taWxsaXNlY29uZCkgLyBNZWRpYUluY2lkZW50LmR1cmF0aW9uID49IDE7XG4gICAgICAgIHZhciBmcmFjdGlvbiA9IG92ZXJjYW1lRW5kID8gMSA6ICh0byAtIF9sYW5lSXRlbS5taWxsaXNlY29uZCkgLyBNZWRpYUluY2lkZW50LmR1cmF0aW9uO1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmQgPSBvdmVyY2FtZUVuZCA/IE1lZGlhSW5jaWRlbnQuZHVyYXRpb24gOiB0byAtIF9sYW5lSXRlbS5taWxsaXNlY29uZDtcbiAgICAgICAgdmFyIHN0YXJ0QXR0ZW1wdCA9IE1lZGlhSW5jaWRlbnQucGxheShmcmFjdGlvbiwgbWlsbGlzZWNvbmQsIGNvbnRleHRJZCk7XG5cbiAgICAgICAgaWYgKHN0YXJ0QXR0ZW1wdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMucGxheWluZ0luY2lkZW50c0lkcy5wdXNoKFwiXCIuY29uY2F0KF9sYW5lSXRlbS5pZCkuY29uY2F0KGRhdGFTZXBhcmF0b3IpLmNvbmNhdChjb250ZXh0SWQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBmaW5pc2hpbmdBbmltcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBfbGFuZUl0ZW0yID0gZmluaXNoaW5nQW5pbXNbX2kyXTtcblxuICAgICAgICB2YXIgX01lZGlhSW5jaWRlbnQgPSB0aGlzLl9pbmNpZGVudEJ5SWQoX2xhbmVJdGVtMi5pZCk7XG5cbiAgICAgICAgX01lZGlhSW5jaWRlbnQuc3RvcChjb250ZXh0SWQpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMucGxheWluZ0luY2lkZW50c0lkcy5pbmRleE9mKFwiXCIuY29uY2F0KF9sYW5lSXRlbTIuaWQpLmNvbmNhdChkYXRhU2VwYXJhdG9yKS5jb25jYXQoY29udGV4dElkKSk7XG5cbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICB0aGlzLnBsYXlpbmdJbmNpZGVudHNJZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1blRpbWVJbmZvLmN1cnJlbnRNaWxsaXNlY29uZCA9IHRvO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb1BsYXliYWNrQ2hhbm5lbDtcbn0oQ2xpcHNDaGFubmVsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdWRpb1BsYXliYWNrQ2hhbm5lbDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MonoIncident = __webpack_require__(/*! ../BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ClipCopy =\n/*#__PURE__*/\nfunction (_MonoIncident) {\n  _inherits(ClipCopy, _MonoIncident);\n\n  function ClipCopy(attrs, props, dna) {\n    var _this;\n\n    _classCallCheck(this, ClipCopy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClipCopy).call(this, attrs, props, dna));\n    _this.runTimeInfo = {\n      currentMillisecond: 0\n    };\n    return _this;\n  }\n\n  _createClass(ClipCopy, [{\n    key: \"lastWish\",\n    value: function lastWish() {\n      this.ownClip.ownContext.unmount();\n    }\n  }, {\n    key: \"onGetContext\",\n    value: function onGetContext() {\n      // In order to render itself on the given element first it needs the props (including html and css)\n      // from the real Clip it copies\n      var constructionArgs = this.DescriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n      var host = helper.getElementByMCID(this.context, this.mcid);\n\n      var hostedProps = _objectSpread({}, constructionArgs.props, {\n        selector: undefined,\n        host: host\n      }); // we create a clip because Clips on creation render and thus have their own context\n      // this.dna.descriptiveIncident.constructor.Incident keeps a reference to the non-audio real Clip\n      // Class. No audio is involved on this process\n\n\n      this.ownClip = new this.DescriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps);\n      this.ownClip.DescriptiveIncident = this.DescriptiveIncident;\n      this.ownClip.contextLoaded = this.contextLoaded; // console.log(this.ownClip);\n      // flushes the realClip with its ownClip's context\n\n      this.DescriptiveIncident.realClip.addContext({\n        clipId: this.id,\n        context: this.ownClip.ownContext\n      }, true); // even though we have created an own clip, we have made no checks at all neither\n      // we added the incidents of the real clip to it. That is becuase playing and moving\n      // this clip copy means directly moving the real clip on the context of the own clip.\n      // So the only thing we need here is the context and nothing more.\n\n      this.contextReady = true;\n    }\n  }, {\n    key: \"contextLoaded\",\n    value: function contextLoaded() {\n      this.contextReady = true;\n      this.unblock();\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (this.ownClip.ownContext.loading === true) {\n        this.setBlock();\n        return;\n      }\n\n      for (var key in this.DescriptiveIncident.realClip.instantiatedChannels) {\n        var channel = this.DescriptiveIncident.realClip.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);\n      }\n\n      this.runTimeInfo.currentMillisecond = milliseconds;\n      this.ownClip.onAfterProgress(fraction, milliseconds);\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return this.DescriptiveIncident.realClip.duration;\n    },\n    set: function set(milliseconds) {\n      this.DescriptiveIncident.realClip._resize(milliseconds / this.realClip.duration);\n    }\n  }]);\n\n  return ClipCopy;\n}(MonoIncident);\n\nmodule.exports = ClipCopy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar conf = __webpack_require__(/*! ../_configuration/generalConf */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\"); // context handlers\n\n\nvar IframeContextHandler = __webpack_require__(/*! ./helpers/IframeContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js\");\n\nvar WebComponentContextHandler = __webpack_require__(/*! ./helpers/WebComponentContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar Clip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(Clip, _ExtendableClip);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function Clip() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Clip);\n\n    var attrsToPass, propsToUse;\n    /*\n    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n    the new way of initialising a Group (only props).\n    */\n\n    if (oldProps === null) {\n      attrsToPass = {};\n      propsToUse = props;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = props;\n      propsToUse = oldProps;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clip).call(this, attrsToPass, propsToUse));\n    propsToUse = _objectSpread({}, propsToUse, {\n      html: _this.html != '' ? _this.html : propsToUse.html,\n      css: _this.css != '' ? _this.css : propsToUse.css,\n      fonts: _this.fonts.length > 0 ? _this.fonts : propsToUse.fonts\n    }); // that means the Clip is hosted or, in other words a host has been\n    // provided on the props (and not a selector)\n    // this.isHostedClip = true;\n\n    var clipType = conf.selfContainedContextHandler;\n    _this.clipType = clipType;\n    var ContextHanlder = null;\n\n    if (document.head.createShadowRoot || document.head.attachShadow) {\n      ContextHanlder = WebComponentContextHandler;\n    } else {\n      ContextHanlder = IframeContextHandler;\n    } // console.log(`this.id: ${this.id}, Class: ${this.constructor.name}, this.html: ${this.html}`)\n\n\n    var contextHanlder = new ContextHanlder(propsToUse);\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: _this.isHostedClip\n    });\n    _this.iframe = contextHanlder.iframeElement;\n    _this.forceExportIncidents = true;\n\n    _this.onAfterRender();\n\n    return _this;\n  }\n\n  _createClass(Clip, [{\n    key: \"onAfterRender\",\n    value: function onAfterRender() {// implement here\n    }\n  }, {\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      // TODO also export CSS and fonts taking in account the potential existance\n      // of them on the get methods\n      return {\n        attrs: this.attrs,\n        props: _objectSpread({}, this.props, {\n          host: undefined,\n          html: this.ownContext.rootElement.innerHTML\n        })\n      };\n    }\n  }, {\n    key: \"setCustomEntity\",\n    value: function setCustomEntity(id, entity) {\n      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return this.context.setCustomEntity(id, entity, classes);\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"fonts\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.ownContext.clipContainer;\n    }\n  }]);\n\n  return Clip;\n}(ExtendableClip);\n\nmodule.exports = Clip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvRE9NQ2xpcC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9ET01DbGlwLmpzPzI2MTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBjb25mID0gcmVxdWlyZSgnLi4vX2NvbmZpZ3VyYXRpb24vZ2VuZXJhbENvbmYnKTsgLy8gY29udGV4dCBoYW5kbGVyc1xuXG5cbnZhciBJZnJhbWVDb250ZXh0SGFuZGxlciA9IHJlcXVpcmUoJy4vaGVscGVycy9JZnJhbWVDb250ZXh0SGFuZGxlcicpO1xuXG52YXIgV2ViQ29tcG9uZW50Q29udGV4dEhhbmRsZXIgPSByZXF1aXJlKCcuL2hlbHBlcnMvV2ViQ29tcG9uZW50Q29udGV4dEhhbmRsZXInKTtcblxudmFyIEV4dGVuZGFibGVDbGlwID0gcmVxdWlyZSgnLi9FeHRlbmRhYmxlQ2xpcCcpO1xuXG52YXIgQ2xpcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0V4dGVuZGFibGVDbGlwKSB7XG4gIF9pbmhlcml0cyhDbGlwLCBfRXh0ZW5kYWJsZUNsaXApO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBhbiBvYmplY3QgdGhhdCBzaG91bGQgY29udGFpbiBhbGwgb2YgdGhlIGZvbGxvd2luZyBrZXlzOlxuICAgKiAtIGh0bWwgKHRoZSBodG1sIHRlbXBsYXRlIHRvIHJlbmRlcilcbiAgICogLSBjc3MgKHRoZSBjc3MgdGVtcGxhdGUgb2YgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gaW5pdFBhcmFtcyAob3B0aW9uYWwgLyB0aGUgaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBib3RoIG9uIHRoZSBjc3MgYW5kIHRoZSBodG1sIHRlbXBsYXRlcyBpbiBvcmRlciB0byByZW5kZXIpXG4gICAqIC0gaG9zdCAoYW4gRWxlbWVudCBvYmplY3QgdGhhdCB3aWxsIGhvc3QgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gY29udGFpbmVyUGFyYW1zIChhbiBvYmplY3QgdGhhdCBob2xkcyBwYXJhbWV0ZXJzIHRvIGFmZmVjdCB0aGUgY29udGFpbmVyIG9mIHRoZSBpc29sYXRlZCB0cmVlLCBlLmcuIHdpZHRoLCBoZWlnaHQgZXRjKVxuICAgKi9cbiAgZnVuY3Rpb24gQ2xpcCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBvbGRQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwKTtcblxuICAgIHZhciBhdHRyc1RvUGFzcywgcHJvcHNUb1VzZTtcbiAgICAvKlxuICAgIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBJZiB0aGUgdXNlciBkb2Vzbid0IHBhc3MgYSBzZWNvbmQgYXJndW1lbnQgb24gdGhlIGNvbnN0cnVjdG9yIHRoZW4gdGhpcyBpc1xuICAgIHRoZSBuZXcgd2F5IG9mIGluaXRpYWxpc2luZyBhIEdyb3VwIChvbmx5IHByb3BzKS5cbiAgICAqL1xuXG4gICAgaWYgKG9sZFByb3BzID09PSBudWxsKSB7XG4gICAgICBhdHRyc1RvUGFzcyA9IHt9O1xuICAgICAgcHJvcHNUb1VzZSA9IHByb3BzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbHNlLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBwYXNzZWQgdHdvIGFyZ3VtZW50cyB0aGVuIGJvdGggc2hvdWxkIGJlIHVzZWRcbiAgICAgIGF0dHJzVG9QYXNzID0gcHJvcHM7XG4gICAgICBwcm9wc1RvVXNlID0gb2xkUHJvcHM7XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ2xpcCkuY2FsbCh0aGlzLCBhdHRyc1RvUGFzcywgcHJvcHNUb1VzZSkpO1xuICAgIHByb3BzVG9Vc2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBwcm9wc1RvVXNlLCB7XG4gICAgICBodG1sOiBfdGhpcy5odG1sICE9ICcnID8gX3RoaXMuaHRtbCA6IHByb3BzVG9Vc2UuaHRtbCxcbiAgICAgIGNzczogX3RoaXMuY3NzICE9ICcnID8gX3RoaXMuY3NzIDogcHJvcHNUb1VzZS5jc3MsXG4gICAgICBmb250czogX3RoaXMuZm9udHMubGVuZ3RoID4gMCA/IF90aGlzLmZvbnRzIDogcHJvcHNUb1VzZS5mb250c1xuICAgIH0pOyAvLyB0aGF0IG1lYW5zIHRoZSBDbGlwIGlzIGhvc3RlZCBvciwgaW4gb3RoZXIgd29yZHMgYSBob3N0IGhhcyBiZWVuXG4gICAgLy8gcHJvdmlkZWQgb24gdGhlIHByb3BzIChhbmQgbm90IGEgc2VsZWN0b3IpXG4gICAgLy8gdGhpcy5pc0hvc3RlZENsaXAgPSB0cnVlO1xuXG4gICAgdmFyIGNsaXBUeXBlID0gY29uZi5zZWxmQ29udGFpbmVkQ29udGV4dEhhbmRsZXI7XG4gICAgX3RoaXMuY2xpcFR5cGUgPSBjbGlwVHlwZTtcbiAgICB2YXIgQ29udGV4dEhhbmxkZXIgPSBudWxsO1xuXG4gICAgaWYgKGRvY3VtZW50LmhlYWQuY3JlYXRlU2hhZG93Um9vdCB8fCBkb2N1bWVudC5oZWFkLmF0dGFjaFNoYWRvdykge1xuICAgICAgQ29udGV4dEhhbmxkZXIgPSBXZWJDb21wb25lbnRDb250ZXh0SGFuZGxlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29udGV4dEhhbmxkZXIgPSBJZnJhbWVDb250ZXh0SGFuZGxlcjtcbiAgICB9IC8vIGNvbnNvbGUubG9nKGB0aGlzLmlkOiAke3RoaXMuaWR9LCBDbGFzczogJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LCB0aGlzLmh0bWw6ICR7dGhpcy5odG1sfWApXG5cblxuICAgIHZhciBjb250ZXh0SGFubGRlciA9IG5ldyBDb250ZXh0SGFubGRlcihwcm9wc1RvVXNlKTtcbiAgICBfdGhpcy5vd25Db250ZXh0ID0gX29iamVjdFNwcmVhZCh7fSwgY29udGV4dEhhbmxkZXIuY29udGV4dCwge1xuICAgICAgaXNIb3N0ZWRDbGlwOiBfdGhpcy5pc0hvc3RlZENsaXBcbiAgICB9KTtcbiAgICBfdGhpcy5pZnJhbWUgPSBjb250ZXh0SGFubGRlci5pZnJhbWVFbGVtZW50O1xuICAgIF90aGlzLmZvcmNlRXhwb3J0SW5jaWRlbnRzID0gdHJ1ZTtcblxuICAgIF90aGlzLm9uQWZ0ZXJSZW5kZXIoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDbGlwLCBbe1xuICAgIGtleTogXCJvbkFmdGVyUmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWZ0ZXJSZW5kZXIoKSB7Ly8gaW1wbGVtZW50IGhlcmVcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXhwb3J0Q29uc3RydWN0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydENvbnN0cnVjdGlvbkFyZ3VtZW50cygpIHtcbiAgICAgIC8vIFRPRE8gYWxzbyBleHBvcnQgQ1NTIGFuZCBmb250cyB0YWtpbmcgaW4gYWNjb3VudCB0aGUgcG90ZW50aWFsIGV4aXN0YW5jZVxuICAgICAgLy8gb2YgdGhlbSBvbiB0aGUgZ2V0IG1ldGhvZHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF0dHJzOiB0aGlzLmF0dHJzLFxuICAgICAgICBwcm9wczogX29iamVjdFNwcmVhZCh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICAgIGhvc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICBodG1sOiB0aGlzLm93bkNvbnRleHQucm9vdEVsZW1lbnQuaW5uZXJIVE1MXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRDdXN0b21FbnRpdHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VzdG9tRW50aXR5KGlkLCBlbnRpdHkpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc2V0Q3VzdG9tRW50aXR5KGlkLCBlbnRpdHksIGNsYXNzZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJodG1sXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNzc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb250c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyb290RWxlbWVudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMub3duQ29udGV4dC5jbGlwQ29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwO1xufShFeHRlbmRhYmxlQ2xpcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar selfContainedIncidentsNpmName = '@kissmybutton/self-contained-incidents'; // TODO remove this\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar ExtendableClip =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(ExtendableClip, _Group);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   * - type (optional, defaults to \"iframe\") the type of the Clip. It can be one of the:\n   *  - iframe\n   *  - plain\n   */\n  function ExtendableClip(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, ExtendableClip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExtendableClip).call(this, attrs, props));\n    _this.attrs = attrs;\n    _this.props = props;\n    _this.isTheClip = true;\n    _this.blockingWaitings = {};\n    /**\n     * The cnannels attribute holds a list of all intantiated Channels of the Incidents belonging to the clip\n     * this attribute is only valuable when the Group becomes the Clip\n     * The format of the attribute is:\n     *  key-value pairs in the manner:\n     * <mc_plugin_npm_name>: Channel object\n     */\n\n    _this.instantiatedChannels = {};\n    _this.isHostedClip = true;\n    /**\n     * The instantiatedCopiesContexts is a key-value pairs colleciton holding the\n     * contexts of all instantiated ClipCopies\n     **/\n\n    _this.instantiatedCopiesContexts = {};\n\n    _this.onClipInitialise();\n\n    _this.runTimeInfo = _this.props.runTimeInfo;\n    _this.durationSubs = []; // the audioClip property defines wether the Clip is Audio or not. Defaults to false\n    // and should be overiten to true on Audio Clip\n\n    _this.audioClip = false;\n    _this.contextReady = true;\n    return _this;\n  }\n\n  _createClass(ExtendableClip, [{\n    key: \"onClipInitialise\",\n    value: function onClipInitialise() {// called when group gets initialised\n    }\n  }, {\n    key: \"contextLoading\",\n    value: function contextLoading() {\n      this.contextReady = false;\n    }\n  }, {\n    key: \"contextLoaded\",\n    value: function contextLoaded() {\n      this.contextReady = true;\n      this.unblock();\n    }\n    /**\n     * This method is been called when a new ClipCopy enters the real tree successfully.\n     * @param {object} contextData - keys: clipId, context\n     **/\n\n  }, {\n    key: \"addContext\",\n    value: function addContext(contextData) {\n      this.instantiatedCopiesContexts[contextData.clipId] = contextData.context;\n      contextData.instantiatedCopiesContexts = this.instantiatedCopiesContexts;\n      var res = this.putMessageOnPipe('addContext', contextData, {}, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      }); // if the added context is the first one to enter the realClip we must\n      // recalculate the scratch values of all of our first Incidents on our instantiatedChannels\n\n      if (Object.keys(this.instantiatedCopiesContexts).length === 1) {\n        // if it is the first one to be added\n        for (var key in this.instantiatedChannels) {\n          this.instantiatedChannels[key].recalcScratchValues(contextData.clipId);\n        } // also we store this non fragmented context on our context so it can be\n        // used on Incidents addition for calculating scratch values\n\n\n        this.context.nonFragmentedContext = contextData.context;\n      }\n\n      return res;\n    }\n    /*\n    ExtendableClip (as its name implies) is a Class that should be extended by\n    any specific kind of Clip, such as Fragmented or SCGroup. This method must\n    be overitten by the new Classes. This definition here is just for reference / help\n    purposes\n    */\n\n  }, {\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      return {\n        attrs: this.attrs,\n        props: this.props\n      };\n    }\n    /**\n     * completely resizes the Clip without any checks\n     */\n\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      for (var key in this.instantiatedChannels) {\n        this.instantiatedChannels[key]._resize(durationFraction);\n      }\n\n      this.setNewDuration(this.duration * durationFraction);\n\n      for (var i = 0; i < this.durationSubs.length; i++) {\n        this.durationSubs[i](this.duration);\n      }\n    }\n    /*********************************************************\n    Editing commands input methods\n    *********************************************************/\n\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  incident: the Descriptive Incident to be added\n     *  millisecond: the millisecond to add it\n     *  parentGroupId: the id of the Group to which we want to the Incident to\n     * }\n     */\n\n  }, {\n    key: \"addIncident\",\n    value: function addIncident(payload) {\n      var _this2 = this;\n\n      var candidates = this.putMessageOnPipe('addIncident', {\n        incident: payload.incident,\n        millisecond: payload.millisecond,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context,\n          instantiatedCopiesContexts: this.instantiatedCopiesContexts\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      }); // concatenate candidates\n      // console.log(candidates);\n\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      } // console.log(totalIncidentsByPlugin);\n\n\n      var res = this.checkAddition(totalIncidentsByPlugin);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute(); // up to that point the only context Incident that has been initialised on the\n          // ContextAwareIncidents of the candidates is the original context of the\n          // ExtendableClip.\n\n          for (var _i = 0; _i < candidates.length; _i++) {\n            candidates[_i].responder.addChild(candidates[_i].response, payload.millisecond); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            }); // we also need to add every existing (copied) context to the ContextAwareIncidents\n            // created on the candidates process\n\n\n            for (var contextKey in _this2.instantiatedCopiesContexts) {\n              candidates[_i].responder.putMessageOnPipe('addContext', {\n                clipId: contextKey,\n                context: _this2.instantiatedCopiesContexts[contextKey]\n              }, 'ContextAwareIncidents', {\n                selfExecute: false,\n                direction: _TREECONST._DIRECTIONS._DOWN\n              });\n            }\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    } // *******************************************************\n    // INCIDENTS MANAGEMENT METHODS\n    // POLYMORPHISM APPLIED. IF THE GROUP HAS NO PARENT IT ACTS AS A SCENE. IF THE GROUP HAS PARENT IT ACTS AS\n    // A \"TRANSPARENT GROUP\"\n\n    /**\n     * The method returns either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidentsById) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // if the clip had no channel instantiated for the specific key (plugin id) yet create it\n        if (!Object.prototype.hasOwnProperty.call(this.instantiatedChannels, key)) {\n          // intstantiate the channel of the plugin by using the reference to the class definition stored on\n          // the very first incident of the array\n          // console.log(incidentsById[key][0].incident.plugin_channel_class);\n          this.instantiatedChannels[key] = new incidentsById[key][0].incident.plugin_channel_class({\n            runTimeInfo: this.runTimeInfo,\n            context: this.context,\n            subscribe: this.props.subscribe // all channels can subscribe to state or current millisecond changes\n\n          });\n        } // perform the check\n\n\n        var pluginResult = this.instantiatedChannels[key].addIncidents(incidentsById[key], type);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var additionResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return additionResult;\n    }\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  incident: the Descriptive Incident to be repositioned\n     *  millisecond: the new millisecond to put it\n     *  parentGroupId: the id of the\n     * }\n     */\n\n  }, {\n    key: \"moveIncident\",\n    value: function moveIncident(payload) {\n      var candidates = this.putMessageOnPipe('moveIncident', {\n        incidentId: payload.id,\n        millisecond: payload.millisecond,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug2;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug2 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug2, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var res = this.checkMove(totalIncidentsByPlugin, payload.positionDelta);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i2 = 0; _i2 < candidates.length; _i2++) {\n            candidates[_i2].responder.editPosition(candidates[_i2].response.id, payload.millisecond); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i2].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            });\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * The checkEdit method serves exactly what its name implies. To check if the edit of an Incident (edit of Incident's position given in milliseconds delta)\n     * is valid and accepted, according to the rules defined on the channels.\n     * The method boobles up until it reaches the Clip.\n     * @param {object} incident - the incident to edit\n     * @param {int} millisecondsDelta - the milliseconds delta of the Incident's start time\n     The method should return either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will edit the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkMove\",\n    value: function checkMove(incidentsById, millisecondsDelta) {\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var pluginResult = this.instantiatedChannels[key].editIncidents(incidentsById[key], millisecondsDelta);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var editResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return editResult;\n    }\n  }, {\n    key: \"removeIncident\",\n    value: function removeIncident(payload) {\n      var candidates = this.putMessageOnPipe('removeIncident', {\n        incidentId: payload.id,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel();\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug3;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug3 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug3, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var res = this.checkDelete(totalIncidentsByPlugin);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i3 = 0; _i3 < candidates.length; _i3++) {\n            candidates[_i3].responder.removeChild(candidates[_i3].response.id); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i3].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            });\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * The checkDelete method serves exactly what its name implies. To check if the deletion of an Incident\n     * is valid and accepted, according to the rules defined on the channels.\n     * The method boobles up until it reaches the Clip.\n     * @param {object} incident - the incident to edit\n      The result might be either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will remove the Incident on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentsById) {\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var pluginResult = this.instantiatedChannels[key].removeIncidents(incidentsById[key]);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var removeResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return removeResult;\n    }\n    /**\n     * This command is invoked by the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  id: the id of the Incident to resize\n     *  newSize: the milliseconds of the new duration\n     *  fraction: the division of the new duration to the current\n     * }\n     */\n\n  }, {\n    key: \"resizeIncident\",\n    value: function resizeIncident(payload) {\n      var candidates = this.putMessageOnPipe('resize', {\n        incidentId: payload.id,\n        newSize: payload.newSize,\n        fraction: payload.fraction,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.id, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug4;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug4 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug4, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var positionDelta = 0;\n\n      if (candidates.length > 0) {\n        positionDelta = candidates[0].positionDelta;\n      }\n\n      var res = this.checkResize(payload.fraction, totalIncidentsByPlugin, positionDelta);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i4 = 0; _i4 < candidates.length; _i4++) {\n            candidates[_i4].responder.setNewDuration(payload.newSize);\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * checks if a duration edit is feasible and doesn't cause conflicts\n     * @param {int} duration - the new duration\n     **/\n\n  }, {\n    key: \"checkResize\",\n    value: function checkResize(durationFraction, incidentsById) {\n      var adjustMillisecond = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var adjustedIncidents = helper.systoleDiastoleProjections(incidentsById[key], durationFraction, adjustMillisecond);\n        var pluginResult = this.instantiatedChannels[key].checkResizedIncidents(adjustedIncidents);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var editResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return editResult;\n    }\n  }, {\n    key: \"getIncidentsByChannel\",\n\n    /**\n     * Returns an object with keys the keys of all the plugins Incidents of which appear in the\n     * tree of the Group. All Incidents are projected to the Group's timeline.\n     * The array includes the Group's projection too\n     */\n    value: function getIncidentsByChannel() {\n      var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var incidentsByPlugin = {};\n      incidentsByPlugin[selfContainedIncidentsNpmName] = [{\n        millisecond: adjustMillisecond,\n        incident: this,\n        id: this.id\n      }];\n      return incidentsByPlugin;\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(newVal) {\n      this.volume = parseFloat(newVal); // this.putMessageOnPipe(pipeMessages._GAIN_CHANGE, { gain: newVal }, false, \"down\");\n    }\n    /**\n     * Eventhough Clips have their own context, still they might belong to another Clip's\n     * tree (CASI). In such a case this method gives the oportunity to set things up\n     * and do operations related with their parent's context (such as subscribing to audio effect nodes)\n     **/\n\n  }, {\n    key: \"_onGetContextOnce\",\n    value: function _onGetContextOnce(parentClipContext) {\n      return;\n    } // special recalcDuration handling so any potential clip copies update their trees\n\n  }, {\n    key: \"handleRecalcDuration\",\n    value: function handleRecalcDuration(target, payload) {\n      // eslint-disable-line no-unused-vars\n      if (this._calculateDuration()) {\n        for (var i = 0; i < this.durationSubs.length; i++) {\n          this.durationSubs[i](this.duration);\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Method called on progress of the timed incident.\n     * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n     * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n     * @param {string} contextId - defaults to the id of the realClip itself. Don't forget that a realClip\n     *      might belong to a selector Clip (so it's a Fragmented Clip), with many \"real\" ClipCopies. All ClipCopies hold\n     *      a reference to this Clip via their \"realClip\" property. Whenever any\n     *      of these ClipCopies progresses (via the onProgress method) calls\n     *      the \"onProgress\" of the realClip, passing their id so the ContextAwareIncidents\n     *      that will also progress via the Channels know which specific Incident to progress.\n     *      That's the result of keeping just one real tree, belonging always to the realClip\n     *      (either Fragmented or Hosted) ending to ContextAwareIncident leafs that\n     *      are the ones to hold the ClipCopies instances.\n     * @param {boolean} forceReset - set to true in cases we want full flash of the state\n     */\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (this.contextReady === false) {\n        this.setBlock();\n        return;\n      }\n\n      if (!contextId) {\n        contextId = this.id;\n      }\n\n      for (var key in this.instantiatedChannels) {\n        var channel = this.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, contextId, forceReset);\n      }\n\n      this.onAfterProgress(fraction, milliseconds);\n    }\n  }, {\n    key: \"onAfterProgress\",\n    value: function onAfterProgress(fraction, milliseconds) {}\n  }, {\n    key: \"flash\",\n    value: function flash() {\n      for (var key in this.instantiatedChannels) {\n        var channel = this.instantiatedChannels[key];\n        channel.moveTo(0, this.runTimeInfo.currentMillisecond, this.id, true);\n      }\n    } // duration changes pub/sub\n\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange(method) {\n      this.durationSubs.push(method);\n    }\n    /********************************************************/\n\n    /******** BLOCKING WAITINGS SET / REMOVE ***************/\n\n  }, {\n    key: \"handleSetBlockingWaiting\",\n    value: function handleSetBlockingWaiting(target, payload) {\n      console.log('handling set blocking waiting');\n      console.log(payload);\n    }\n  }, {\n    key: \"handleRemoveBlockingWaiting\",\n    value: function handleRemoveBlockingWaiting(target, payload) {\n      console.log('handling remove blocking waiting');\n      console.log(payload);\n    }\n  }, {\n    key: \"context\",\n    get: function get() {\n      return this.ownContext;\n    }\n  }]);\n\n  return ExtendableClip;\n}(Group);\n\nmodule.exports = ExtendableClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvRXh0ZW5kYWJsZUNsaXAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvRXh0ZW5kYWJsZUNsaXAuanM/OTYyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgR3JvdXAgPSByZXF1aXJlKCcuLi9CYXNlQ2xhc3Nlcy9Hcm91cCcpO1xuXG52YXIgc2VsZkNvbnRhaW5lZEluY2lkZW50c05wbU5hbWUgPSAnQGtpc3NteWJ1dHRvbi9zZWxmLWNvbnRhaW5lZC1pbmNpZGVudHMnOyAvLyBUT0RPIHJlbW92ZSB0aGlzXG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vVHJlZS9fQ09OU1QnKTtcblxudmFyIEV4dGVuZGFibGVDbGlwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfR3JvdXApIHtcbiAgX2luaGVyaXRzKEV4dGVuZGFibGVDbGlwLCBfR3JvdXApO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBhbiBvYmplY3QgdGhhdCBzaG91bGQgY29udGFpbiBhbGwgb2YgdGhlIGZvbGxvd2luZyBrZXlzOlxuICAgKiAtIGh0bWwgKHRoZSBodG1sIHRlbXBsYXRlIHRvIHJlbmRlcilcbiAgICogLSBjc3MgKHRoZSBjc3MgdGVtcGxhdGUgb2YgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gaW5pdFBhcmFtcyAob3B0aW9uYWwgLyB0aGUgaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBib3RoIG9uIHRoZSBjc3MgYW5kIHRoZSBodG1sIHRlbXBsYXRlcyBpbiBvcmRlciB0byByZW5kZXIpXG4gICAqIC0gaG9zdCAoYW4gRWxlbWVudCBvYmplY3QgdGhhdCB3aWxsIGhvc3QgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gY29udGFpbmVyUGFyYW1zIChhbiBvYmplY3QgdGhhdCBob2xkcyBwYXJhbWV0ZXJzIHRvIGFmZmVjdCB0aGUgY29udGFpbmVyIG9mIHRoZSBpc29sYXRlZCB0cmVlLCBlLmcuIHdpZHRoLCBoZWlnaHQgZXRjKVxuICAgKiAtIHR5cGUgKG9wdGlvbmFsLCBkZWZhdWx0cyB0byBcImlmcmFtZVwiKSB0aGUgdHlwZSBvZiB0aGUgQ2xpcC4gSXQgY2FuIGJlIG9uZSBvZiB0aGU6XG4gICAqICAtIGlmcmFtZVxuICAgKiAgLSBwbGFpblxuICAgKi9cbiAgZnVuY3Rpb24gRXh0ZW5kYWJsZUNsaXAoYXR0cnMsIHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4dGVuZGFibGVDbGlwKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEV4dGVuZGFibGVDbGlwKS5jYWxsKHRoaXMsIGF0dHJzLCBwcm9wcykpO1xuICAgIF90aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgX3RoaXMucHJvcHMgPSBwcm9wcztcbiAgICBfdGhpcy5pc1RoZUNsaXAgPSB0cnVlO1xuICAgIF90aGlzLmJsb2NraW5nV2FpdGluZ3MgPSB7fTtcbiAgICAvKipcbiAgICAgKiBUaGUgY25hbm5lbHMgYXR0cmlidXRlIGhvbGRzIGEgbGlzdCBvZiBhbGwgaW50YW50aWF0ZWQgQ2hhbm5lbHMgb2YgdGhlIEluY2lkZW50cyBiZWxvbmdpbmcgdG8gdGhlIGNsaXBcbiAgICAgKiB0aGlzIGF0dHJpYnV0ZSBpcyBvbmx5IHZhbHVhYmxlIHdoZW4gdGhlIEdyb3VwIGJlY29tZXMgdGhlIENsaXBcbiAgICAgKiBUaGUgZm9ybWF0IG9mIHRoZSBhdHRyaWJ1dGUgaXM6XG4gICAgICogIGtleS12YWx1ZSBwYWlycyBpbiB0aGUgbWFubmVyOlxuICAgICAqIDxtY19wbHVnaW5fbnBtX25hbWU+OiBDaGFubmVsIG9iamVjdFxuICAgICAqL1xuXG4gICAgX3RoaXMuaW5zdGFudGlhdGVkQ2hhbm5lbHMgPSB7fTtcbiAgICBfdGhpcy5pc0hvc3RlZENsaXAgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnN0YW50aWF0ZWRDb3BpZXNDb250ZXh0cyBpcyBhIGtleS12YWx1ZSBwYWlycyBjb2xsZWNpdG9uIGhvbGRpbmcgdGhlXG4gICAgICogY29udGV4dHMgb2YgYWxsIGluc3RhbnRpYXRlZCBDbGlwQ29waWVzXG4gICAgICoqL1xuXG4gICAgX3RoaXMuaW5zdGFudGlhdGVkQ29waWVzQ29udGV4dHMgPSB7fTtcblxuICAgIF90aGlzLm9uQ2xpcEluaXRpYWxpc2UoKTtcblxuICAgIF90aGlzLnJ1blRpbWVJbmZvID0gX3RoaXMucHJvcHMucnVuVGltZUluZm87XG4gICAgX3RoaXMuZHVyYXRpb25TdWJzID0gW107IC8vIHRoZSBhdWRpb0NsaXAgcHJvcGVydHkgZGVmaW5lcyB3ZXRoZXIgdGhlIENsaXAgaXMgQXVkaW8gb3Igbm90LiBEZWZhdWx0cyB0byBmYWxzZVxuICAgIC8vIGFuZCBzaG91bGQgYmUgb3Zlcml0ZW4gdG8gdHJ1ZSBvbiBBdWRpbyBDbGlwXG5cbiAgICBfdGhpcy5hdWRpb0NsaXAgPSBmYWxzZTtcbiAgICBfdGhpcy5jb250ZXh0UmVhZHkgPSB0cnVlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFeHRlbmRhYmxlQ2xpcCwgW3tcbiAgICBrZXk6IFwib25DbGlwSW5pdGlhbGlzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsaXBJbml0aWFsaXNlKCkgey8vIGNhbGxlZCB3aGVuIGdyb3VwIGdldHMgaW5pdGlhbGlzZWRcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29udGV4dExvYWRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udGV4dExvYWRpbmcoKSB7XG4gICAgICB0aGlzLmNvbnRleHRSZWFkeSA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb250ZXh0TG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRleHRMb2FkZWQoKSB7XG4gICAgICB0aGlzLmNvbnRleHRSZWFkeSA9IHRydWU7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgYmVlbiBjYWxsZWQgd2hlbiBhIG5ldyBDbGlwQ29weSBlbnRlcnMgdGhlIHJlYWwgdHJlZSBzdWNjZXNzZnVsbHkuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHREYXRhIC0ga2V5czogY2xpcElkLCBjb250ZXh0XG4gICAgICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDb250ZXh0KGNvbnRleHREYXRhKSB7XG4gICAgICB0aGlzLmluc3RhbnRpYXRlZENvcGllc0NvbnRleHRzW2NvbnRleHREYXRhLmNsaXBJZF0gPSBjb250ZXh0RGF0YS5jb250ZXh0O1xuICAgICAgY29udGV4dERhdGEuaW5zdGFudGlhdGVkQ29waWVzQ29udGV4dHMgPSB0aGlzLmluc3RhbnRpYXRlZENvcGllc0NvbnRleHRzO1xuICAgICAgdmFyIHJlcyA9IHRoaXMucHV0TWVzc2FnZU9uUGlwZSgnYWRkQ29udGV4dCcsIGNvbnRleHREYXRhLCB7fSwge1xuICAgICAgICBzZWxmRXhlY3V0ZTogZmFsc2UsXG4gICAgICAgIGRpcmVjdGlvbjogX1RSRUVDT05TVC5fRElSRUNUSU9OUy5fRE9XTlxuICAgICAgfSk7IC8vIGlmIHRoZSBhZGRlZCBjb250ZXh0IGlzIHRoZSBmaXJzdCBvbmUgdG8gZW50ZXIgdGhlIHJlYWxDbGlwIHdlIG11c3RcbiAgICAgIC8vIHJlY2FsY3VsYXRlIHRoZSBzY3JhdGNoIHZhbHVlcyBvZiBhbGwgb2Ygb3VyIGZpcnN0IEluY2lkZW50cyBvbiBvdXIgaW5zdGFudGlhdGVkQ2hhbm5lbHNcblxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuaW5zdGFudGlhdGVkQ29waWVzQ29udGV4dHMpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBpZiBpdCBpcyB0aGUgZmlyc3Qgb25lIHRvIGJlIGFkZGVkXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmluc3RhbnRpYXRlZENoYW5uZWxzKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW50aWF0ZWRDaGFubmVsc1trZXldLnJlY2FsY1NjcmF0Y2hWYWx1ZXMoY29udGV4dERhdGEuY2xpcElkKTtcbiAgICAgICAgfSAvLyBhbHNvIHdlIHN0b3JlIHRoaXMgbm9uIGZyYWdtZW50ZWQgY29udGV4dCBvbiBvdXIgY29udGV4dCBzbyBpdCBjYW4gYmVcbiAgICAgICAgLy8gdXNlZCBvbiBJbmNpZGVudHMgYWRkaXRpb24gZm9yIGNhbGN1bGF0aW5nIHNjcmF0Y2ggdmFsdWVzXG5cblxuICAgICAgICB0aGlzLmNvbnRleHQubm9uRnJhZ21lbnRlZENvbnRleHQgPSBjb250ZXh0RGF0YS5jb250ZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKlxuICAgIEV4dGVuZGFibGVDbGlwIChhcyBpdHMgbmFtZSBpbXBsaWVzKSBpcyBhIENsYXNzIHRoYXQgc2hvdWxkIGJlIGV4dGVuZGVkIGJ5XG4gICAgYW55IHNwZWNpZmljIGtpbmQgb2YgQ2xpcCwgc3VjaCBhcyBGcmFnbWVudGVkIG9yIFNDR3JvdXAuIFRoaXMgbWV0aG9kIG11c3RcbiAgICBiZSBvdmVyaXR0ZW4gYnkgdGhlIG5ldyBDbGFzc2VzLiBUaGlzIGRlZmluaXRpb24gaGVyZSBpcyBqdXN0IGZvciByZWZlcmVuY2UgLyBoZWxwXG4gICAgcHVycG9zZXNcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXhwb3J0Q29uc3RydWN0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydENvbnN0cnVjdGlvbkFyZ3VtZW50cygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF0dHJzOiB0aGlzLmF0dHJzLFxuICAgICAgICBwcm9wczogdGhpcy5wcm9wc1xuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogY29tcGxldGVseSByZXNpemVzIHRoZSBDbGlwIHdpdGhvdXQgYW55IGNoZWNrc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3Jlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzaXplKGR1cmF0aW9uRnJhY3Rpb24pIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmluc3RhbnRpYXRlZENoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGVkQ2hhbm5lbHNba2V5XS5fcmVzaXplKGR1cmF0aW9uRnJhY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldE5ld0R1cmF0aW9uKHRoaXMuZHVyYXRpb24gKiBkdXJhdGlvbkZyYWN0aW9uKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmR1cmF0aW9uU3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU3Vic1tpXSh0aGlzLmR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIEVkaXRpbmcgY29tbWFuZHMgaW5wdXQgbWV0aG9kc1xuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKlxuICAgICAqIFRoaXMgY29tbWFuZCBjb21lcyBmb3JtIHRoZSBDbGlwJ3MgcGFyZW50IERlc2NyaXB0b3IgY2xhc3MuIFRoZSBwYXlsb2FkXG4gICAgICogaXMgaWRlbnRpY2FsIHRvIHRoZSBwYXlsb2FkIHRoYXQgY29tZXMgdG8gdGhlIERlc2NyaXB0aW9uIGNsYXNzOlxuICAgICAqIHtcbiAgICAgKiAgaW5jaWRlbnQ6IHRoZSBEZXNjcmlwdGl2ZSBJbmNpZGVudCB0byBiZSBhZGRlZFxuICAgICAqICBtaWxsaXNlY29uZDogdGhlIG1pbGxpc2Vjb25kIHRvIGFkZCBpdFxuICAgICAqICBwYXJlbnRHcm91cElkOiB0aGUgaWQgb2YgdGhlIEdyb3VwIHRvIHdoaWNoIHdlIHdhbnQgdG8gdGhlIEluY2lkZW50IHRvXG4gICAgICogfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkSW5jaWRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSW5jaWRlbnQocGF5bG9hZCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjYW5kaWRhdGVzID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdhZGRJbmNpZGVudCcsIHtcbiAgICAgICAgaW5jaWRlbnQ6IHBheWxvYWQuaW5jaWRlbnQsXG4gICAgICAgIG1pbGxpc2Vjb25kOiBwYXlsb2FkLm1pbGxpc2Vjb25kLFxuICAgICAgICBwYXJlbnRHcm91cElkOiBwYXlsb2FkLnBhcmVudEdyb3VwSWQsXG4gICAgICAgIGNvbnRleHREYXRhOiB7XG4gICAgICAgICAgY2xpcElkOiB0aGlzLmlkLFxuICAgICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgICAgICBpbnN0YW50aWF0ZWRDb3BpZXNDb250ZXh0czogdGhpcy5pbnN0YW50aWF0ZWRDb3BpZXNDb250ZXh0c1xuICAgICAgICB9LFxuICAgICAgICBhdWRpbzogdGhpcy5hdWRpb0NsaXBcbiAgICAgIH0sIHBheWxvYWQucGFyZW50R3JvdXBJZCwge1xuICAgICAgICBzZWxmRXhlY3V0ZTogdHJ1ZSxcbiAgICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9ET1dOXG4gICAgICB9KTsgLy8gY29uY2F0ZW5hdGUgY2FuZGlkYXRlc1xuICAgICAgLy8gY29uc29sZS5sb2coY2FuZGlkYXRlcyk7XG5cbiAgICAgIHZhciB0b3RhbEluY2lkZW50c0J5UGx1Z2luID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FuZGlkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaW5jaWRlbnRzQnlQbHVnaW4gPSBjYW5kaWRhdGVzW2ldLnJlc3BvbnNlLmdldEluY2lkZW50c0J5Q2hhbm5lbChjYW5kaWRhdGVzW2ldLnBvc2l0aW9uRGVsdGEgKyBwYXlsb2FkLm1pbGxpc2Vjb25kKTtcblxuICAgICAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIGluY2lkZW50c0J5UGx1Z2luKSB7XG4gICAgICAgICAgdmFyIF90b3RhbEluY2lkZW50c0J5UGx1ZztcblxuICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRvdGFsSW5jaWRlbnRzQnlQbHVnaW4sIHBsdWdpbk5hbWUpKSB7XG4gICAgICAgICAgICB0b3RhbEluY2lkZW50c0J5UGx1Z2luW3BsdWdpbk5hbWVdID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgKF90b3RhbEluY2lkZW50c0J5UGx1ZyA9IHRvdGFsSW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0pLnB1c2guYXBwbHkoX3RvdGFsSW5jaWRlbnRzQnlQbHVnLCBfdG9Db25zdW1hYmxlQXJyYXkoaW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0pKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBjb25zb2xlLmxvZyh0b3RhbEluY2lkZW50c0J5UGx1Z2luKTtcblxuXG4gICAgICB2YXIgcmVzID0gdGhpcy5jaGVja0FkZGl0aW9uKHRvdGFsSW5jaWRlbnRzQnlQbHVnaW4pO1xuXG4gICAgICBpZiAocmVzLnJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKCkge1xuICAgICAgICAgIHJlcy5leGVjdXRlKCk7IC8vIHVwIHRvIHRoYXQgcG9pbnQgdGhlIG9ubHkgY29udGV4dCBJbmNpZGVudCB0aGF0IGhhcyBiZWVuIGluaXRpYWxpc2VkIG9uIHRoZVxuICAgICAgICAgIC8vIENvbnRleHRBd2FyZUluY2lkZW50cyBvZiB0aGUgY2FuZGlkYXRlcyBpcyB0aGUgb3JpZ2luYWwgY29udGV4dCBvZiB0aGVcbiAgICAgICAgICAvLyBFeHRlbmRhYmxlQ2xpcC5cblxuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBjYW5kaWRhdGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgY2FuZGlkYXRlc1tfaV0ucmVzcG9uZGVyLmFkZENoaWxkKGNhbmRpZGF0ZXNbX2ldLnJlc3BvbnNlLCBwYXlsb2FkLm1pbGxpc2Vjb25kKTsgLy8gcmVjYWxjdWxhdGUgZHVyYXRpb24gdGhlIGdyb3VwcyB0aGF0IHdlIGFkZGVkXG4gICAgICAgICAgICAvLyB0aGUgaW5jaWRlbnRzIHRvIGFsb25nIHdpdGggdGhlaXIgcGFyZW50c1xuXG5cbiAgICAgICAgICAgIGNhbmRpZGF0ZXNbX2ldLnJlc3BvbmRlci5wdXRNZXNzYWdlT25QaXBlKCdyZWNhbGNEdXJhdGlvbicsIHt9LCAnR3JvdXBzJywge1xuICAgICAgICAgICAgICBzZWxmRXhlY3V0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgICAgICAgICAgfSk7IC8vIHdlIGFsc28gbmVlZCB0byBhZGQgZXZlcnkgZXhpc3RpbmcgKGNvcGllZCkgY29udGV4dCB0byB0aGUgQ29udGV4dEF3YXJlSW5jaWRlbnRzXG4gICAgICAgICAgICAvLyBjcmVhdGVkIG9uIHRoZSBjYW5kaWRhdGVzIHByb2Nlc3NcblxuXG4gICAgICAgICAgICBmb3IgKHZhciBjb250ZXh0S2V5IGluIF90aGlzMi5pbnN0YW50aWF0ZWRDb3BpZXNDb250ZXh0cykge1xuICAgICAgICAgICAgICBjYW5kaWRhdGVzW19pXS5yZXNwb25kZXIucHV0TWVzc2FnZU9uUGlwZSgnYWRkQ29udGV4dCcsIHtcbiAgICAgICAgICAgICAgICBjbGlwSWQ6IGNvbnRleHRLZXksXG4gICAgICAgICAgICAgICAgY29udGV4dDogX3RoaXMyLmluc3RhbnRpYXRlZENvcGllc0NvbnRleHRzW2NvbnRleHRLZXldXG4gICAgICAgICAgICAgIH0sICdDb250ZXh0QXdhcmVJbmNpZGVudHMnLCB7XG4gICAgICAgICAgICAgICAgc2VsZkV4ZWN1dGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogX1RSRUVDT05TVC5fRElSRUNUSU9OUy5fRE9XTlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICAgICAgZXhlY3V0ZTogc3VjY2Vzc0NhbGxiYWNrXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy8gSU5DSURFTlRTIE1BTkFHRU1FTlQgTUVUSE9EU1xuICAgIC8vIFBPTFlNT1JQSElTTSBBUFBMSUVELiBJRiBUSEUgR1JPVVAgSEFTIE5PIFBBUkVOVCBJVCBBQ1RTIEFTIEEgU0NFTkUuIElGIFRIRSBHUk9VUCBIQVMgUEFSRU5UIElUIEFDVFMgQVNcbiAgICAvLyBBIFwiVFJBTlNQQVJFTlQgR1JPVVBcIlxuXG4gICAgLyoqXG4gICAgICogVGhlIG1ldGhvZCByZXR1cm5zIGVpdGhlcjpcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzdWx0OnRydWUsXG4gICAgICAgICAgICBleGVjdXRlOiAvLyBhbiBhcnJheSBvZiBmdW5jdGlvbnMgdGhhdCB3aGVuIGV4ZWN1dGVkIGl0IHdpbGwgYWRkIHRoZSBJbmNpZGVudHMgb24gdGhlIENoYW5uZWxzXG4gICAgICAgIH1cbiAgICAgICAgb3JcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yc1xuICAgICAgICB9XG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrQWRkaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tBZGRpdGlvbihpbmNpZGVudHNCeUlkKSB7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJhbGwtb3Itbm90aGluZ1wiO1xuICAgICAgLy8gcHJlcGFyZSB0aGUgcmV0dXJuIHBheWxvYWRcbiAgICAgIHZhciB0b1JldHVyblJlc3VsdCA9IHRydWU7XG4gICAgICB2YXIgdG9SZXR1cm5FcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0b1JldHVybkV4ZWN1dGFibGVzID0gW107IC8vIGZvciBlYWNoIGtleSBvZiB0aGUgaW5jaWRlbnRzQnlJZCBvYmplY3QgcGVyZm9ybSB0aGUgY2hlY2tcblxuICAgICAgZm9yICh2YXIga2V5IGluIGluY2lkZW50c0J5SWQpIHtcbiAgICAgICAgLy8gaWYgdGhlIGNsaXAgaGFkIG5vIGNoYW5uZWwgaW5zdGFudGlhdGVkIGZvciB0aGUgc3BlY2lmaWMga2V5IChwbHVnaW4gaWQpIHlldCBjcmVhdGUgaXRcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5pbnN0YW50aWF0ZWRDaGFubmVscywga2V5KSkge1xuICAgICAgICAgIC8vIGludHN0YW50aWF0ZSB0aGUgY2hhbm5lbCBvZiB0aGUgcGx1Z2luIGJ5IHVzaW5nIHRoZSByZWZlcmVuY2UgdG8gdGhlIGNsYXNzIGRlZmluaXRpb24gc3RvcmVkIG9uXG4gICAgICAgICAgLy8gdGhlIHZlcnkgZmlyc3QgaW5jaWRlbnQgb2YgdGhlIGFycmF5XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coaW5jaWRlbnRzQnlJZFtrZXldWzBdLmluY2lkZW50LnBsdWdpbl9jaGFubmVsX2NsYXNzKTtcbiAgICAgICAgICB0aGlzLmluc3RhbnRpYXRlZENoYW5uZWxzW2tleV0gPSBuZXcgaW5jaWRlbnRzQnlJZFtrZXldWzBdLmluY2lkZW50LnBsdWdpbl9jaGFubmVsX2NsYXNzKHtcbiAgICAgICAgICAgIHJ1blRpbWVJbmZvOiB0aGlzLnJ1blRpbWVJbmZvLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgc3Vic2NyaWJlOiB0aGlzLnByb3BzLnN1YnNjcmliZSAvLyBhbGwgY2hhbm5lbHMgY2FuIHN1YnNjcmliZSB0byBzdGF0ZSBvciBjdXJyZW50IG1pbGxpc2Vjb25kIGNoYW5nZXNcblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIHBlcmZvcm0gdGhlIGNoZWNrXG5cblxuICAgICAgICB2YXIgcGx1Z2luUmVzdWx0ID0gdGhpcy5pbnN0YW50aWF0ZWRDaGFubmVsc1trZXldLmFkZEluY2lkZW50cyhpbmNpZGVudHNCeUlkW2tleV0sIHR5cGUpO1xuICAgICAgICB0b1JldHVyblJlc3VsdCA9IHRvUmV0dXJuUmVzdWx0ICYmIHBsdWdpblJlc3VsdC5yZXN1bHQ7XG5cbiAgICAgICAgaWYgKHBsdWdpblJlc3VsdC5yZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9SZXR1cm5FcnJvcnMgPSB0b1JldHVybkVycm9ycy5jb25jYXQocGx1Z2luUmVzdWx0LmVycm9ycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9SZXR1cm5FeGVjdXRhYmxlcy5wdXNoKHBsdWdpblJlc3VsdC5leGVjdXRlKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBlbmYgb2YgaXRlcmF0aW9uIG9uIHRoZSBpbmNpZGVudHNCeUlkIGtleXNcblxuXG4gICAgICB2YXIgdG9SZXR1cm5FeGVjdXRlID0gZnVuY3Rpb24gdG9SZXR1cm5FeGVjdXRlKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvUmV0dXJuRXhlY3V0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0b1JldHVybkV4ZWN1dGFibGVzW2ldKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBhZGRpdGlvblJlc3VsdCA9IHtcbiAgICAgICAgcmVzdWx0OiB0b1JldHVyblJlc3VsdCxcbiAgICAgICAgZXJyb3JzOiB0b1JldHVybkVycm9ycyxcbiAgICAgICAgZXhlY3V0ZTogdG9SZXR1cm5FeGVjdXRlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFkZGl0aW9uUmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbW1hbmQgY29tZXMgZm9ybSB0aGUgQ2xpcCdzIHBhcmVudCBEZXNjcmlwdG9yIGNsYXNzLiBUaGUgcGF5bG9hZFxuICAgICAqIGlzIGlkZW50aWNhbCB0byB0aGUgcGF5bG9hZCB0aGF0IGNvbWVzIHRvIHRoZSBEZXNjcmlwdGlvbiBjbGFzczpcbiAgICAgKiB7XG4gICAgICogIGluY2lkZW50OiB0aGUgRGVzY3JpcHRpdmUgSW5jaWRlbnQgdG8gYmUgcmVwb3NpdGlvbmVkXG4gICAgICogIG1pbGxpc2Vjb25kOiB0aGUgbmV3IG1pbGxpc2Vjb25kIHRvIHB1dCBpdFxuICAgICAqICBwYXJlbnRHcm91cElkOiB0aGUgaWQgb2YgdGhlXG4gICAgICogfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibW92ZUluY2lkZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVJbmNpZGVudChwYXlsb2FkKSB7XG4gICAgICB2YXIgY2FuZGlkYXRlcyA9IHRoaXMucHV0TWVzc2FnZU9uUGlwZSgnbW92ZUluY2lkZW50Jywge1xuICAgICAgICBpbmNpZGVudElkOiBwYXlsb2FkLmlkLFxuICAgICAgICBtaWxsaXNlY29uZDogcGF5bG9hZC5taWxsaXNlY29uZCxcbiAgICAgICAgcGFyZW50R3JvdXBJZDogcGF5bG9hZC5wYXJlbnRHcm91cElkLFxuICAgICAgICBjb250ZXh0RGF0YToge1xuICAgICAgICAgIGNsaXBJZDogdGhpcy5pZCxcbiAgICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHRcbiAgICAgICAgfSxcbiAgICAgICAgYXVkaW86IHRoaXMuYXVkaW9DbGlwXG4gICAgICB9LCBwYXlsb2FkLnBhcmVudEdyb3VwSWQsIHtcbiAgICAgICAgc2VsZkV4ZWN1dGU6IHRydWUsXG4gICAgICAgIGRpcmVjdGlvbjogX1RSRUVDT05TVC5fRElSRUNUSU9OUy5fRE9XTlxuICAgICAgfSk7XG4gICAgICB2YXIgdG90YWxJbmNpZGVudHNCeVBsdWdpbiA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbmRpZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGluY2lkZW50c0J5UGx1Z2luID0gY2FuZGlkYXRlc1tpXS5yZXNwb25zZS5nZXRJbmNpZGVudHNCeUNoYW5uZWwoY2FuZGlkYXRlc1tpXS5wb3NpdGlvbkRlbHRhICsgcGF5bG9hZC5taWxsaXNlY29uZCk7XG5cbiAgICAgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmNpZGVudHNCeVBsdWdpbikge1xuICAgICAgICAgIHZhciBfdG90YWxJbmNpZGVudHNCeVBsdWcyO1xuXG4gICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodG90YWxJbmNpZGVudHNCeVBsdWdpbiwgcGx1Z2luTmFtZSkpIHtcbiAgICAgICAgICAgIHRvdGFsSW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAoX3RvdGFsSW5jaWRlbnRzQnlQbHVnMiA9IHRvdGFsSW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0pLnB1c2guYXBwbHkoX3RvdGFsSW5jaWRlbnRzQnlQbHVnMiwgX3RvQ29uc3VtYWJsZUFycmF5KGluY2lkZW50c0J5UGx1Z2luW3BsdWdpbk5hbWVdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHJlcyA9IHRoaXMuY2hlY2tNb3ZlKHRvdGFsSW5jaWRlbnRzQnlQbHVnaW4sIHBheWxvYWQucG9zaXRpb25EZWx0YSk7XG5cbiAgICAgIGlmIChyZXMucmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2soKSB7XG4gICAgICAgICAgcmVzLmV4ZWN1dGUoKTtcblxuICAgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGNhbmRpZGF0ZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgY2FuZGlkYXRlc1tfaTJdLnJlc3BvbmRlci5lZGl0UG9zaXRpb24oY2FuZGlkYXRlc1tfaTJdLnJlc3BvbnNlLmlkLCBwYXlsb2FkLm1pbGxpc2Vjb25kKTsgLy8gcmVjYWxjdWxhdGUgZHVyYXRpb24gdGhlIGdyb3VwcyB0aGF0IHdlIGFkZGVkXG4gICAgICAgICAgICAvLyB0aGUgaW5jaWRlbnRzIHRvIGFsb25nIHdpdGggdGhlaXIgcGFyZW50c1xuXG5cbiAgICAgICAgICAgIGNhbmRpZGF0ZXNbX2kyXS5yZXNwb25kZXIucHV0TWVzc2FnZU9uUGlwZSgncmVjYWxjRHVyYXRpb24nLCB7fSwgJ0dyb3VwcycsIHtcbiAgICAgICAgICAgICAgc2VsZkV4ZWN1dGU6IHRydWUsXG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogX1RSRUVDT05TVC5fRElSRUNUSU9OUy5fVVBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogdHJ1ZSxcbiAgICAgICAgICBleGVjdXRlOiBzdWNjZXNzQ2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNoZWNrRWRpdCBtZXRob2Qgc2VydmVzIGV4YWN0bHkgd2hhdCBpdHMgbmFtZSBpbXBsaWVzLiBUbyBjaGVjayBpZiB0aGUgZWRpdCBvZiBhbiBJbmNpZGVudCAoZWRpdCBvZiBJbmNpZGVudCdzIHBvc2l0aW9uIGdpdmVuIGluIG1pbGxpc2Vjb25kcyBkZWx0YSlcbiAgICAgKiBpcyB2YWxpZCBhbmQgYWNjZXB0ZWQsIGFjY29yZGluZyB0byB0aGUgcnVsZXMgZGVmaW5lZCBvbiB0aGUgY2hhbm5lbHMuXG4gICAgICogVGhlIG1ldGhvZCBib29ibGVzIHVwIHVudGlsIGl0IHJlYWNoZXMgdGhlIENsaXAuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluY2lkZW50IC0gdGhlIGluY2lkZW50IHRvIGVkaXRcbiAgICAgKiBAcGFyYW0ge2ludH0gbWlsbGlzZWNvbmRzRGVsdGEgLSB0aGUgbWlsbGlzZWNvbmRzIGRlbHRhIG9mIHRoZSBJbmNpZGVudCdzIHN0YXJ0IHRpbWVcbiAgICAgVGhlIG1ldGhvZCBzaG91bGQgcmV0dXJuIGVpdGhlcjpcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzdWx0OnRydWUsXG4gICAgICAgICAgICBleGVjdXRlOiAvLyBhbiBhcnJheSBvZiBmdW5jdGlvbnMgdGhhdCB3aGVuIGV4ZWN1dGVkIGl0IHdpbGwgZWRpdCB0aGUgSW5jaWRlbnRzIG9uIHRoZSBDaGFubmVsc1xuICAgICAgICB9XG4gICAgICAgIG9yXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlc3VsdDogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcnNcbiAgICAgICAgfVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjaGVja01vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tNb3ZlKGluY2lkZW50c0J5SWQsIG1pbGxpc2Vjb25kc0RlbHRhKSB7XG4gICAgICAvLyBwcmVwYXJlIHRoZSByZXR1cm4gcGF5bG9hZFxuICAgICAgdmFyIHRvUmV0dXJuUmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHZhciB0b1JldHVybkVycm9ycyA9IFtdO1xuICAgICAgdmFyIHRvUmV0dXJuRXhlY3V0YWJsZXMgPSBbXTsgLy8gZm9yIGVhY2gga2V5IG9mIHRoZSBpbmNpZGVudHNCeUlkIG9iamVjdCBwZXJmb3JtIHRoZSBjaGVja1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gaW5jaWRlbnRzQnlJZCkge1xuICAgICAgICAvLyBwZXJmb3JtIHRoZSBjaGVja1xuICAgICAgICB2YXIgcGx1Z2luUmVzdWx0ID0gdGhpcy5pbnN0YW50aWF0ZWRDaGFubmVsc1trZXldLmVkaXRJbmNpZGVudHMoaW5jaWRlbnRzQnlJZFtrZXldLCBtaWxsaXNlY29uZHNEZWx0YSk7XG4gICAgICAgIHRvUmV0dXJuUmVzdWx0ID0gdG9SZXR1cm5SZXN1bHQgJiYgcGx1Z2luUmVzdWx0LnJlc3VsdDtcblxuICAgICAgICBpZiAocGx1Z2luUmVzdWx0LnJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0b1JldHVybkVycm9ycyA9IHRvUmV0dXJuRXJyb3JzLmNvbmNhdChwbHVnaW5SZXN1bHQuZXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b1JldHVybkV4ZWN1dGFibGVzLnB1c2gocGx1Z2luUmVzdWx0LmV4ZWN1dGUpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGVuZiBvZiBpdGVyYXRpb24gb24gdGhlIGluY2lkZW50c0J5SWQga2V5c1xuXG5cbiAgICAgIHZhciB0b1JldHVybkV4ZWN1dGUgPSBmdW5jdGlvbiB0b1JldHVybkV4ZWN1dGUoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9SZXR1cm5FeGVjdXRhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRvUmV0dXJuRXhlY3V0YWJsZXNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHJlc3VsdDogdG9SZXR1cm5SZXN1bHQsXG4gICAgICAgIGVycm9yczogdG9SZXR1cm5FcnJvcnMsXG4gICAgICAgIGV4ZWN1dGU6IHRvUmV0dXJuRXhlY3V0ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBlZGl0UmVzdWx0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVJbmNpZGVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJbmNpZGVudChwYXlsb2FkKSB7XG4gICAgICB2YXIgY2FuZGlkYXRlcyA9IHRoaXMucHV0TWVzc2FnZU9uUGlwZSgncmVtb3ZlSW5jaWRlbnQnLCB7XG4gICAgICAgIGluY2lkZW50SWQ6IHBheWxvYWQuaWQsXG4gICAgICAgIHBhcmVudEdyb3VwSWQ6IHBheWxvYWQucGFyZW50R3JvdXBJZCxcbiAgICAgICAgY29udGV4dERhdGE6IHtcbiAgICAgICAgICBjbGlwSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0XG4gICAgICAgIH0sXG4gICAgICAgIGF1ZGlvOiB0aGlzLmF1ZGlvQ2xpcFxuICAgICAgfSwgcGF5bG9hZC5wYXJlbnRHcm91cElkLCB7XG4gICAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX0RPV05cbiAgICAgIH0pO1xuICAgICAgdmFyIHRvdGFsSW5jaWRlbnRzQnlQbHVnaW4gPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYW5kaWRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbmNpZGVudHNCeVBsdWdpbiA9IGNhbmRpZGF0ZXNbaV0ucmVzcG9uc2UuZ2V0SW5jaWRlbnRzQnlDaGFubmVsKCk7XG5cbiAgICAgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmNpZGVudHNCeVBsdWdpbikge1xuICAgICAgICAgIHZhciBfdG90YWxJbmNpZGVudHNCeVBsdWczO1xuXG4gICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodG90YWxJbmNpZGVudHNCeVBsdWdpbiwgcGx1Z2luTmFtZSkpIHtcbiAgICAgICAgICAgIHRvdGFsSW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAoX3RvdGFsSW5jaWRlbnRzQnlQbHVnMyA9IHRvdGFsSW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0pLnB1c2guYXBwbHkoX3RvdGFsSW5jaWRlbnRzQnlQbHVnMywgX3RvQ29uc3VtYWJsZUFycmF5KGluY2lkZW50c0J5UGx1Z2luW3BsdWdpbk5hbWVdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHJlcyA9IHRoaXMuY2hlY2tEZWxldGUodG90YWxJbmNpZGVudHNCeVBsdWdpbik7XG5cbiAgICAgIGlmIChyZXMucmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2soKSB7XG4gICAgICAgICAgcmVzLmV4ZWN1dGUoKTtcblxuICAgICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IGNhbmRpZGF0ZXMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgICAgICAgY2FuZGlkYXRlc1tfaTNdLnJlc3BvbmRlci5yZW1vdmVDaGlsZChjYW5kaWRhdGVzW19pM10ucmVzcG9uc2UuaWQpOyAvLyByZWNhbGN1bGF0ZSBkdXJhdGlvbiB0aGUgZ3JvdXBzIHRoYXQgd2UgYWRkZWRcbiAgICAgICAgICAgIC8vIHRoZSBpbmNpZGVudHMgdG8gYWxvbmcgd2l0aCB0aGVpciBwYXJlbnRzXG5cblxuICAgICAgICAgICAgY2FuZGlkYXRlc1tfaTNdLnJlc3BvbmRlci5wdXRNZXNzYWdlT25QaXBlKCdyZWNhbGNEdXJhdGlvbicsIHt9LCAnR3JvdXBzJywge1xuICAgICAgICAgICAgICBzZWxmRXhlY3V0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICAgIGV4ZWN1dGU6IHN1Y2Nlc3NDYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY2hlY2tEZWxldGUgbWV0aG9kIHNlcnZlcyBleGFjdGx5IHdoYXQgaXRzIG5hbWUgaW1wbGllcy4gVG8gY2hlY2sgaWYgdGhlIGRlbGV0aW9uIG9mIGFuIEluY2lkZW50XG4gICAgICogaXMgdmFsaWQgYW5kIGFjY2VwdGVkLCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIGRlZmluZWQgb24gdGhlIGNoYW5uZWxzLlxuICAgICAqIFRoZSBtZXRob2QgYm9vYmxlcyB1cCB1bnRpbCBpdCByZWFjaGVzIHRoZSBDbGlwLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmNpZGVudCAtIHRoZSBpbmNpZGVudCB0byBlZGl0XG4gICAgICBUaGUgcmVzdWx0IG1pZ2h0IGJlIGVpdGhlcjpcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzdWx0OnRydWUsXG4gICAgICAgICAgICBleGVjdXRlOiAvLyBhbiBhcnJheSBvZiBmdW5jdGlvbnMgdGhhdCB3aGVuIGV4ZWN1dGVkIGl0IHdpbGwgcmVtb3ZlIHRoZSBJbmNpZGVudCBvbiB0aGUgQ2hhbm5lbHNcbiAgICAgICAgfVxuICAgICAgICBvclxuICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3JzXG4gICAgICAgIH1cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tEZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tEZWxldGUoaW5jaWRlbnRzQnlJZCkge1xuICAgICAgLy8gcHJlcGFyZSB0aGUgcmV0dXJuIHBheWxvYWRcbiAgICAgIHZhciB0b1JldHVyblJlc3VsdCA9IHRydWU7XG4gICAgICB2YXIgdG9SZXR1cm5FcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0b1JldHVybkV4ZWN1dGFibGVzID0gW107IC8vIGZvciBlYWNoIGtleSBvZiB0aGUgaW5jaWRlbnRzQnlJZCBvYmplY3QgcGVyZm9ybSB0aGUgY2hlY2tcblxuICAgICAgZm9yICh2YXIga2V5IGluIGluY2lkZW50c0J5SWQpIHtcbiAgICAgICAgLy8gcGVyZm9ybSB0aGUgY2hlY2tcbiAgICAgICAgdmFyIHBsdWdpblJlc3VsdCA9IHRoaXMuaW5zdGFudGlhdGVkQ2hhbm5lbHNba2V5XS5yZW1vdmVJbmNpZGVudHMoaW5jaWRlbnRzQnlJZFtrZXldKTtcbiAgICAgICAgdG9SZXR1cm5SZXN1bHQgPSB0b1JldHVyblJlc3VsdCAmJiBwbHVnaW5SZXN1bHQucmVzdWx0O1xuXG4gICAgICAgIGlmIChwbHVnaW5SZXN1bHQucmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHRvUmV0dXJuRXJyb3JzID0gdG9SZXR1cm5FcnJvcnMuY29uY2F0KHBsdWdpblJlc3VsdC5lcnJvcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvUmV0dXJuRXhlY3V0YWJsZXMucHVzaChwbHVnaW5SZXN1bHQuZXhlY3V0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gZW5mIG9mIGl0ZXJhdGlvbiBvbiB0aGUgaW5jaWRlbnRzQnlJZCBrZXlzXG5cblxuICAgICAgdmFyIHRvUmV0dXJuRXhlY3V0ZSA9IGZ1bmN0aW9uIHRvUmV0dXJuRXhlY3V0ZSgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b1JldHVybkV4ZWN1dGFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdG9SZXR1cm5FeGVjdXRhYmxlc1tpXSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVtb3ZlUmVzdWx0ID0ge1xuICAgICAgICByZXN1bHQ6IHRvUmV0dXJuUmVzdWx0LFxuICAgICAgICBlcnJvcnM6IHRvUmV0dXJuRXJyb3JzLFxuICAgICAgICBleGVjdXRlOiB0b1JldHVybkV4ZWN1dGVcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVtb3ZlUmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbW1hbmQgaXMgaW52b2tlZCBieSB0aGUgQ2xpcCdzIHBhcmVudCBEZXNjcmlwdG9yIGNsYXNzLiBUaGUgcGF5bG9hZFxuICAgICAqIGlzIGlkZW50aWNhbCB0byB0aGUgcGF5bG9hZCB0aGF0IGNvbWVzIHRvIHRoZSBEZXNjcmlwdGlvbiBjbGFzczpcbiAgICAgKiB7XG4gICAgICogIGlkOiB0aGUgaWQgb2YgdGhlIEluY2lkZW50IHRvIHJlc2l6ZVxuICAgICAqICBuZXdTaXplOiB0aGUgbWlsbGlzZWNvbmRzIG9mIHRoZSBuZXcgZHVyYXRpb25cbiAgICAgKiAgZnJhY3Rpb246IHRoZSBkaXZpc2lvbiBvZiB0aGUgbmV3IGR1cmF0aW9uIHRvIHRoZSBjdXJyZW50XG4gICAgICogfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVzaXplSW5jaWRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplSW5jaWRlbnQocGF5bG9hZCkge1xuICAgICAgdmFyIGNhbmRpZGF0ZXMgPSB0aGlzLnB1dE1lc3NhZ2VPblBpcGUoJ3Jlc2l6ZScsIHtcbiAgICAgICAgaW5jaWRlbnRJZDogcGF5bG9hZC5pZCxcbiAgICAgICAgbmV3U2l6ZTogcGF5bG9hZC5uZXdTaXplLFxuICAgICAgICBmcmFjdGlvbjogcGF5bG9hZC5mcmFjdGlvbixcbiAgICAgICAgY29udGV4dERhdGE6IHtcbiAgICAgICAgICBjbGlwSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0XG4gICAgICAgIH0sXG4gICAgICAgIGF1ZGlvOiB0aGlzLmF1ZGlvQ2xpcFxuICAgICAgfSwgcGF5bG9hZC5pZCwge1xuICAgICAgICBzZWxmRXhlY3V0ZTogZmFsc2UsXG4gICAgICAgIGRpcmVjdGlvbjogX1RSRUVDT05TVC5fRElSRUNUSU9OUy5fRE9XTlxuICAgICAgfSk7XG4gICAgICB2YXIgdG90YWxJbmNpZGVudHNCeVBsdWdpbiA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbmRpZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGluY2lkZW50c0J5UGx1Z2luID0gY2FuZGlkYXRlc1tpXS5yZXNwb25zZS5nZXRJbmNpZGVudHNCeUNoYW5uZWwoY2FuZGlkYXRlc1tpXS5wb3NpdGlvbkRlbHRhKTtcblxuICAgICAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIGluY2lkZW50c0J5UGx1Z2luKSB7XG4gICAgICAgICAgdmFyIF90b3RhbEluY2lkZW50c0J5UGx1ZzQ7XG5cbiAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0b3RhbEluY2lkZW50c0J5UGx1Z2luLCBwbHVnaW5OYW1lKSkge1xuICAgICAgICAgICAgdG90YWxJbmNpZGVudHNCeVBsdWdpbltwbHVnaW5OYW1lXSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIChfdG90YWxJbmNpZGVudHNCeVBsdWc0ID0gdG90YWxJbmNpZGVudHNCeVBsdWdpbltwbHVnaW5OYW1lXSkucHVzaC5hcHBseShfdG90YWxJbmNpZGVudHNCeVBsdWc0LCBfdG9Db25zdW1hYmxlQXJyYXkoaW5jaWRlbnRzQnlQbHVnaW5bcGx1Z2luTmFtZV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcG9zaXRpb25EZWx0YSA9IDA7XG5cbiAgICAgIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcG9zaXRpb25EZWx0YSA9IGNhbmRpZGF0ZXNbMF0ucG9zaXRpb25EZWx0YTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcyA9IHRoaXMuY2hlY2tSZXNpemUocGF5bG9hZC5mcmFjdGlvbiwgdG90YWxJbmNpZGVudHNCeVBsdWdpbiwgcG9zaXRpb25EZWx0YSk7XG5cbiAgICAgIGlmIChyZXMucmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2soKSB7XG4gICAgICAgICAgcmVzLmV4ZWN1dGUoKTtcblxuICAgICAgICAgIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGNhbmRpZGF0ZXMubGVuZ3RoOyBfaTQrKykge1xuICAgICAgICAgICAgY2FuZGlkYXRlc1tfaTRdLnJlc3BvbmRlci5zZXROZXdEdXJhdGlvbihwYXlsb2FkLm5ld1NpemUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogdHJ1ZSxcbiAgICAgICAgICBleGVjdXRlOiBzdWNjZXNzQ2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogY2hlY2tzIGlmIGEgZHVyYXRpb24gZWRpdCBpcyBmZWFzaWJsZSBhbmQgZG9lc24ndCBjYXVzZSBjb25mbGljdHNcbiAgICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gLSB0aGUgbmV3IGR1cmF0aW9uXG4gICAgICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tSZXNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tSZXNpemUoZHVyYXRpb25GcmFjdGlvbiwgaW5jaWRlbnRzQnlJZCkge1xuICAgICAgdmFyIGFkanVzdE1pbGxpc2Vjb25kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgICAgLy8gcHJlcGFyZSB0aGUgcmV0dXJuIHBheWxvYWRcbiAgICAgIHZhciB0b1JldHVyblJlc3VsdCA9IHRydWU7XG4gICAgICB2YXIgdG9SZXR1cm5FcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0b1JldHVybkV4ZWN1dGFibGVzID0gW107IC8vIGZvciBlYWNoIGtleSBvZiB0aGUgaW5jaWRlbnRzQnlJZCBvYmplY3QgcGVyZm9ybSB0aGUgY2hlY2tcblxuICAgICAgZm9yICh2YXIga2V5IGluIGluY2lkZW50c0J5SWQpIHtcbiAgICAgICAgLy8gcGVyZm9ybSB0aGUgY2hlY2tcbiAgICAgICAgdmFyIGFkanVzdGVkSW5jaWRlbnRzID0gaGVscGVyLnN5c3RvbGVEaWFzdG9sZVByb2plY3Rpb25zKGluY2lkZW50c0J5SWRba2V5XSwgZHVyYXRpb25GcmFjdGlvbiwgYWRqdXN0TWlsbGlzZWNvbmQpO1xuICAgICAgICB2YXIgcGx1Z2luUmVzdWx0ID0gdGhpcy5pbnN0YW50aWF0ZWRDaGFubmVsc1trZXldLmNoZWNrUmVzaXplZEluY2lkZW50cyhhZGp1c3RlZEluY2lkZW50cyk7XG4gICAgICAgIHRvUmV0dXJuUmVzdWx0ID0gdG9SZXR1cm5SZXN1bHQgJiYgcGx1Z2luUmVzdWx0LnJlc3VsdDtcblxuICAgICAgICBpZiAocGx1Z2luUmVzdWx0LnJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0b1JldHVybkVycm9ycyA9IHRvUmV0dXJuRXJyb3JzLmNvbmNhdChwbHVnaW5SZXN1bHQuZXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b1JldHVybkV4ZWN1dGFibGVzLnB1c2gocGx1Z2luUmVzdWx0LmV4ZWN1dGUpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGVuZiBvZiBpdGVyYXRpb24gb24gdGhlIGluY2lkZW50c0J5SWQga2V5c1xuXG5cbiAgICAgIHZhciB0b1JldHVybkV4ZWN1dGUgPSBmdW5jdGlvbiB0b1JldHVybkV4ZWN1dGUoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9SZXR1cm5FeGVjdXRhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRvUmV0dXJuRXhlY3V0YWJsZXNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHJlc3VsdDogdG9SZXR1cm5SZXN1bHQsXG4gICAgICAgIGVycm9yczogdG9SZXR1cm5FcnJvcnMsXG4gICAgICAgIGV4ZWN1dGU6IHRvUmV0dXJuRXhlY3V0ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBlZGl0UmVzdWx0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRJbmNpZGVudHNCeUNoYW5uZWxcIixcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGgga2V5cyB0aGUga2V5cyBvZiBhbGwgdGhlIHBsdWdpbnMgSW5jaWRlbnRzIG9mIHdoaWNoIGFwcGVhciBpbiB0aGVcbiAgICAgKiB0cmVlIG9mIHRoZSBHcm91cC4gQWxsIEluY2lkZW50cyBhcmUgcHJvamVjdGVkIHRvIHRoZSBHcm91cCdzIHRpbWVsaW5lLlxuICAgICAqIFRoZSBhcnJheSBpbmNsdWRlcyB0aGUgR3JvdXAncyBwcm9qZWN0aW9uIHRvb1xuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmNpZGVudHNCeUNoYW5uZWwoKSB7XG4gICAgICB2YXIgYWRqdXN0TWlsbGlzZWNvbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgaW5jaWRlbnRzQnlQbHVnaW4gPSB7fTtcbiAgICAgIGluY2lkZW50c0J5UGx1Z2luW3NlbGZDb250YWluZWRJbmNpZGVudHNOcG1OYW1lXSA9IFt7XG4gICAgICAgIG1pbGxpc2Vjb25kOiBhZGp1c3RNaWxsaXNlY29uZCxcbiAgICAgICAgaW5jaWRlbnQ6IHRoaXMsXG4gICAgICAgIGlkOiB0aGlzLmlkXG4gICAgICB9XTtcbiAgICAgIHJldHVybiBpbmNpZGVudHNCeVBsdWdpbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShuZXdWYWwpIHtcbiAgICAgIHRoaXMudm9sdW1lID0gcGFyc2VGbG9hdChuZXdWYWwpOyAvLyB0aGlzLnB1dE1lc3NhZ2VPblBpcGUocGlwZU1lc3NhZ2VzLl9HQUlOX0NIQU5HRSwgeyBnYWluOiBuZXdWYWwgfSwgZmFsc2UsIFwiZG93blwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXZlbnRob3VnaCBDbGlwcyBoYXZlIHRoZWlyIG93biBjb250ZXh0LCBzdGlsbCB0aGV5IG1pZ2h0IGJlbG9uZyB0byBhbm90aGVyIENsaXAnc1xuICAgICAqIHRyZWUgKENBU0kpLiBJbiBzdWNoIGEgY2FzZSB0aGlzIG1ldGhvZCBnaXZlcyB0aGUgb3BvcnR1bml0eSB0byBzZXQgdGhpbmdzIHVwXG4gICAgICogYW5kIGRvIG9wZXJhdGlvbnMgcmVsYXRlZCB3aXRoIHRoZWlyIHBhcmVudCdzIGNvbnRleHQgKHN1Y2ggYXMgc3Vic2NyaWJpbmcgdG8gYXVkaW8gZWZmZWN0IG5vZGVzKVxuICAgICAqKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9vbkdldENvbnRleHRPbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkdldENvbnRleHRPbmNlKHBhcmVudENsaXBDb250ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBzcGVjaWFsIHJlY2FsY0R1cmF0aW9uIGhhbmRsaW5nIHNvIGFueSBwb3RlbnRpYWwgY2xpcCBjb3BpZXMgdXBkYXRlIHRoZWlyIHRyZWVzXG5cbiAgfSwge1xuICAgIGtleTogXCJoYW5kbGVSZWNhbGNEdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSZWNhbGNEdXJhdGlvbih0YXJnZXQsIHBheWxvYWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGlmICh0aGlzLl9jYWxjdWxhdGVEdXJhdGlvbigpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kdXJhdGlvblN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmR1cmF0aW9uU3Vic1tpXSh0aGlzLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIGNhbGxlZCBvbiBwcm9ncmVzcyBvZiB0aGUgdGltZWQgaW5jaWRlbnQuXG4gICAgICogQHBhcmFtIHtmbG9hdH0gZnJhY3Rpb24gLSBhIG51bWJlciBmcm9tIDAgdG8gMSByZXByZXNlbnRpbmcgdGhlIGZyYWN0aW9uIG9mIGR1cmF0aW9uIGNvdmVyZWRcbiAgICAgKiBAcGFyYW0ge2ludH0gbWlsbGlzZWNvbmRzIC0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgcGFzc2VkIGZyb20gc3RhcnQgb2YgdGhlIGluY2lkZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHRJZCAtIGRlZmF1bHRzIHRvIHRoZSBpZCBvZiB0aGUgcmVhbENsaXAgaXRzZWxmLiBEb24ndCBmb3JnZXQgdGhhdCBhIHJlYWxDbGlwXG4gICAgICogICAgICBtaWdodCBiZWxvbmcgdG8gYSBzZWxlY3RvciBDbGlwIChzbyBpdCdzIGEgRnJhZ21lbnRlZCBDbGlwKSwgd2l0aCBtYW55IFwicmVhbFwiIENsaXBDb3BpZXMuIEFsbCBDbGlwQ29waWVzIGhvbGRcbiAgICAgKiAgICAgIGEgcmVmZXJlbmNlIHRvIHRoaXMgQ2xpcCB2aWEgdGhlaXIgXCJyZWFsQ2xpcFwiIHByb3BlcnR5LiBXaGVuZXZlciBhbnlcbiAgICAgKiAgICAgIG9mIHRoZXNlIENsaXBDb3BpZXMgcHJvZ3Jlc3NlcyAodmlhIHRoZSBvblByb2dyZXNzIG1ldGhvZCkgY2FsbHNcbiAgICAgKiAgICAgIHRoZSBcIm9uUHJvZ3Jlc3NcIiBvZiB0aGUgcmVhbENsaXAsIHBhc3NpbmcgdGhlaXIgaWQgc28gdGhlIENvbnRleHRBd2FyZUluY2lkZW50c1xuICAgICAqICAgICAgdGhhdCB3aWxsIGFsc28gcHJvZ3Jlc3MgdmlhIHRoZSBDaGFubmVscyBrbm93IHdoaWNoIHNwZWNpZmljIEluY2lkZW50IHRvIHByb2dyZXNzLlxuICAgICAqICAgICAgVGhhdCdzIHRoZSByZXN1bHQgb2Yga2VlcGluZyBqdXN0IG9uZSByZWFsIHRyZWUsIGJlbG9uZ2luZyBhbHdheXMgdG8gdGhlIHJlYWxDbGlwXG4gICAgICogICAgICAoZWl0aGVyIEZyYWdtZW50ZWQgb3IgSG9zdGVkKSBlbmRpbmcgdG8gQ29udGV4dEF3YXJlSW5jaWRlbnQgbGVhZnMgdGhhdFxuICAgICAqICAgICAgYXJlIHRoZSBvbmVzIHRvIGhvbGQgdGhlIENsaXBDb3BpZXMgaW5zdGFuY2VzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VSZXNldCAtIHNldCB0byB0cnVlIGluIGNhc2VzIHdlIHdhbnQgZnVsbCBmbGFzaCBvZiB0aGUgc3RhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyhmcmFjdGlvbiwgbWlsbGlzZWNvbmRzLCBjb250ZXh0SWQpIHtcbiAgICAgIHZhciBmb3JjZVJlc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuY29udGV4dFJlYWR5ID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLnNldEJsb2NrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250ZXh0SWQpIHtcbiAgICAgICAgY29udGV4dElkID0gdGhpcy5pZDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5zdGFudGlhdGVkQ2hhbm5lbHMpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmluc3RhbnRpYXRlZENoYW5uZWxzW2tleV07XG4gICAgICAgIGNoYW5uZWwubW92ZVRvKHRoaXMucnVuVGltZUluZm8uY3VycmVudE1pbGxpc2Vjb25kLCBtaWxsaXNlY29uZHMsIGNvbnRleHRJZCwgZm9yY2VSZXNldCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub25BZnRlclByb2dyZXNzKGZyYWN0aW9uLCBtaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkFmdGVyUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25BZnRlclByb2dyZXNzKGZyYWN0aW9uLCBtaWxsaXNlY29uZHMpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmxhc2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmxhc2goKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pbnN0YW50aWF0ZWRDaGFubmVscykge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuaW5zdGFudGlhdGVkQ2hhbm5lbHNba2V5XTtcbiAgICAgICAgY2hhbm5lbC5tb3ZlVG8oMCwgdGhpcy5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQsIHRoaXMuaWQsIHRydWUpO1xuICAgICAgfVxuICAgIH0gLy8gZHVyYXRpb24gY2hhbmdlcyBwdWIvc3ViXG5cbiAgfSwge1xuICAgIGtleTogXCJzdWJzY3JpYmVUb0R1cmF0aW9uQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZVRvRHVyYXRpb25DaGFuZ2UobWV0aG9kKSB7XG4gICAgICB0aGlzLmR1cmF0aW9uU3Vicy5wdXNoKG1ldGhvZCk7XG4gICAgfVxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKioqKioqKiBCTE9DS0lORyBXQUlUSU5HUyBTRVQgLyBSRU1PVkUgKioqKioqKioqKioqKioqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlU2V0QmxvY2tpbmdXYWl0aW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVNldEJsb2NraW5nV2FpdGluZyh0YXJnZXQsIHBheWxvYWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGluZyBzZXQgYmxvY2tpbmcgd2FpdGluZycpO1xuICAgICAgY29uc29sZS5sb2cocGF5bG9hZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZVJlbW92ZUJsb2NraW5nV2FpdGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSZW1vdmVCbG9ja2luZ1dhaXRpbmcodGFyZ2V0LCBwYXlsb2FkKSB7XG4gICAgICBjb25zb2xlLmxvZygnaGFuZGxpbmcgcmVtb3ZlIGJsb2NraW5nIHdhaXRpbmcnKTtcbiAgICAgIGNvbnNvbGUubG9nKHBheWxvYWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb250ZXh0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vd25Db250ZXh0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFeHRlbmRhYmxlQ2xpcDtcbn0oR3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4dGVuZGFibGVDbGlwOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar HTMLFragmentContextHandler = __webpack_require__(/*! ./helpers/HTMLFragmentContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar FragmentedClip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(FragmentedClip, _ExtendableClip);\n\n  function FragmentedClip() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, FragmentedClip);\n\n    var attrsToPass, propsToUse;\n    /*\n    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n    the new way of initialising a Group (only props).\n    */\n\n    if (oldProps === null) {\n      attrsToPass = {};\n      propsToUse = props;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = props;\n      propsToUse = oldProps;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FragmentedClip).call(this, attrsToPass, propsToUse));\n    var contextHanlder = new HTMLFragmentContextHandler(_objectSpread({}, propsToUse, {\n      html: Object.prototype.hasOwnProperty.call(propsToUse, \"html\") ? propsToUse.html : _this.html,\n      css: Object.prototype.hasOwnProperty.call(propsToUse, \"css\") ? propsToUse.css : _this.css,\n      fonts: Object.prototype.hasOwnProperty.call(propsToUse, \"fonts\") ? propsToUse.fonts : _this.fonts\n    }));\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: false\n    });\n    _this.iframe = contextHanlder.iframeElement;\n    _this.forceExportIncidents = true;\n\n    _this.onDOMCLipInitialise(); // as soon as a Fragmented Clip is been intialised that means the Descriptive\n    // Clip has a selector and not a host. Thus is not a hosted clip\n    // this.isHostedClip = false;\n\n\n    return _this;\n  }\n\n  _createClass(FragmentedClip, [{\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      // TODO also export CSS and fonts taking in account the potential existance\n      // of them on the get methods\n      // console.log(this.ownContext.rootElement.innerHTML);\n      return {\n        attrs: this.attrs,\n        props: _objectSpread({}, this.props, {\n          html: this.ownContext.rootElement.innerHTML\n        })\n      };\n    }\n  }, {\n    key: \"onDOMCLipInitialise\",\n    value: function onDOMCLipInitialise() {// implement here\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.ownContext.clipContainer;\n    }\n  }]);\n\n  return FragmentedClip;\n}(ExtendableClip);\n\nmodule.exports = FragmentedClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NullClip =\n/*#__PURE__*/\nfunction () {\n  function NullClip() {\n    _classCallCheck(this, NullClip);\n  }\n\n  _createClass(NullClip, [{\n    key: \"addIncident\",\n    value: function addIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"moveIncident\",\n    value: function moveIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"removeIncident\",\n    value: function removeIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"resizeIncident\",\n    value: function resizeIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"getIncidentsByChannel\",\n    value: function getIncidentsByChannel() {\n      return {};\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {}\n  }, {\n    key: \"_resize\",\n    value: function _resize() {}\n  }, {\n    key: \"onProgress\",\n    value: function onProgress() {}\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n\n  return NullClip;\n}();\n\nmodule.exports = NullClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvTnVsbENsaXAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvTnVsbENsaXAuanM/YmRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgTnVsbENsaXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOdWxsQ2xpcCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVsbENsaXApO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE51bGxDbGlwLCBbe1xuICAgIGtleTogXCJhZGRJbmNpZGVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJbmNpZGVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogdHJ1ZSxcbiAgICAgICAgZXhlY3V0ZTogZnVuY3Rpb24gZXhlY3V0ZSgpIHt9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3ZlSW5jaWRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZUluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZUluY2lkZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZUluY2lkZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZUluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEluY2lkZW50c0J5Q2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmNpZGVudHNCeUNoYW5uZWwoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZsYXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZsYXNoKCkge31cbiAgfSwge1xuICAgIGtleTogXCJfcmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNpemUoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcIm9uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcygpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwiZHVyYXRpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOdWxsQ2xpcDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdWxsQ2xpcDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar DescriptiveGroup = __webpack_require__(/*! ../DescriptiveIncidents/DescriptiveGroup */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Playable =\n/*#__PURE__*/\nfunction (_DescriptiveGroup) {\n  _inherits(Playable, _DescriptiveGroup);\n\n  function Playable(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, Playable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Playable).call(this, attrs, props));\n    _this.runTimeInfo = {\n      currentMillisecond: 0,\n      state: 'idle' // supported states: idle, playing, paused, blocked, armed\n\n    };\n    /**\n      @member {object} - listeners are functions to be executed on time change of the Clip.\n      It has the following format:\n     listeners: {\n        listener_id: {\n                 funct : the function to be executed\n                 threshold : the threshold of delta\n                 roundTo : round millisecond\n             },\n             listener_id: {\n                 funct : the function to be executed\n                 threshold : the threshold of delta\n                 roundTo : round millisecond\n             },\n             ...\n       }\n       */\n\n    _this.listeners = {}; // previousTimeStamp is a property holding the last timestamp that the\n    // requestAnimationFrame ran\n\n    _this.previousTimeStamp = -1;\n    _this.speed = 1;\n    return _this;\n  }\n  /*********************** execution methods  *********************\n   ****************************************************************/\n\n\n  _createClass(Playable, [{\n    key: \"_setState\",\n    value: function _setState(newState) {\n      if (newState != this.runTimeInfo.state) {\n        this.runTimeInfo.state = newState; // the only timer and the only responsible for Clip execution is the Clip\n        // All Incidents contained on a Clip are been executed by the Clip itself via its channels.\n        // Thus, the only Incidents that need to know about the state of the root Clip\n        // at any time are only the Clips\n\n        this.putMessageOnPipe('setState', newState, 'Clips', {\n          selfExecute: false,\n          direction: _TREECONST._DIRECTIONS._DOWN\n        });\n\n        for (var key in this.listeners) {\n          var listner = this.listeners[key];\n          listner.funct(this.runTimeInfo.currentMillisecond, newState);\n        }\n      }\n    }\n  }, {\n    key: \"handleSetState\",\n    value: function handleSetState(target, payload) {\n      this._setState(payload);\n    } // execution methods\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this2 = this;\n\n      var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.runTimeInfo.state === 'idle' || this.runTimeInfo.state === 'paused' || this.runTimeInfo.state === 'armed' || this.runTimeInfo.state === 'transitional' || this.runTimeInfo.state === \"blocked\") {\n        if (this.runTimeInfo.state === 'paused') {\n          var delta = new Date().getTime() - this.pauseMoment;\n          this.previousTimeStamp += delta;\n        }\n\n        this._setState('playing');\n\n        this.onPlay();\n\n        if (debug === false) {\n          window.requestAnimationFrame(function (timestamp) {\n            _this2.step(timestamp);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.runTimeInfo.state === 'playing') {\n        this._setState('paused');\n\n        this.pauseMoment = new Date().getTime();\n        this.onWait();\n      }\n    }\n    /* armed state means the Clip is on paused state after transition */\n\n  }, {\n    key: \"arm\",\n    value: function arm() {\n      if (this.runTimeInfo.state === 'transitional') {\n        this._setState('armed');\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this._setState('idle');\n\n      this.previousTimeStamp = -1;\n    }\n    /* in order to start a journey via the TimeCapsule the Playable needs first to stop */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._setState('transitional');\n\n      this.previousTimeStamp = -1;\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      this._setState('blocked');\n\n      this.previousTimeStamp = -1;\n    }\n  }, {\n    key: \"onPlay\",\n    value: function onPlay() {}\n  }, {\n    key: \"onWait\",\n    value: function onWait() {}\n  }, {\n    key: \"playableProgress\",\n    value: function playableProgress(fraction, millisecond) {\n      if (this.isTheRootClip) {\n        for (var key in this.listeners) {\n          var listner = this.listeners[key]; // if the listener is only for state change continue\n\n          if (listner.onlyOnStateChange === true) {\n            continue;\n          } // console.log(`Math.abs(${milliseconds} + ${listner.cavaDelta} - ${this.runTimeInfo.currentMillisecond}) > ${listner.threshold}`);\n\n\n          if (Math.abs(millisecond + listner.cavaDelta - this.runTimeInfo.currentMillisecond) > listner.threshold) {\n            listner.funct(helper.roundNumberTo(millisecond, listner.roundTo), this.runTimeInfo.state);\n            listner.cavaDelta = 0;\n          } else {\n            listner.cavaDelta += Math.abs(millisecond - this.runTimeInfo.currentMillisecond);\n          }\n        }\n\n        this.onProgress(fraction, millisecond);\n        this.runTimeInfo.currentMillisecond = millisecond;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"step\",\n    // *******************************************************\n    // STEP FUNCTION\n    value: function step(timestamp) {\n      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.runTimeInfo.state !== 'playing') {\n        return;\n      }\n\n      var that = this;\n\n      if (this.previousTimeStamp === -1) {\n        this.previousTimeStamp = timestamp;\n      } // progressStep is the progress made from previousTimeStamp both in milliseconds and in fraction [0 to 1]\n\n\n      var progress = {\n        milliseconds: Math.round(this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed),\n        fraction: (this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed) / this.duration\n      };\n\n      if (progress.fraction >= 1) {\n        this.playableProgress(1, this.duration);\n        this.complete();\n        return;\n      } else if (progress.fraction < 0) {\n        this.playableProgress(0, 0);\n        this.complete(); // this.broadcastEvent('state-change', { oldState: \"playing\", newState: \"idle\" });\n\n        return;\n      }\n\n      this.playableProgress(progress.fraction, progress.milliseconds);\n      this.previousTimeStamp = timestamp;\n\n      if (debug === false) {\n        window.requestAnimationFrame(that.step.bind(that));\n      }\n    } // ************ PUB SUB ********************\n    // *****************************************\n\n    /**\n      By subscribing a module can get notified about changes on the Clip's time\n      subscribe method subscribes a function to the time change dispatcher. As Clip uses requestAnimationFrame for its timing\n      each cyrcle / step gets the current time and subtracts the previous time so it know how many milliseconds has elapsed\n      since last step. Subscribers can set to get informed about time changes only if the delta is greater than a given\n      number (e.g. greater than 300ms). That property is passed as the second argument \"threshold\".\n      Finally if any of the subscribers want the Scene to provide back a rounded number of the milliseconds. Options:\n        - 1 (round it on its actual units\n       - 10 (round it on tenths)\n       - 100 (round it on hundreds)\n       - 1000 (round it on thousands)\n      the first argument provides an id to the listener for future reference (deletion etc)\n      the second argument is a function that takes two arguments: millisecond, state (current millisecond of the Scene\n      and the state of it  */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(id, funct, threshold, roundTo) {\n      var onlyOnStateChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (!threshold) {\n        threshold = 0;\n      }\n\n      if (!roundTo) {\n        roundTo = 1; // round second to its units, meaning leave it as it is\n      }\n\n      this.listeners[id] = {\n        funct: funct,\n        threshold: threshold,\n        roundTo: roundTo,\n        cavaDelta: 0,\n        onlyOnStateChange: onlyOnStateChange\n      };\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      if (Object.prototype.hasOwnProperty.call(this.listeners, id)) {\n        delete this.listeners[id];\n      }\n    }\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange(funct) {\n      if (this.isTheRootClip) {\n        this.realClip.subscribeToDurationChange(funct);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"executionSpeed\",\n    set: function set(speed) {\n      if (!this.isTheRootClip) {\n        return false;\n      }\n\n      this.speed = parseFloat(speed);\n    }\n  }]);\n\n  return Playable;\n}(DescriptiveGroup);\n\nmodule.exports = Playable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/*\ndna: {\n    host\n    descriptiveIncident\n}\n*/\n\nvar ClipClone =\n/*#__PURE__*/\nfunction () {\n  function ClipClone(dna) {\n    _classCallCheck(this, ClipClone);\n\n    this.runTimeInfo = {\n      currentMillisecond: 0,\n      state: 'transitional'\n    };\n    this.id = helper.getAnId();\n    this.realClip = dna.descriptiveIncident.realClip; // In order to render itself on the given element first it needs the props (including html and css)\n    // from the real Clip it copies\n\n    var constructionArgs = dna.descriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n    var hostedProps = _objectSpread({}, constructionArgs.props, {\n      selector: undefined,\n      host: dna.host,\n      id: this.id\n    }); // we create a clip because Clips on creation render and thus have their own context\n\n\n    this.ownClip = new dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps); // flushes the realClip with its ownClip's context\n\n    dna.descriptiveIncident.realClip.addContext({\n      clipId: this.id,\n      context: this.ownClip.ownContext,\n      synchronize: dna.synchronize,\n      runTimeInfo: this.runTimeInfo\n    }, true);\n  }\n\n  _createClass(ClipClone, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      for (var key in this.realClip.instantiatedChannels) {\n        var channel = this.realClip.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, true);\n      }\n\n      this.runTimeInfo.currentMillisecond = milliseconds;\n    }\n  }]);\n\n  return ClipClone;\n}();\n\nmodule.exports = ClipClone;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvUm9vdENsaXBDbG9uZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9Sb290Q2xpcENsb25lLmpzPzIwNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbi8qXG5kbmE6IHtcbiAgICBob3N0XG4gICAgZGVzY3JpcHRpdmVJbmNpZGVudFxufVxuKi9cblxudmFyIENsaXBDbG9uZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENsaXBDbG9uZShkbmEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xpcENsb25lKTtcblxuICAgIHRoaXMucnVuVGltZUluZm8gPSB7XG4gICAgICBjdXJyZW50TWlsbGlzZWNvbmQ6IDAsXG4gICAgICBzdGF0ZTogJ3RyYW5zaXRpb25hbCdcbiAgICB9O1xuICAgIHRoaXMuaWQgPSBoZWxwZXIuZ2V0QW5JZCgpO1xuICAgIHRoaXMucmVhbENsaXAgPSBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcDsgLy8gSW4gb3JkZXIgdG8gcmVuZGVyIGl0c2VsZiBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBmaXJzdCBpdCBuZWVkcyB0aGUgcHJvcHMgKGluY2x1ZGluZyBodG1sIGFuZCBjc3MpXG4gICAgLy8gZnJvbSB0aGUgcmVhbCBDbGlwIGl0IGNvcGllc1xuXG4gICAgdmFyIGNvbnN0cnVjdGlvbkFyZ3MgPSBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcC5leHBvcnRDb25zdHJ1Y3Rpb25Bcmd1bWVudHMoKTsgLy8gaXQgcHJvcGVybHkgc2V0cyBpdHMgb3duIGhvc3Qgb24gdGhlIHByb3BzIHRvIHVzZSB0byBpbml0aWFsaXNlIGl0cyBvd24gY2xpcFxuXG4gICAgdmFyIGhvc3RlZFByb3BzID0gX29iamVjdFNwcmVhZCh7fSwgY29uc3RydWN0aW9uQXJncy5wcm9wcywge1xuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZCxcbiAgICAgIGhvc3Q6IGRuYS5ob3N0LFxuICAgICAgaWQ6IHRoaXMuaWRcbiAgICB9KTsgLy8gd2UgY3JlYXRlIGEgY2xpcCBiZWNhdXNlIENsaXBzIG9uIGNyZWF0aW9uIHJlbmRlciBhbmQgdGh1cyBoYXZlIHRoZWlyIG93biBjb250ZXh0XG5cblxuICAgIHRoaXMub3duQ2xpcCA9IG5ldyBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5JbmNpZGVudChjb25zdHJ1Y3Rpb25BcmdzLmF0dHJzLCBob3N0ZWRQcm9wcyk7IC8vIGZsdXNoZXMgdGhlIHJlYWxDbGlwIHdpdGggaXRzIG93bkNsaXAncyBjb250ZXh0XG5cbiAgICBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcC5hZGRDb250ZXh0KHtcbiAgICAgIGNsaXBJZDogdGhpcy5pZCxcbiAgICAgIGNvbnRleHQ6IHRoaXMub3duQ2xpcC5vd25Db250ZXh0LFxuICAgICAgc3luY2hyb25pemU6IGRuYS5zeW5jaHJvbml6ZSxcbiAgICAgIHJ1blRpbWVJbmZvOiB0aGlzLnJ1blRpbWVJbmZvXG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2xpcENsb25lLCBbe1xuICAgIGtleTogXCJvblByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoZnJhY3Rpb24sIG1pbGxpc2Vjb25kcykge1xuICAgICAgdmFyIGZvcmNlUmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5yZWFsQ2xpcC5pbnN0YW50aWF0ZWRDaGFubmVscykge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMucmVhbENsaXAuaW5zdGFudGlhdGVkQ2hhbm5lbHNba2V5XTtcbiAgICAgICAgY2hhbm5lbC5tb3ZlVG8odGhpcy5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQsIG1pbGxpc2Vjb25kcywgdGhpcy5pZCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVuVGltZUluZm8uY3VycmVudE1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmRzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwQ2xvbmU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcENsb25lOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar conf = __webpack_require__(/*! ../../_configuration/generalConf */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler =\n/*#__PURE__*/\nfunction () {\n  function ContextHandler() {\n    _classCallCheck(this, ContextHandler);\n\n    this.customEntities = {};\n  }\n\n  _createClass(ContextHandler, [{\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {\n        return this.customEntities[mcid];\n      } else if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n        this.elementsByMCID[mcid] = element;\n        return element;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      if (selector.charAt(0) === \"!\") {\n        selector = selector.substr(1);\n\n        if (selector.charAt(0) === \"#\") {\n          return [this.customEntities[selector.substr(1)]];\n        } else if (selector.charAt(0) === \".\") {\n          var toReturn = [];\n\n          for (var key in this.customEntities) {\n            var entity = this.customEntities[key];\n\n            if (entity.classes.indexOf(selector.substr(1)) > -1) {\n              toReturn.push(entity);\n            }\n          }\n\n          return toReturn;\n        }\n      }\n\n      return Array.from(this.context.rootElement.querySelectorAll(selector));\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      if (element.customEntity === true) {\n        return element.id;\n      }\n\n      return element.getAttribute(conf.elements_data_attribute_name);\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.setAttribute(conf.elements_data_attribute_name, mcid);\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {\n        return \"!#\".concat(mcid);\n      }\n\n      return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n    }\n  }, {\n    key: \"setCustomEntity\",\n    value: function setCustomEntity(id, entity) {\n      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      if (Object.prototype.hasOwnProperty.call(this.customEntities, id)) {\n        helper.error(\"Clip \".concat(this.id, \" already has custom Entity with id: \").concat(id));\n        return false;\n      }\n\n      this.customEntities[id] = {\n        id: id,\n        entity: entity,\n        classes: classes,\n        customEntity: true\n      };\n      return true;\n    }\n  }]);\n\n  return ContextHandler;\n}();\n\nmodule.exports = ContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvaGVscGVycy9Db250ZXh0SGFuZGxlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9oZWxwZXJzL0NvbnRleHRIYW5kbGVyLmpzPzNkMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIGNvbmYgPSByZXF1aXJlKCcuLi8uLi9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZicpO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIENvbnRleHRIYW5kbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dEhhbmRsZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRleHRIYW5kbGVyKTtcblxuICAgIHRoaXMuY3VzdG9tRW50aXRpZXMgPSB7fTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb250ZXh0SGFuZGxlciwgW3tcbiAgICBrZXk6IFwiZ2V0RWxlbWVudEJ5TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50QnlNQ0lEKG1jaWQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jdXN0b21FbnRpdGllcywgbWNpZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tRW50aXRpZXNbbWNpZF07XG4gICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmVsZW1lbnRzQnlNQ0lELCBtY2lkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c0J5TUNJRFttY2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5jb250ZXh0LnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5nZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQobWNpZCkpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzQnlNQ0lEW21jaWRdID0gZWxlbWVudDtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiFcIikge1xuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cigxKTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICAgIHJldHVybiBbdGhpcy5jdXN0b21FbnRpdGllc1tzZWxlY3Rvci5zdWJzdHIoMSldXTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiLlwiKSB7XG4gICAgICAgICAgdmFyIHRvUmV0dXJuID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jdXN0b21FbnRpdGllcykge1xuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuY3VzdG9tRW50aXRpZXNba2V5XTtcblxuICAgICAgICAgICAgaWYgKGVudGl0eS5jbGFzc2VzLmluZGV4T2Yoc2VsZWN0b3Iuc3Vic3RyKDEpKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHRvUmV0dXJuLnB1c2goZW50aXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdG9SZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb250ZXh0LnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNQ0lEKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50LmN1c3RvbUVudGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5pZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TUNJRChlbGVtZW50LCBtY2lkKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShjb25mLmVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWUsIG1jaWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFbGVtZW50U2VsZWN0b3JCeU1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lEKG1jaWQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jdXN0b21FbnRpdGllcywgbWNpZCkpIHtcbiAgICAgICAgcmV0dXJuIFwiISNcIi5jb25jYXQobWNpZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnWycgKyBjb25mLmVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWUgKyAnPVwiJyArIG1jaWQgKyAnXCJdJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Q3VzdG9tRW50aXR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1c3RvbUVudGl0eShpZCwgZW50aXR5KSB7XG4gICAgICB2YXIgY2xhc3NlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG5cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jdXN0b21FbnRpdGllcywgaWQpKSB7XG4gICAgICAgIGhlbHBlci5lcnJvcihcIkNsaXAgXCIuY29uY2F0KHRoaXMuaWQsIFwiIGFscmVhZHkgaGFzIGN1c3RvbSBFbnRpdHkgd2l0aCBpZDogXCIpLmNvbmNhdChpZCkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3VzdG9tRW50aXRpZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGVudGl0eTogZW50aXR5LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBjdXN0b21FbnRpdHk6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29udGV4dEhhbmRsZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGV4dEhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler = __webpack_require__(/*! ./ContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\");\n\nvar HTMLFragmentContextHandler =\n/*#__PURE__*/\nfunction (_ContextHandler) {\n  _inherits(HTMLFragmentContextHandler, _ContextHandler);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function HTMLFragmentContextHandler() {\n    var _this;\n\n    var originalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HTMLFragmentContextHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLFragmentContextHandler).call(this));\n    var props = Object.assign({}, originalProps);\n\n    if (!helper.isObject(props)) {\n      helper.error(\"HTMLFragmentContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"html\")) {\n      props.html = '';\n    }\n\n    _this.isDOM = true;\n    var fragment = document.createDocumentFragment();\n    var wrapper = document.createElement('div');\n\n    if (Object.prototype.hasOwnProperty.call(props, \"containerParams\")) {\n      if (Object.prototype.hasOwnProperty.call(props, \"width\")) {\n        wrapper.style.width = props.containerParams.width;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props, \"height\")) {\n        wrapper.style.height = props.containerParams.height;\n      }\n    }\n\n    wrapper.innerHTML = helper.renderTemplate(props.html, {\n      params: props.initParams\n    });\n    fragment.appendChild(wrapper);\n    wrapper.style.overflow = \"hidden\";\n    _this.rootElement = wrapper;\n    /* TODO make the context definition more generic so always the setCustomEntity gets set\n    along with the rest of the required methods, so it can be used on the afterRender method\n    of the DOMClip.\n    The Clip will expose a method \"setCustomEntity\" that will set custom entities.\n    TEST\n    */\n\n    _this.context = {\n      document: document,\n      window: window,\n      clipContainer: _this.rootElement,\n      rootElement: wrapper,\n      unmount: function unmount() {\n        props.host.removeChild(fragment);\n      },\n      getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this)),\n      fragment: true\n    };\n    _this.elementsByMCID = {};\n    return _this;\n  }\n\n  return HTMLFragmentContextHandler;\n}(ContextHandler);\n\nmodule.exports = HTMLFragmentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvaGVscGVycy9IVE1MRnJhZ21lbnRDb250ZXh0SGFuZGxlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9oZWxwZXJzL0hUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyLmpzPzAyZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG5cbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG5cbnZhciBDb250ZXh0SGFuZGxlciA9IHJlcXVpcmUoJy4vQ29udGV4dEhhbmRsZXInKTtcblxudmFyIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29udGV4dEhhbmRsZXIpIHtcbiAgX2luaGVyaXRzKEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyLCBfQ29udGV4dEhhbmRsZXIpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBhbiBvYmplY3QgdGhhdCBzaG91bGQgY29udGFpbiBhbGwgb2YgdGhlIGZvbGxvd2luZyBrZXlzOlxuICAgKiAtIGh0bWwgKHRoZSBodG1sIHRlbXBsYXRlIHRvIHJlbmRlcilcbiAgICogLSBjc3MgKHRoZSBjc3MgdGVtcGxhdGUgb2YgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gaW5pdFBhcmFtcyAob3B0aW9uYWwgLyB0aGUgaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBib3RoIG9uIHRoZSBjc3MgYW5kIHRoZSBodG1sIHRlbXBsYXRlcyBpbiBvcmRlciB0byByZW5kZXIpXG4gICAqIC0gaG9zdCAoYW4gRWxlbWVudCBvYmplY3QgdGhhdCB3aWxsIGhvc3QgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gY29udGFpbmVyUGFyYW1zIChhbiBvYmplY3QgdGhhdCBob2xkcyBwYXJhbWV0ZXJzIHRvIGFmZmVjdCB0aGUgY29udGFpbmVyIG9mIHRoZSBpc29sYXRlZCB0cmVlLCBlLmcuIHdpZHRoLCBoZWlnaHQgZXRjKVxuICAgKi9cbiAgZnVuY3Rpb24gSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9yaWdpbmFsUHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyKS5jYWxsKHRoaXMpKTtcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbFByb3BzKTtcblxuICAgIGlmICghaGVscGVyLmlzT2JqZWN0KHByb3BzKSkge1xuICAgICAgaGVscGVyLmVycm9yKFwiSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIgZXhwZWN0cyBhbiBvYmplY3Qgb24gaXRzIGNvbnN0cnVjdG9yLiBcIi5jb25jYXQoX3R5cGVvZihwcm9wcyksIFwiIHBhc3NlZFwiKSk7XG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJodG1sXCIpKSB7XG4gICAgICBwcm9wcy5odG1sID0gJyc7XG4gICAgfVxuXG4gICAgX3RoaXMuaXNET00gPSB0cnVlO1xuICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJjb250YWluZXJQYXJhbXNcIikpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwid2lkdGhcIikpIHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS53aWR0aCA9IHByb3BzLmNvbnRhaW5lclBhcmFtcy53aWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJoZWlnaHRcIikpIHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5oZWlnaHQgPSBwcm9wcy5jb250YWluZXJQYXJhbXMuaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gaGVscGVyLnJlbmRlclRlbXBsYXRlKHByb3BzLmh0bWwsIHtcbiAgICAgIHBhcmFtczogcHJvcHMuaW5pdFBhcmFtc1xuICAgIH0pO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgIHdyYXBwZXIuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIF90aGlzLnJvb3RFbGVtZW50ID0gd3JhcHBlcjtcbiAgICAvKiBUT0RPIG1ha2UgdGhlIGNvbnRleHQgZGVmaW5pdGlvbiBtb3JlIGdlbmVyaWMgc28gYWx3YXlzIHRoZSBzZXRDdXN0b21FbnRpdHkgZ2V0cyBzZXRcbiAgICBhbG9uZyB3aXRoIHRoZSByZXN0IG9mIHRoZSByZXF1aXJlZCBtZXRob2RzLCBzbyBpdCBjYW4gYmUgdXNlZCBvbiB0aGUgYWZ0ZXJSZW5kZXIgbWV0aG9kXG4gICAgb2YgdGhlIERPTUNsaXAuXG4gICAgVGhlIENsaXAgd2lsbCBleHBvc2UgYSBtZXRob2QgXCJzZXRDdXN0b21FbnRpdHlcIiB0aGF0IHdpbGwgc2V0IGN1c3RvbSBlbnRpdGllcy5cbiAgICBURVNUXG4gICAgKi9cblxuICAgIF90aGlzLmNvbnRleHQgPSB7XG4gICAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgICB3aW5kb3c6IHdpbmRvdyxcbiAgICAgIGNsaXBDb250YWluZXI6IF90aGlzLnJvb3RFbGVtZW50LFxuICAgICAgcm9vdEVsZW1lbnQ6IHdyYXBwZXIsXG4gICAgICB1bm1vdW50OiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgICBwcm9wcy5ob3N0LnJlbW92ZUNoaWxkKGZyYWdtZW50KTtcbiAgICAgIH0sXG4gICAgICBnZXRFbGVtZW50czogX3RoaXMuZ2V0RWxlbWVudHMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksXG4gICAgICBnZXRNQ0lEOiBfdGhpcy5nZXRNQ0lELmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgc2V0TUNJRDogX3RoaXMuc2V0TUNJRC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSxcbiAgICAgIGdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRDogX3RoaXMuZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lELmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgZ2V0RWxlbWVudEJ5TUNJRDogX3RoaXMuZ2V0RWxlbWVudEJ5TUNJRC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSxcbiAgICAgIHNldEN1c3RvbUVudGl0eTogX3RoaXMuc2V0Q3VzdG9tRW50aXR5LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgZnJhZ21lbnQ6IHRydWVcbiAgICB9O1xuICAgIF90aGlzLmVsZW1lbnRzQnlNQ0lEID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyO1xufShDb250ZXh0SGFuZGxlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler = __webpack_require__(/*! ./ContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\");\n\nvar IframeContextHandler =\n/*#__PURE__*/\nfunction (_ContextHandler) {\n  _inherits(IframeContextHandler, _ContextHandler);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function IframeContextHandler() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IframeContextHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IframeContextHandler).call(this));\n\n    if (!helper.isObject(props)) {\n      helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'html')) {\n      helper.error(\"ContextHandler expects the html key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'css')) {\n      helper.error(\"ContextHandler expects the css key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'initParams')) {\n      helper.info(\"ContextHandler got null initParams\");\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'host')) {\n      helper.error(\"ContextHandler expects the host key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    _this.isDOM = true;\n    var ownerDocument = props.host.ownerDocument;\n\n    if (!ownerDocument.getElementById(\"@kissmybutton/motorcortex/iframeContextHandler/css\")) {\n      var seamlessCSS = \"\\n            iframe[seamless]{\\n                background-color: transparent;\\n                border: 0px none transparent;\\n                padding: 0px;\\n                overflow: hidden;\\n            }\\n            \";\n      var iframesCSS = ownerDocument.createElement('style');\n      iframesCSS.id = \"@kissmybutton/motorcortex/iframeContextHandler/css\";\n      iframesCSS.type = 'text/css';\n      var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];\n\n      if (iframesCSS.styleSheet) {\n        iframesCSS.styleSheet.cssText = seamlessCSS;\n      } else {\n        iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));\n      }\n\n      Head.appendChild(iframesCSS);\n    } // Create an iframe:\n\n\n    var iframe = ownerDocument.createElement('iframe');\n    props.host.appendChild(iframe);\n    iframe.setAttribute(\"seamless\", \"seamless\");\n\n    if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {\n        iframe.setAttribute('width', props.containerParams.width);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {\n        iframe.setAttribute('height', props.containerParams.height);\n      }\n    } // Initialise the iframe\n\n\n    iframe.src = ''; // Put it in the document (but hidden):\n\n    var iframeDocument = iframe.contentWindow || iframe.contentDocument;\n\n    if (iframeDocument.document) {\n      iframeDocument = iframeDocument.document;\n    }\n\n    iframeDocument.write(helper.renderTemplate(props.html, {\n      params: props.initParams\n    }));\n    var bodyFixCSS = \"\\n        body{\\n            padding:0;\\n            margin:0;\\n        }\\n        \";\n    var styleTag = iframeDocument.createElement('style');\n    styleTag.type = 'text/css';\n\n    if (styleTag.styleSheet) {\n      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {\n        params: props.initParams\n      }) + bodyFixCSS;\n    } else {\n      styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));\n    }\n\n    var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];\n    head.appendChild(styleTag);\n\n    if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {\n      for (var i = 0; i < props.fonts.length; i++) {\n        var theFont = props.fonts[i];\n\n        if (theFont.type === \"google-font\") {\n          var fontTag = iframeDocument.createElement('link');\n          fontTag.setAttribute('rel', 'stylesheet');\n          fontTag.setAttribute('src', theFont.src);\n          head.appendChild(fontTag);\n        }\n      }\n    }\n\n    _this.rootElement = iframe;\n    iframeDocument.close();\n    _this.context = {\n      document: iframeDocument,\n      window: iframe.contentWindow || iframe,\n      clipContainer: iframe,\n      rootElement: iframeDocument.body,\n      unmount: function unmount() {\n        props.host.removeChild(iframe);\n      },\n      getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))\n    };\n    _this.elementsByMCID = {};\n    return _this;\n  }\n\n  return IframeContextHandler;\n}(ContextHandler);\n\nmodule.exports = IframeContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler = __webpack_require__(/*! ./ContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\");\n\nvar WebComponentContextHandler =\n/*#__PURE__*/\nfunction (_ContextHandler) {\n  _inherits(WebComponentContextHandler, _ContextHandler);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function WebComponentContextHandler() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebComponentContextHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebComponentContextHandler).call(this));\n\n    if (!helper.isObject(props)) {\n      helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"html\")) {\n      helper.error(\"ContextHandler expects the html key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"css\")) {\n      helper.error(\"ContextHandler expects the css key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"host\")) {\n      helper.error(\"ContextHandler expects the host key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    _this.isDOM = true;\n    var shadow = props.host.attachShadow({\n      mode: 'closed'\n    });\n    var wrapper = document.createElement('div');\n\n    if (Object.prototype.hasOwnProperty.call(props, \"containerParams\")) {\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, \"width\")) {\n        wrapper.style.width = props.containerParams.width;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, \"height\")) {\n        wrapper.style.height = props.containerParams.height;\n      }\n    }\n\n    wrapper.innerHTML = helper.renderTemplate(props.html + '<slot></slot>', {\n      params: props.initParams\n    });\n    shadow.appendChild(wrapper);\n    var styleTag = document.createElement('style');\n    styleTag.type = 'text/css';\n\n    if (styleTag.styleSheet) {\n      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {\n        params: props.initParams\n      });\n    } else {\n      styleTag.appendChild(document.createTextNode(props.css));\n    }\n\n    shadow.appendChild(styleTag);\n\n    if (Object.prototype.hasOwnProperty.call(props, \"fonts\")) {\n      for (var i = 0; i < props.fonts.length; i++) {\n        var theFont = props.fonts[i];\n\n        if (theFont.type === \"google-font\") {\n          var fontTag = document.createElement('link');\n          fontTag.setAttribute('rel', 'stylesheet');\n          fontTag.setAttribute('src', theFont.src);\n          shadow.appendChild(fontTag);\n        }\n      }\n    }\n\n    wrapper.style.overflow = \"hidden\";\n    _this.rootElement = wrapper;\n    _this.context = {\n      document: document,\n      window: window,\n      clipContainer: _this.rootElement,\n      rootElement: wrapper,\n      unmount: function unmount() {\n        try {\n          props.host.removeChild(shadow);\n        } catch (er) {\n          helper.warning('The element of the Clip to be removed seems not to exist any more');\n        }\n      },\n      getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))\n    };\n    _this.elementsByMCID = {};\n    return _this;\n  }\n\n  return WebComponentContextHandler;\n}(ContextHandler);\n\nmodule.exports = WebComponentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DescriptiveClip = __webpack_require__(/*! ./DescriptiveClip */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\");\n\nvar DescriptiveAudioClip =\n/*#__PURE__*/\nfunction (_DescriptiveClip) {\n  _inherits(DescriptiveAudioClip, _DescriptiveClip);\n\n  function DescriptiveAudioClip(audioSources) {\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DescriptiveAudioClip);\n\n    var propsToPass = {\n      audio: 'only',\n      audioSources: audioSources\n    };\n\n    if (id !== null) {\n      propsToPass.id = id;\n    }\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveAudioClip).call(this, propsToPass));\n  }\n\n  return DescriptiveAudioClip;\n}(DescriptiveClip);\n\nmodule.exports = DescriptiveAudioClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL0Rlc2NyaXB0aXZlQXVkaW9DbGlwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9EZXNjcmlwdGl2ZUF1ZGlvQ2xpcC5qcz9iY2VkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBEZXNjcmlwdGl2ZUNsaXAgPSByZXF1aXJlKCcuL0Rlc2NyaXB0aXZlQ2xpcCcpO1xuXG52YXIgRGVzY3JpcHRpdmVBdWRpb0NsaXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9EZXNjcmlwdGl2ZUNsaXApIHtcbiAgX2luaGVyaXRzKERlc2NyaXB0aXZlQXVkaW9DbGlwLCBfRGVzY3JpcHRpdmVDbGlwKTtcblxuICBmdW5jdGlvbiBEZXNjcmlwdGl2ZUF1ZGlvQ2xpcChhdWRpb1NvdXJjZXMpIHtcbiAgICB2YXIgaWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVzY3JpcHRpdmVBdWRpb0NsaXApO1xuXG4gICAgdmFyIHByb3BzVG9QYXNzID0ge1xuICAgICAgYXVkaW86ICdvbmx5JyxcbiAgICAgIGF1ZGlvU291cmNlczogYXVkaW9Tb3VyY2VzXG4gICAgfTtcblxuICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgcHJvcHNUb1Bhc3MuaWQgPSBpZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKERlc2NyaXB0aXZlQXVkaW9DbGlwKS5jYWxsKHRoaXMsIHByb3BzVG9QYXNzKSk7XG4gIH1cblxuICByZXR1cm4gRGVzY3JpcHRpdmVBdWRpb0NsaXA7XG59KERlc2NyaXB0aXZlQ2xpcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVzY3JpcHRpdmVBdWRpb0NsaXA7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Playable = __webpack_require__(/*! ../Clip/Playable */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar FragmentedClip = __webpack_require__(/*! ../Clip/FragmentedClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js\");\n\nvar Clip = __webpack_require__(/*! ../Clip/DOMClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Clip/ClipsChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar ClipClone = __webpack_require__(/*! ../Clip/RootClipClone */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js\");\n\nvar AudioClip = __webpack_require__(/*! ../Audio/AudioClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\");\n\nvar NullClip = __webpack_require__(/*! ../Clip/NullClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js\");\n/**\n * Along with the expected props for the Clip on the props support the audio key.\n * The audio can take one of the 3 following values:\n * - \"on\": The Clip has audio enabled\n * - \"off\": The Clip has audio disabled\n * - \"only\": The Clip is only audio\n *\n * Also, in the case audio is on or only the user should pass the \"audioSources\"\n * key containing all the audio sources they want to pass on the Audio Context\n * of their clip. Please check AudioClip for details on the expected format\n **/\n\n\nvar DescriptiveClip =\n/*#__PURE__*/\nfunction (_Playable) {\n  _inherits(DescriptiveClip, _Playable);\n\n  function DescriptiveClip(attrs) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DescriptiveClip);\n\n    var attrsToPass, propsToUse;\n\n    if (props === null) {\n      attrsToPass = {};\n      propsToUse = attrs;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = attrs;\n      propsToUse = props;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveClip).call(this, attrsToPass, propsToUse)); // isTheRootClip defines whether the Clip is the root or not. It depends on\n    // the host or selector parameter passed on props (if host is present then\n    // the Clip is the root Clip while if the Clip gets initialised by a selector\n    // is not)\n\n    _this.isTheRootClip = false; // check if\n\n    var ingredients = {\n      id: _this.id,\n      attrs: attrsToPass,\n      props: _objectSpread({}, propsToUse, {\n        html: Object.prototype.hasOwnProperty.call(propsToUse, \"html\") ? propsToUse.html : _this.html,\n        css: Object.prototype.hasOwnProperty.call(propsToUse, \"css\") ? propsToUse.css : _this.css,\n        fonts: Object.prototype.hasOwnProperty.call(propsToUse, \"fonts\") ? propsToUse.fonts : _this.fonts,\n        runTimeInfo: _this.runTimeInfo,\n        subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n      }),\n      plugin_npm_name: _this.constructor.plugin_npm_name,\n      Channel: _this.constructor.Channel,\n      DescriptiveIncident: _assertThisInitialized(_this)\n    }; // Decide what kind of audio (or non-audio) Clip we are dealing with\n\n    _this.audio = \"on\";\n\n    if (Object.prototype.hasOwnProperty.call(_this.constructor, 'audio')) {\n      _this.audio = _this.constructor.audio;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(propsToUse, 'audio')) {\n      _this.audio = propsToUse.audio;\n    } // decide if this is the root clip\n\n\n    if (Object.prototype.hasOwnProperty.call(propsToUse, \"selector\") && propsToUse.selector !== undefined && _this.constructor.customClip !== true) {\n      ingredients.Incident = FragmentedClip; // TODO it doesn't take in account the get html and get css of the Descriptive Clip\n    } else if (Object.prototype.hasOwnProperty.call(propsToUse, \"selector\") && propsToUse.selector !== undefined && _this.constructor.customClip === true) {\n      delete ingredients.props.selector;\n      var FragmentWrapper = new FragmentedClip({\n        html: '<div id=\"clip-container\"></div>'\n      });\n      ingredients.props.host = FragmentWrapper.rootElement;\n      ingredients.Incident = _this.constructor.Incident;\n    } else if (_this.audio === \"only\" && _this.props.root !== true) {\n      // audioClips can never be the root\n      _this.isTheRootClip = false;\n    } else {\n      _this.isTheRootClip = true;\n      /*\n      blockingWaitings are been triggered by Incidents when there is the\n      need to halt the Clip's execution and wait. As an example a blocking\n      waiting can be set by an Audio Playback Incident when the audio has\n      not been loaded yet.\n      Each blocking waiting has an id and via the same id the waiting can be\n      unblocked.\n      The blockingWaitings property of the root Clip is a collection with\n      keys the blocking waitings ids and values the description of each waiting\n      which consists of:\n      {\n          id\n          description\n          incidentId\n      }\n      The blocking waitings are triggered by real Incidents living on the real\n      Clips of the Descriptive Clip (either the audioClip or the realClip).\n      The root that a waiting set or unset follows is from any real incident\n      up to its ContextAware Incident and from there\n      up to the real Clip and from thre to its DescriptiveTree and from there\n      all the way up to the root Descriptive Clip.\n      Blocking waitings must always be triggered on the \"onProgress\" or on\n      the \"play\" methods of Incidents. Setting a blocking waiting from anywhere\n      else is an error\n      */\n\n      _this.blockingWaitings = {};\n      ingredients.Incident = _this.constructor.Incident;\n    } // we initialise real and audio clips of the Clip by checking the static audio\n    // property\n    // the property this.audio helps incidentFromDescription identify if the Incident\n    // participates or not on the audioClip. By default is \"on\" but if the props.audio is set to off\n    // it turns to \"off\" so the DC gets totally ignored on the addition process on audio clip\n\n    /* The audio value is set in the following manner\n        - first we check if the Class has a static audio parameter and if yes we keep it\n        - then we check if this.props has the audio key and if yes we keep this one\n        - otherwise we use the default (\"on\")\n    */\n\n\n    if (_this.audio === 'on' || _this.audio === 'off') {\n      _this.realClip = incidentFromIngredients(ingredients);\n    } else {\n      _this.realClip = new NullClip();\n    }\n\n    if (_this.audio === 'on' || _this.audio === 'only') {\n      var audioIngredients = {\n        id: _this.id,\n        attrs: {},\n        props: {\n          audioSources: Object.prototype.hasOwnProperty.call(propsToUse, \"audioSources\") ? propsToUse.audioSources : _this.audioSources,\n          runTimeInfo: _this.runTimeInfo,\n          subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n        },\n        plugin_npm_name: _this.constructor.plugin_npm_name,\n        Channel: _this.constructor.Channel,\n        Incident: AudioClip,\n        DescriptiveIncident: _assertThisInitialized(_this)\n      };\n      _this.audioClip = incidentFromIngredients(audioIngredients);\n    } else {\n      _this.audio = \"off\";\n      _this.audioClip = new NullClip();\n    } // passiveAddition is a flag property indicating that any Incident to be\n    // added to the Clip will be passive. It initialises with value = false\n    // on DescriptiveGroup where it's originaly defined.\n    // Here we change its value just before the buildTree method execution\n    // so all Incidents added on it get the \"passive\" flag and don't get\n    // exported on the exportDefinition method. Once the buildTree method\n    // finishes we set it back to its original value (false)\n\n\n    _this.passiveAddition = true;\n\n    _this._buildTree();\n\n    _this.passiveAddition = false;\n    return _this;\n  }\n\n  _createClass(DescriptiveClip, [{\n    key: \"_buildTree\",\n\n    /*\n    the _buildTree method acts as a proxy to the buildTree method defined by the\n    developers. The reason for this is that the actual buildTree method should\n    be executed in different order on Groups and on Clips (that extend Groups).\n    Calling the super on constructor fires the _buildTree execution on the\n    Group's constructor but this breaks on Clip as the realClip has not been\n    initialised yet.\n    */\n    value: function _buildTree() {\n      if (this.realClip === undefined) {\n        return;\n      }\n\n      this.buildTree();\n    }\n    /**\n     * When the resize command is given directly to a DescriptiveClip no checks\n     * need to be performed.\n     * DescriptiveClip directly invokes the _resize method of ExtendableClip which\n     * resizes the full clip\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(newSize) {\n      this.realClip._resize(newSize / this.duration);\n\n      this.audioClip._resize(newSize / this.duration);\n\n      this.duration = newSize;\n      this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n      this.putMessageOnPipe('flash', {}, 'RootClip', {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n      return {\n        result: true\n      };\n    }\n    /*************************** HANDLING METHODS *******************************/\n\n  }, {\n    key: \"handleCheckForClip\",\n    value: function handleCheckForClip(target, payload) {\n      // eslint-disable-line no-unused-vars\n      return true;\n    }\n  }, {\n    key: \"handleCheckAddition\",\n    value: function handleCheckAddition(target, payload) {\n      /* Is the responsibility of the DescriptiveClip to pass the addition request\n      to its real clip and expect for a response. */\n      var res = this.realClip.addIncident(payload);\n      var audioRes = this.audioClip.addIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckMove\",\n    value: function handleCheckMove(target, payload) {\n      var res = this.realClip.moveIncident(payload);\n      var audioRes = this.audioClip.moveIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckDeletion\",\n    value: function handleCheckDeletion(target, payload) {\n      var res = this.realClip.removeIncident(payload);\n      var audioRes = this.audioClip.removeIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckResize\",\n    value: function handleCheckResize(target, payload) {\n      var res = this.realClip.resizeIncident(payload);\n      var audioRes = this.audioClip.resizeIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleFlash\",\n    value: function handleFlash(target, payload) {\n      // eslint-disable-line no-unused-vars\n      if (this.isTheRootClip) {\n        this.flash();\n      } else {\n        return this.bypass();\n      }\n    }\n    /****************** BLOCKING WAITINGS HANDLING **************************/\n\n    /***********************************************************************/\n\n  }, {\n    key: \"handleSetBlock\",\n    value: function handleSetBlock(target, payload) {\n      // only accepts blocks if is the root clip and if it's playing\n      if (this.isTheRootClip) {\n        if (this.runTimeInfo.state === \"transitional\") {\n          return;\n        }\n\n        if (this.runTimeInfo.state !== 'blocked') {\n          this.statusBeforeBlock = this.runTimeInfo.state;\n        }\n\n        this.blockingWaitings[payload.id] = payload;\n        this.block();\n      } else {\n        return this.bypass();\n      }\n    }\n  }, {\n    key: \"handleUnBlock\",\n    value: function handleUnBlock(target, payload) {\n      if (this.isTheRootClip) {\n        if (Object.prototype.hasOwnProperty.call(this.blockingWaitings, payload.id)) {\n          delete this.blockingWaitings[payload.id];\n\n          if (Object.keys(this.blockingWaitings).length === 0) {\n            if (this.statusBeforeBlock === \"playing\") {\n              this.previousTimeStamp = -1;\n              this.play();\n            } else {\n              this.arm();\n            }\n          }\n        }\n      } else {\n        return this.bypass();\n      }\n    }\n    /* empty blocking waitings on transition start */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(DescriptiveClip.prototype), \"stop\", this).call(this);\n\n      this.blockingWaitings = {};\n    }\n    /***********************************************************************/\n\n    /***********************************************************************/\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, millisecond) {\n      this.realClip.onProgress(fraction, millisecond);\n      this.audioClip.onProgress(fraction, millisecond);\n    }\n    /*************************************************************/\n\n  }, {\n    key: \"paste\",\n    value: function paste(host) {\n      if (this.isTheRootClip) {\n        var clipClone = new ClipClone({\n          host: host,\n          descriptiveIncident: this\n        });\n        return clipClone;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {\n      this.realClip.flash();\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(vol) {\n      if (vol < 0 || vol > 1) {\n        return {\n          result: false,\n          errors: [{\n            type: 'invalid volume number'\n          }]\n        };\n      } else if (this.audio === 'off') {\n        return {\n          result: false,\n          errors: [{\n            type: 'can not set volume of Clip with audio off'\n          }]\n        };\n      } else {\n        this.audioClip.setVolume(vol);\n        return {\n          result: true\n        };\n      }\n    }\n  }, {\n    key: \"selectorToPassToChildren\",\n    get: function get() {\n      return null; // the Clip (any Clip) resets the selection cascading\n    }\n  }, {\n    key: \"inheritedSelector\",\n    get: function get() {\n      return this._inheritedSelector;\n    },\n    set: function set(value) {\n      this._inheritedSelector = value;\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"fonts\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"audioSources\",\n    get: function get() {\n      return [];\n    }\n  }]);\n\n  return DescriptiveClip;\n}(Playable);\n\n_defineProperty(DescriptiveClip, \"isClip\", true);\n\n_defineProperty(DescriptiveClip, \"Incident\", Clip);\n\n_defineProperty(DescriptiveClip, \"plugin_npm_name\", \"@kissmybutton/self-contained-incidents\");\n\n_defineProperty(DescriptiveClip, \"Channel\", Channel);\n\n_defineProperty(DescriptiveClip, \"ClassName\", \"Clip\");\n\nmodule.exports = DescriptiveClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Node = __webpack_require__(/*! ../Tree/Node */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\");\n\nvar resize = __webpack_require__(/*! ./decorators/resize */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\");\n\nvar editAttributes = __webpack_require__(/*! ./decorators/editAttributes */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\");\n\nvar editProperties = __webpack_require__(/*! ./decorators/editProperties */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\");\n\nvar selectorGetter = __webpack_require__(/*! ./decorators/selector */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\");\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar DescriptiveGroup = _decorate(null, function (_initialize, _Node) {\n  var DescriptiveGroup =\n  /*#__PURE__*/\n  function (_Node2) {\n    _inherits(DescriptiveGroup, _Node2);\n\n    function DescriptiveGroup() {\n      var _this;\n\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, DescriptiveGroup);\n\n      if (props === null) {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, attrs));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.attrs = {};\n        _this.props = attrs;\n      } else {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, props));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.attrs = attrs;\n        _this.props = props;\n      }\n\n      _this._inheritedSelector = null; // passiveAddition is a flag property indicating that any Incident to be\n      // added to the Clip will be passive. It initialises with value = false\n      // on DescriptiveGroup where it's originaly defined.\n      // Here we change its value just before the buildTree method execution\n      // so all Incidents added on it get the \"passive\" flag and don't get\n      // exported on the exportDefinition method. Once the buildTree method\n      // finishes we set it back to its original value (false)\n\n      _this.passiveAddition = true;\n\n      _this._buildTree();\n\n      _this.passiveAddition = false;\n      return _possibleConstructorReturn(_this);\n    }\n\n    return DescriptiveGroup;\n  }(_Node);\n\n  return {\n    F: DescriptiveGroup,\n    d: [{\n      kind: \"field\",\n      \"static\": true,\n      key: \"Incident\",\n      value: function value() {\n        return Group;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"plugin_npm_name\",\n      value: function value() {\n        return \"motor-cortex-js\";\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"Channel\",\n      value: function value() {\n        return Channel;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"ClassName\",\n      value: function value() {\n        return \"Group\";\n      }\n    }, {\n      kind: \"method\",\n      decorators: [editAttributes],\n      key: \"editAttributes\",\n      value: function editAttributes() {}\n    }, {\n      kind: \"method\",\n      decorators: [editProperties],\n      key: \"editProperties\",\n      value: function editProperties() {}\n    }, {\n      kind: \"method\",\n      decorators: [resize],\n      key: \"resize\",\n      value: function resize() {}\n    }, {\n      kind: \"method\",\n      decorators: [selectorGetter],\n      key: \"selector\",\n      value: function selector() {}\n    }, {\n      kind: \"method\",\n      key: \"_buildTree\",\n      value: function _buildTree() {\n        this.buildTree();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rebuildTree\",\n      value: function _rebuildTree() {\n        // remove all direct passive incidents as they might be dependent on the edited attrs/props\n        for (var id in this.children) {\n          var theChild = this.children[id];\n\n          if (theChild.leaf.passive === true) {\n            this.removeIncident(theChild.id);\n          }\n        } // run buildTree again\n\n\n        this.passiveAddition = true;\n        this.buildTree();\n        this.passiveAddition = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"buildTree\",\n      value: function buildTree() {}\n    }, {\n      kind: \"method\",\n      key: \"manageEditAttrProps\",\n      value: function manageEditAttrProps(newAttrs, type) {\n        // get a permanent reference to its parent node\n        var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n        var position = parentNode.getLeafPosition(this.id); // keep a backup of the current attrs / props\n\n        var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n        this[type] = newAttrs; // first detach the Incident from its parent\n\n        parentNode.removeIncident(this.id); // remove all direct passive incidents as they might be dependent on the edited attrs/props\n\n        this._rebuildTree(); // try to add the altered Group\n\n\n        var res = parentNode.addIncident(this, position);\n\n        if (res.result === false) {\n          this[type] = oldAttrs;\n\n          this._rebuildTree();\n\n          parentNode.addIncident(this, position);\n          return res;\n        }\n\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        _get(_getPrototypeOf(DescriptiveGroup.prototype), \"detachFromParent\", this).call(this);\n\n        this.inheritedSelector = null;\n      }\n    }, {\n      kind: \"get\",\n      key: \"inheritedSelector\",\n      value: function inheritedSelector() {\n        return this._inheritedSelector;\n      }\n    }, {\n      kind: \"set\",\n      key: \"inheritedSelector\",\n      value: function inheritedSelector(value) {\n        this._inheritedSelector = value;\n\n        for (var id in this.children) {\n          var theChild = this.children[id].leaf;\n          theChild.inheritedSelector = this.selector();\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"selectorToPassToChildren\",\n      value: function selectorToPassToChildren() {\n        return this.selector();\n      }\n      /**\n       * The purpose of this method is to export a portable definition that can be\n       * later used in order to rebuild the Inicdent at any time\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"exportDefinition\",\n      value: function exportDefinition() {\n        var toReturn = {\n          ClassName: this.constructor.ClassName,\n          plugin_npm_name: this.constructor.plugin_npm_name,\n          attrs: this.attrs,\n          props: this.props,\n          incidents: {}\n        };\n\n        for (var id in this.children) {\n          var theChild = this.children[id];\n\n          if (theChild.leaf.passive === true) {\n            continue;\n          }\n\n          toReturn.incidents[id] = {\n            id: theChild.id,\n            position: theChild.position,\n            leaf: theChild.leaf.exportDefinition()\n          };\n        }\n\n        return toReturn;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addIncident\",\n      value: function addIncident(descriptiveIncident, position) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          check: true\n        };\n        descriptiveIncident.inheritedSelector = this.selectorToPassToChildren;\n\n        if (options.check === true) {\n          var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkAddition\", this).call(this, descriptiveIncident, position);\n\n          if (initialCheck.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n            return initialCheck;\n          }\n          /* Check for null or relative selector Incidents with no inherited selector */\n\n\n          var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _TREECONST._DIRECTIONS._UP\n          });\n\n          if (checkIfBelongsToClip.response === true) {\n            // if the Group belongs on a Clip\n            var selectorsCheck = descriptiveIncident.putMessageOnPipe('checkForInvalidSelectors', {}, null, {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._DOWN\n            });\n\n            if (selectorsCheck.length > 0) {\n              var errors = [];\n\n              for (var i = 0; i < selectorsCheck.length; i++) {\n                errors.push(selectorsCheck[i].response);\n              }\n\n              return {\n                result: false,\n                errors: errors\n              };\n            }\n          } // sends the check request to its root, either a headless root or a Descriptive Clip\n\n\n          var mcCheck = this.putMessageOnPipe('checkAddition', {\n            incident: descriptiveIncident,\n            millisecond: position,\n            parentGroupId: this.id\n          }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _TREECONST._DIRECTIONS._UP\n          });\n\n          if (mcCheck.response.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n            return mcCheck.response;\n          }\n        } // if the passiveAddition flag is true we set the passive flag of the Incident\n        // to true before adding it to our Group\n\n\n        if (this.passiveAddition === true) {\n          descriptiveIncident.passive = true;\n        }\n\n        var res = this.addChild(descriptiveIncident, position);\n\n        if (res.result === false) {\n          descriptiveIncident.inheritedSelector = null;\n        }\n\n        return res;\n      }\n      /**\n       * @param input - can either be object or id\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"moveIncident\",\n      value: function moveIncident(input, position) {\n        var id = input;\n\n        if (_typeof(input) === \"object\") {\n          id = input.id;\n        }\n\n        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkEditPosition\", this).call(this, id, position);\n\n        if (initialCheck.result === false) {\n          return initialCheck;\n        }\n\n        var originalPosition = this.getLeafPosition(id);\n        var positionDelta = position - originalPosition;\n\n        if (positionDelta === 0) {\n          return {\n            result: true\n          };\n        }\n\n        var mcCheck = this.putMessageOnPipe('checkMove', {\n          id: id,\n          millisecond: position,\n          positionDelta: positionDelta,\n          parentGroupId: this.id\n        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n\n        var res = this.editPosition(id, position);\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"removeIncident\",\n      value: function removeIncident(input) {\n        var id = input;\n\n        if (_typeof(input) === \"object\") {\n          id = input.id;\n        }\n\n        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkRemoveChild\", this).call(this, id);\n\n        if (initialCheck.result === false) {\n          return initialCheck;\n        }\n\n        var mcCheck = this.putMessageOnPipe('checkDeletion', {\n          id: id,\n          parentGroupId: this.id\n        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n\n        var res = this.removeChild(id);\n        return res;\n      }\n      /*************************** HANDLING METHODS *******************************/\n\n    }, {\n      kind: \"method\",\n      key: \"handleCheckForClip\",\n      value: function handleCheckForClip(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckAddition\",\n      value: function handleCheckAddition(target, payload) {\n        // eslint-disable-line no-unused-vars\n\n        /*\n        The DescriptiveGroup handles the checkAddition command which has the UP\n        direction. If the DG has a parent it forwards the command to it. If not\n        it just returns true, as it is a deadless tree\n        */\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckMove\",\n      value: function handleCheckMove(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckDeletion\",\n      value: function handleCheckDeletion(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckResize\",\n      value: function handleCheckResize(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }]\n  };\n}, Node);\n\nmodule.exports = DescriptiveGroup;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar resize = __webpack_require__(/*! ./decorators/resize */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\");\n\nvar editAttributes = __webpack_require__(/*! ./decorators/editAttributes */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\");\n\nvar editProperties = __webpack_require__(/*! ./decorators/editProperties */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\");\n\nvar selectorGetter = __webpack_require__(/*! ./decorators/selector */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\");\n\nvar MonoIncident = __webpack_require__(/*! ../BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar AttributeChannel = __webpack_require__(/*! ../Channels/Attribute/AttributeChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\");\n\nvar DescriptiveIncident = _decorate(null, function (_initialize, _Leaf) {\n  var DescriptiveIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(DescriptiveIncident, _Leaf2);\n\n    function DescriptiveIncident(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, DescriptiveIncident);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveIncident).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.inheritedSelector = null;\n      _this.attrs = attrs;\n\n      if (!Object.prototype.hasOwnProperty.call(props, \"duration\")) {\n        props.duration = 0;\n      }\n\n      _this.props = props; // the passive flag (when true) indicates that the Descriptive Group has been created\n      // and passively added to a Clip or a Combo via buildTree method.\n      // Defaults to false\n\n      _this.passive = false;\n      return _this;\n    }\n\n    return DescriptiveIncident;\n  }(_Leaf);\n\n  return {\n    F: DescriptiveIncident,\n    d: [{\n      kind: \"field\",\n      \"static\": true,\n      key: \"Incident\",\n      value: function value() {\n        return MonoIncident;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"plugin_npm_name\",\n      value: function value() {\n        return \"motor-cortex-js-attribute\";\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"Channel\",\n      value: function value() {\n        return AttributeChannel;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"ClassName\",\n      value: function value() {\n        return \"Incident\";\n      }\n    }, {\n      kind: \"method\",\n      decorators: [editAttributes],\n      key: \"editAttributes\",\n      value: function editAttributes() {}\n    }, {\n      kind: \"method\",\n      decorators: [editProperties],\n      key: \"editProperties\",\n      value: function editProperties() {}\n    }, {\n      kind: \"method\",\n      decorators: [resize],\n      key: \"resize\",\n      value: function resize() {}\n    }, {\n      kind: \"method\",\n      decorators: [selectorGetter],\n      key: \"selector\",\n      value: function selector() {}\n    }, {\n      kind: \"method\",\n      key: \"manageEditAttrProps\",\n      value: function manageEditAttrProps(newAttrs, type) {\n        // get a permanent reference to its parent node\n        var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n        var position = parentNode.getLeafPosition(this.id); // first detach the Incident from its parent\n\n        parentNode.removeIncident(this.id); // keep a backup of the current attrs/props\n\n        var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n        this[type] = newAttrs;\n        var res = parentNode.addIncident(this, position);\n\n        if (res.result === false) {\n          parentNode.removeIncident(this.id);\n          this[type] = oldAttrs;\n          parentNode.addIncident(this, position);\n          return res;\n        }\n\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        _get(_getPrototypeOf(DescriptiveIncident.prototype), \"detachFromParent\", this).call(this);\n\n        this.inheritedSelector = null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckForInvalidSelectors\",\n      value: function handleCheckForInvalidSelectors() {\n        var selector = this.selector();\n\n        if (selector === null) {\n          return {\n            id: this.id,\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            error: 'null selector'\n          };\n        } else if (selector.charAt(0) === \"&\") {\n          return {\n            id: this.id,\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            error: 'relative selector with no inherited selector',\n            selector: selector\n          };\n        } else return this.bypass();\n      }\n      /**\n       * The purpose of this method is to export a portable definition that can be\n       * later used in order to rebuild the Inicdent at any time\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"exportDefinition\",\n      value: function exportDefinition() {\n        return {\n          ClassName: this.constructor.ClassName,\n          plugin_npm_name: this.constructor.plugin_npm_name,\n          attrs: this.attrs,\n          props: this.props\n        };\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = DescriptiveIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL0Rlc2NyaXB0aXZlSW5jaWRlbnQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL0Rlc2NyaXB0aXZlSW5jaWRlbnQuanM/MTgwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlY29yYXRlKGRlY29yYXRvcnMsIGZhY3RvcnksIHN1cGVyQ2xhc3MsIG1peGlucykgeyB2YXIgYXBpID0gX2dldERlY29yYXRvcnNBcGkoKTsgaWYgKG1peGlucykgeyBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykgeyBhcGkgPSBtaXhpbnNbaV0oYXBpKTsgfSB9IHZhciByID0gZmFjdG9yeShmdW5jdGlvbiBpbml0aWFsaXplKE8pIHsgYXBpLmluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzKE8sIGRlY29yYXRlZC5lbGVtZW50cyk7IH0sIHN1cGVyQ2xhc3MpOyB2YXIgZGVjb3JhdGVkID0gYXBpLmRlY29yYXRlQ2xhc3MoX2NvYWxlc2NlQ2xhc3NFbGVtZW50cyhyLmQubWFwKF9jcmVhdGVFbGVtZW50RGVzY3JpcHRvcikpLCBkZWNvcmF0b3JzKTsgYXBpLmluaXRpYWxpemVDbGFzc0VsZW1lbnRzKHIuRiwgZGVjb3JhdGVkLmVsZW1lbnRzKTsgcmV0dXJuIGFwaS5ydW5DbGFzc0ZpbmlzaGVycyhyLkYsIGRlY29yYXRlZC5maW5pc2hlcnMpOyB9XG5cbmZ1bmN0aW9uIF9nZXREZWNvcmF0b3JzQXBpKCkgeyBfZ2V0RGVjb3JhdG9yc0FwaSA9IGZ1bmN0aW9uIF9nZXREZWNvcmF0b3JzQXBpKCkgeyByZXR1cm4gYXBpOyB9OyB2YXIgYXBpID0geyBlbGVtZW50c0RlZmluaXRpb25PcmRlcjogW1tcIm1ldGhvZFwiXSwgW1wiZmllbGRcIl1dLCBpbml0aWFsaXplSW5zdGFuY2VFbGVtZW50czogZnVuY3Rpb24gaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHMoTywgZWxlbWVudHMpIHsgW1wibWV0aG9kXCIsIFwiZmllbGRcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2luZCkgeyBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IGlmIChlbGVtZW50LmtpbmQgPT09IGtpbmQgJiYgZWxlbWVudC5wbGFjZW1lbnQgPT09IFwib3duXCIpIHsgdGhpcy5kZWZpbmVDbGFzc0VsZW1lbnQoTywgZWxlbWVudCk7IH0gfSwgdGhpcyk7IH0sIHRoaXMpOyB9LCBpbml0aWFsaXplQ2xhc3NFbGVtZW50czogZnVuY3Rpb24gaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHMoRiwgZWxlbWVudHMpIHsgdmFyIHByb3RvID0gRi5wcm90b3R5cGU7IFtcIm1ldGhvZFwiLCBcImZpZWxkXCJdLmZvckVhY2goZnVuY3Rpb24gKGtpbmQpIHsgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyB2YXIgcGxhY2VtZW50ID0gZWxlbWVudC5wbGFjZW1lbnQ7IGlmIChlbGVtZW50LmtpbmQgPT09IGtpbmQgJiYgKHBsYWNlbWVudCA9PT0gXCJzdGF0aWNcIiB8fCBwbGFjZW1lbnQgPT09IFwicHJvdG90eXBlXCIpKSB7IHZhciByZWNlaXZlciA9IHBsYWNlbWVudCA9PT0gXCJzdGF0aWNcIiA/IEYgOiBwcm90bzsgdGhpcy5kZWZpbmVDbGFzc0VsZW1lbnQocmVjZWl2ZXIsIGVsZW1lbnQpOyB9IH0sIHRoaXMpOyB9LCB0aGlzKTsgfSwgZGVmaW5lQ2xhc3NFbGVtZW50OiBmdW5jdGlvbiBkZWZpbmVDbGFzc0VsZW1lbnQocmVjZWl2ZXIsIGVsZW1lbnQpIHsgdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7IGlmIChlbGVtZW50LmtpbmQgPT09IFwiZmllbGRcIikgeyB2YXIgaW5pdGlhbGl6ZXIgPSBlbGVtZW50LmluaXRpYWxpemVyOyBkZXNjcmlwdG9yID0geyBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB2YWx1ZTogaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWxpemVyLmNhbGwocmVjZWl2ZXIpIH07IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBlbGVtZW50LmtleSwgZGVzY3JpcHRvcik7IH0sIGRlY29yYXRlQ2xhc3M6IGZ1bmN0aW9uIGRlY29yYXRlQ2xhc3MoZWxlbWVudHMsIGRlY29yYXRvcnMpIHsgdmFyIG5ld0VsZW1lbnRzID0gW107IHZhciBmaW5pc2hlcnMgPSBbXTsgdmFyIHBsYWNlbWVudHMgPSB7IFwic3RhdGljXCI6IFtdLCBwcm90b3R5cGU6IFtdLCBvd246IFtdIH07IGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpOyB9LCB0aGlzKTsgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyBpZiAoIV9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSByZXR1cm4gbmV3RWxlbWVudHMucHVzaChlbGVtZW50KTsgdmFyIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMgPSB0aGlzLmRlY29yYXRlRWxlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTsgbmV3RWxlbWVudHMucHVzaChlbGVtZW50RmluaXNoZXJzRXh0cmFzLmVsZW1lbnQpOyBuZXdFbGVtZW50cy5wdXNoLmFwcGx5KG5ld0VsZW1lbnRzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmV4dHJhcyk7IGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5maW5pc2hlcnMpOyB9LCB0aGlzKTsgaWYgKCFkZWNvcmF0b3JzKSB7IHJldHVybiB7IGVsZW1lbnRzOiBuZXdFbGVtZW50cywgZmluaXNoZXJzOiBmaW5pc2hlcnMgfTsgfSB2YXIgcmVzdWx0ID0gdGhpcy5kZWNvcmF0ZUNvbnN0cnVjdG9yKG5ld0VsZW1lbnRzLCBkZWNvcmF0b3JzKTsgZmluaXNoZXJzLnB1c2guYXBwbHkoZmluaXNoZXJzLCByZXN1bHQuZmluaXNoZXJzKTsgcmVzdWx0LmZpbmlzaGVycyA9IGZpbmlzaGVyczsgcmV0dXJuIHJlc3VsdDsgfSwgYWRkRWxlbWVudFBsYWNlbWVudDogZnVuY3Rpb24gYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzLCBzaWxlbnQpIHsgdmFyIGtleXMgPSBwbGFjZW1lbnRzW2VsZW1lbnQucGxhY2VtZW50XTsgaWYgKCFzaWxlbnQgJiYga2V5cy5pbmRleE9mKGVsZW1lbnQua2V5KSAhPT0gLTEpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkR1cGxpY2F0ZWQgZWxlbWVudCAoXCIgKyBlbGVtZW50LmtleSArIFwiKVwiKTsgfSBrZXlzLnB1c2goZWxlbWVudC5rZXkpOyB9LCBkZWNvcmF0ZUVsZW1lbnQ6IGZ1bmN0aW9uIGRlY29yYXRlRWxlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKSB7IHZhciBleHRyYXMgPSBbXTsgdmFyIGZpbmlzaGVycyA9IFtdOyBmb3IgKHZhciBkZWNvcmF0b3JzID0gZWxlbWVudC5kZWNvcmF0b3JzLCBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgeyB2YXIga2V5cyA9IHBsYWNlbWVudHNbZWxlbWVudC5wbGFjZW1lbnRdOyBrZXlzLnNwbGljZShrZXlzLmluZGV4T2YoZWxlbWVudC5rZXkpLCAxKTsgdmFyIGVsZW1lbnRPYmplY3QgPSB0aGlzLmZyb21FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50KTsgdmFyIGVsZW1lbnRGaW5pc2hlckV4dHJhcyA9IHRoaXMudG9FbGVtZW50RmluaXNoZXJFeHRyYXMoKDAsIGRlY29yYXRvcnNbaV0pKGVsZW1lbnRPYmplY3QpIHx8IGVsZW1lbnRPYmplY3QpOyBlbGVtZW50ID0gZWxlbWVudEZpbmlzaGVyRXh0cmFzLmVsZW1lbnQ7IHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTsgaWYgKGVsZW1lbnRGaW5pc2hlckV4dHJhcy5maW5pc2hlcikgeyBmaW5pc2hlcnMucHVzaChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpOyB9IHZhciBuZXdFeHRyYXMgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZXh0cmFzOyBpZiAobmV3RXh0cmFzKSB7IGZvciAodmFyIGogPSAwOyBqIDwgbmV3RXh0cmFzLmxlbmd0aDsgaisrKSB7IHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChuZXdFeHRyYXNbal0sIHBsYWNlbWVudHMpOyB9IGV4dHJhcy5wdXNoLmFwcGx5KGV4dHJhcywgbmV3RXh0cmFzKTsgfSB9IHJldHVybiB7IGVsZW1lbnQ6IGVsZW1lbnQsIGZpbmlzaGVyczogZmluaXNoZXJzLCBleHRyYXM6IGV4dHJhcyB9OyB9LCBkZWNvcmF0ZUNvbnN0cnVjdG9yOiBmdW5jdGlvbiBkZWNvcmF0ZUNvbnN0cnVjdG9yKGVsZW1lbnRzLCBkZWNvcmF0b3JzKSB7IHZhciBmaW5pc2hlcnMgPSBbXTsgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsgdmFyIG9iaiA9IHRoaXMuZnJvbUNsYXNzRGVzY3JpcHRvcihlbGVtZW50cyk7IHZhciBlbGVtZW50c0FuZEZpbmlzaGVyID0gdGhpcy50b0NsYXNzRGVzY3JpcHRvcigoMCwgZGVjb3JhdG9yc1tpXSkob2JqKSB8fCBvYmopOyBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlciAhPT0gdW5kZWZpbmVkKSB7IGZpbmlzaGVycy5wdXNoKGVsZW1lbnRzQW5kRmluaXNoZXIuZmluaXNoZXIpOyB9IGlmIChlbGVtZW50c0FuZEZpbmlzaGVyLmVsZW1lbnRzICE9PSB1bmRlZmluZWQpIHsgZWxlbWVudHMgPSBlbGVtZW50c0FuZEZpbmlzaGVyLmVsZW1lbnRzOyBmb3IgKHZhciBqID0gMDsgaiA8IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGorKykgeyBmb3IgKHZhciBrID0gaiArIDE7IGsgPCBlbGVtZW50cy5sZW5ndGg7IGsrKykgeyBpZiAoZWxlbWVudHNbal0ua2V5ID09PSBlbGVtZW50c1trXS5rZXkgJiYgZWxlbWVudHNbal0ucGxhY2VtZW50ID09PSBlbGVtZW50c1trXS5wbGFjZW1lbnQpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkR1cGxpY2F0ZWQgZWxlbWVudCAoXCIgKyBlbGVtZW50c1tqXS5rZXkgKyBcIilcIik7IH0gfSB9IH0gfSByZXR1cm4geyBlbGVtZW50czogZWxlbWVudHMsIGZpbmlzaGVyczogZmluaXNoZXJzIH07IH0sIGZyb21FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24gZnJvbUVsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnQpIHsgdmFyIG9iaiA9IHsga2luZDogZWxlbWVudC5raW5kLCBrZXk6IGVsZW1lbnQua2V5LCBwbGFjZW1lbnQ6IGVsZW1lbnQucGxhY2VtZW50LCBkZXNjcmlwdG9yOiBlbGVtZW50LmRlc2NyaXB0b3IgfTsgdmFyIGRlc2MgPSB7IHZhbHVlOiBcIkRlc2NyaXB0b3JcIiwgY29uZmlndXJhYmxlOiB0cnVlIH07IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFN5bWJvbC50b1N0cmluZ1RhZywgZGVzYyk7IGlmIChlbGVtZW50LmtpbmQgPT09IFwiZmllbGRcIikgb2JqLmluaXRpYWxpemVyID0gZWxlbWVudC5pbml0aWFsaXplcjsgcmV0dXJuIG9iajsgfSwgdG9FbGVtZW50RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIHRvRWxlbWVudERlc2NyaXB0b3JzKGVsZW1lbnRPYmplY3RzKSB7IGlmIChlbGVtZW50T2JqZWN0cyA9PT0gdW5kZWZpbmVkKSByZXR1cm47IHJldHVybiBfdG9BcnJheShlbGVtZW50T2JqZWN0cykubWFwKGZ1bmN0aW9uIChlbGVtZW50T2JqZWN0KSB7IHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJmaW5pc2hlclwiLCBcIkFuIGVsZW1lbnQgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZXh0cmFzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpOyByZXR1cm4gZWxlbWVudDsgfSwgdGhpcyk7IH0sIHRvRWxlbWVudERlc2NyaXB0b3I6IGZ1bmN0aW9uIHRvRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudE9iamVjdCkgeyB2YXIga2luZCA9IFN0cmluZyhlbGVtZW50T2JqZWN0LmtpbmQpOyBpZiAoa2luZCAhPT0gXCJtZXRob2RcIiAmJiBraW5kICE9PSBcImZpZWxkXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIGVpdGhlciBcIm1ldGhvZFwiIG9yJyArICcgXCJmaWVsZFwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3Igd2l0aCcgKyAnIC5raW5kIFwiJyArIGtpbmQgKyAnXCInKTsgfSB2YXIga2V5ID0gX3RvUHJvcGVydHlLZXkoZWxlbWVudE9iamVjdC5rZXkpOyB2YXIgcGxhY2VtZW50ID0gU3RyaW5nKGVsZW1lbnRPYmplY3QucGxhY2VtZW50KTsgaWYgKHBsYWNlbWVudCAhPT0gXCJzdGF0aWNcIiAmJiBwbGFjZW1lbnQgIT09IFwicHJvdG90eXBlXCIgJiYgcGxhY2VtZW50ICE9PSBcIm93blwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0FuIGVsZW1lbnQgZGVzY3JpcHRvclxcJ3MgLnBsYWNlbWVudCBwcm9wZXJ0eSBtdXN0IGJlIG9uZSBvZiBcInN0YXRpY1wiLCcgKyAnIFwicHJvdG90eXBlXCIgb3IgXCJvd25cIiwgYnV0IGEgZGVjb3JhdG9yIGNyZWF0ZWQgYW4gZWxlbWVudCBkZXNjcmlwdG9yJyArICcgd2l0aCAucGxhY2VtZW50IFwiJyArIHBsYWNlbWVudCArICdcIicpOyB9IHZhciBkZXNjcmlwdG9yID0gZWxlbWVudE9iamVjdC5kZXNjcmlwdG9yOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJlbGVtZW50c1wiLCBcIkFuIGVsZW1lbnQgZGVzY3JpcHRvclwiKTsgdmFyIGVsZW1lbnQgPSB7IGtpbmQ6IGtpbmQsIGtleToga2V5LCBwbGFjZW1lbnQ6IHBsYWNlbWVudCwgZGVzY3JpcHRvcjogT2JqZWN0LmFzc2lnbih7fSwgZGVzY3JpcHRvcikgfTsgaWYgKGtpbmQgIT09IFwiZmllbGRcIikgeyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJpbml0aWFsaXplclwiLCBcIkEgbWV0aG9kIGRlc2NyaXB0b3JcIik7IH0gZWxzZSB7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcImdldFwiLCBcIlRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIGEgZmllbGQgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwic2V0XCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJ2YWx1ZVwiLCBcIlRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIGEgZmllbGQgZGVzY3JpcHRvclwiKTsgZWxlbWVudC5pbml0aWFsaXplciA9IGVsZW1lbnRPYmplY3QuaW5pdGlhbGl6ZXI7IH0gcmV0dXJuIGVsZW1lbnQ7IH0sIHRvRWxlbWVudEZpbmlzaGVyRXh0cmFzOiBmdW5jdGlvbiB0b0VsZW1lbnRGaW5pc2hlckV4dHJhcyhlbGVtZW50T2JqZWN0KSB7IHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpOyB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZmluaXNoZXJcIik7IHZhciBleHRyYXMgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3JzKGVsZW1lbnRPYmplY3QuZXh0cmFzKTsgcmV0dXJuIHsgZWxlbWVudDogZWxlbWVudCwgZmluaXNoZXI6IGZpbmlzaGVyLCBleHRyYXM6IGV4dHJhcyB9OyB9LCBmcm9tQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbiBmcm9tQ2xhc3NEZXNjcmlwdG9yKGVsZW1lbnRzKSB7IHZhciBvYmogPSB7IGtpbmQ6IFwiY2xhc3NcIiwgZWxlbWVudHM6IGVsZW1lbnRzLm1hcCh0aGlzLmZyb21FbGVtZW50RGVzY3JpcHRvciwgdGhpcykgfTsgdmFyIGRlc2MgPSB7IHZhbHVlOiBcIkRlc2NyaXB0b3JcIiwgY29uZmlndXJhYmxlOiB0cnVlIH07IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFN5bWJvbC50b1N0cmluZ1RhZywgZGVzYyk7IHJldHVybiBvYmo7IH0sIHRvQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbiB0b0NsYXNzRGVzY3JpcHRvcihvYmopIHsgdmFyIGtpbmQgPSBTdHJpbmcob2JqLmtpbmQpOyBpZiAoa2luZCAhPT0gXCJjbGFzc1wiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgY2xhc3MgZGVzY3JpcHRvclxcJ3MgLmtpbmQgcHJvcGVydHkgbXVzdCBiZSBcImNsYXNzXCIsIGJ1dCBhIGRlY29yYXRvcicgKyAnIGNyZWF0ZWQgYSBjbGFzcyBkZXNjcmlwdG9yIHdpdGggLmtpbmQgXCInICsga2luZCArICdcIicpOyB9IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwia2V5XCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcInBsYWNlbWVudFwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJkZXNjcmlwdG9yXCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImluaXRpYWxpemVyXCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImV4dHJhc1wiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTsgdmFyIGZpbmlzaGVyID0gX29wdGlvbmFsQ2FsbGFibGVQcm9wZXJ0eShvYmosIFwiZmluaXNoZXJcIik7IHZhciBlbGVtZW50cyA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcnMob2JqLmVsZW1lbnRzKTsgcmV0dXJuIHsgZWxlbWVudHM6IGVsZW1lbnRzLCBmaW5pc2hlcjogZmluaXNoZXIgfTsgfSwgcnVuQ2xhc3NGaW5pc2hlcnM6IGZ1bmN0aW9uIHJ1bkNsYXNzRmluaXNoZXJzKGNvbnN0cnVjdG9yLCBmaW5pc2hlcnMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBmaW5pc2hlcnMubGVuZ3RoOyBpKyspIHsgdmFyIG5ld0NvbnN0cnVjdG9yID0gKDAsIGZpbmlzaGVyc1tpXSkoY29uc3RydWN0b3IpOyBpZiAobmV3Q29uc3RydWN0b3IgIT09IHVuZGVmaW5lZCkgeyBpZiAodHlwZW9mIG5ld0NvbnN0cnVjdG9yICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpbmlzaGVycyBtdXN0IHJldHVybiBhIGNvbnN0cnVjdG9yLlwiKTsgfSBjb25zdHJ1Y3RvciA9IG5ld0NvbnN0cnVjdG9yOyB9IH0gcmV0dXJuIGNvbnN0cnVjdG9yOyB9LCBkaXNhbGxvd1Byb3BlcnR5OiBmdW5jdGlvbiBkaXNhbGxvd1Byb3BlcnR5KG9iaiwgbmFtZSwgb2JqZWN0VHlwZSkgeyBpZiAob2JqW25hbWVdICE9PSB1bmRlZmluZWQpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihvYmplY3RUeXBlICsgXCIgY2FuJ3QgaGF2ZSBhIC5cIiArIG5hbWUgKyBcIiBwcm9wZXJ0eS5cIik7IH0gfSB9OyByZXR1cm4gYXBpOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50RGVzY3JpcHRvcihkZWYpIHsgdmFyIGtleSA9IF90b1Byb3BlcnR5S2V5KGRlZi5rZXkpOyB2YXIgZGVzY3JpcHRvcjsgaWYgKGRlZi5raW5kID09PSBcIm1ldGhvZFwiKSB7IGRlc2NyaXB0b3IgPSB7IHZhbHVlOiBkZWYudmFsdWUsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlIH07IH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwiZ2V0XCIpIHsgZGVzY3JpcHRvciA9IHsgZ2V0OiBkZWYudmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UgfTsgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJzZXRcIikgeyBkZXNjcmlwdG9yID0geyBzZXQ6IGRlZi52YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSB9OyB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBcImZpZWxkXCIpIHsgZGVzY3JpcHRvciA9IHsgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9OyB9IHZhciBlbGVtZW50ID0geyBraW5kOiBkZWYua2luZCA9PT0gXCJmaWVsZFwiID8gXCJmaWVsZFwiIDogXCJtZXRob2RcIiwga2V5OiBrZXksIHBsYWNlbWVudDogZGVmW1wic3RhdGljXCJdID8gXCJzdGF0aWNcIiA6IGRlZi5raW5kID09PSBcImZpZWxkXCIgPyBcIm93blwiIDogXCJwcm90b3R5cGVcIiwgZGVzY3JpcHRvcjogZGVzY3JpcHRvciB9OyBpZiAoZGVmLmRlY29yYXRvcnMpIGVsZW1lbnQuZGVjb3JhdG9ycyA9IGRlZi5kZWNvcmF0b3JzOyBpZiAoZGVmLmtpbmQgPT09IFwiZmllbGRcIikgZWxlbWVudC5pbml0aWFsaXplciA9IGRlZi52YWx1ZTsgcmV0dXJuIGVsZW1lbnQ7IH1cblxuZnVuY3Rpb24gX2NvYWxlc2NlR2V0dGVyU2V0dGVyKGVsZW1lbnQsIG90aGVyKSB7IGlmIChlbGVtZW50LmRlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQpIHsgb3RoZXIuZGVzY3JpcHRvci5nZXQgPSBlbGVtZW50LmRlc2NyaXB0b3IuZ2V0OyB9IGVsc2UgeyBvdGhlci5kZXNjcmlwdG9yLnNldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5zZXQ7IH0gfVxuXG5mdW5jdGlvbiBfY29hbGVzY2VDbGFzc0VsZW1lbnRzKGVsZW1lbnRzKSB7IHZhciBuZXdFbGVtZW50cyA9IFtdOyB2YXIgaXNTYW1lRWxlbWVudCA9IGZ1bmN0aW9uIGlzU2FtZUVsZW1lbnQob3RoZXIpIHsgcmV0dXJuIG90aGVyLmtpbmQgPT09IFwibWV0aG9kXCIgJiYgb3RoZXIua2V5ID09PSBlbGVtZW50LmtleSAmJiBvdGhlci5wbGFjZW1lbnQgPT09IGVsZW1lbnQucGxhY2VtZW50OyB9OyBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBlbGVtZW50ID0gZWxlbWVudHNbaV07IHZhciBvdGhlcjsgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJtZXRob2RcIiAmJiAob3RoZXIgPSBuZXdFbGVtZW50cy5maW5kKGlzU2FtZUVsZW1lbnQpKSkgeyBpZiAoX2lzRGF0YURlc2NyaXB0b3IoZWxlbWVudC5kZXNjcmlwdG9yKSB8fCBfaXNEYXRhRGVzY3JpcHRvcihvdGhlci5kZXNjcmlwdG9yKSkgeyBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkgfHwgX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIkR1cGxpY2F0ZWQgbWV0aG9kcyAoXCIgKyBlbGVtZW50LmtleSArIFwiKSBjYW4ndCBiZSBkZWNvcmF0ZWQuXCIpOyB9IG90aGVyLmRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7IH0gZWxzZSB7IGlmIChfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSkgeyBpZiAoX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIkRlY29yYXRvcnMgY2FuJ3QgYmUgcGxhY2VkIG9uIGRpZmZlcmVudCBhY2Nlc3NvcnMgd2l0aCBmb3IgXCIgKyBcInRoZSBzYW1lIHByb3BlcnR5IChcIiArIGVsZW1lbnQua2V5ICsgXCIpLlwiKTsgfSBvdGhlci5kZWNvcmF0b3JzID0gZWxlbWVudC5kZWNvcmF0b3JzOyB9IF9jb2FsZXNjZUdldHRlclNldHRlcihlbGVtZW50LCBvdGhlcik7IH0gfSBlbHNlIHsgbmV3RWxlbWVudHMucHVzaChlbGVtZW50KTsgfSB9IHJldHVybiBuZXdFbGVtZW50czsgfVxuXG5mdW5jdGlvbiBfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmRlY29yYXRvcnMgJiYgZWxlbWVudC5kZWNvcmF0b3JzLmxlbmd0aDsgfVxuXG5mdW5jdGlvbiBfaXNEYXRhRGVzY3JpcHRvcihkZXNjKSB7IHJldHVybiBkZXNjICE9PSB1bmRlZmluZWQgJiYgIShkZXNjLnZhbHVlID09PSB1bmRlZmluZWQgJiYgZGVzYy53cml0YWJsZSA9PT0gdW5kZWZpbmVkKTsgfVxuXG5mdW5jdGlvbiBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgbmFtZSkgeyB2YXIgdmFsdWUgPSBvYmpbbmFtZV07IGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCAnXCIgKyBuYW1lICsgXCInIHRvIGJlIGEgZnVuY3Rpb25cIik7IH0gcmV0dXJuIHZhbHVlOyB9XG5cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuXG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5cbmZ1bmN0aW9uIF90b0FycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpOyB9XG5cbmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgTGVhZiA9IHJlcXVpcmUoJy4uL1RyZWUvTGVhZicpO1xuXG52YXIgcmVzaXplID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL3Jlc2l6ZScpO1xuXG52YXIgZWRpdEF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvZWRpdEF0dHJpYnV0ZXMnKTtcblxudmFyIGVkaXRQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2VkaXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBzZWxlY3RvckdldHRlciA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9zZWxlY3RvcicpO1xuXG52YXIgTW9ub0luY2lkZW50ID0gcmVxdWlyZSgnLi4vQmFzZUNsYXNzZXMvTW9ub0luY2lkZW50Jyk7XG5cbnZhciBBdHRyaWJ1dGVDaGFubmVsID0gcmVxdWlyZSgnLi4vQ2hhbm5lbHMvQXR0cmlidXRlL0F0dHJpYnV0ZUNoYW5uZWwnKTtcblxudmFyIERlc2NyaXB0aXZlSW5jaWRlbnQgPSBfZGVjb3JhdGUobnVsbCwgZnVuY3Rpb24gKF9pbml0aWFsaXplLCBfTGVhZikge1xuICB2YXIgRGVzY3JpcHRpdmVJbmNpZGVudCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9MZWFmMikge1xuICAgIF9pbmhlcml0cyhEZXNjcmlwdGl2ZUluY2lkZW50LCBfTGVhZjIpO1xuXG4gICAgZnVuY3Rpb24gRGVzY3JpcHRpdmVJbmNpZGVudChhdHRycywgcHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlc2NyaXB0aXZlSW5jaWRlbnQpO1xuXG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEZXNjcmlwdGl2ZUluY2lkZW50KS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgIF9pbml0aWFsaXplKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcblxuICAgICAgX3RoaXMuaW5oZXJpdGVkU2VsZWN0b3IgPSBudWxsO1xuICAgICAgX3RoaXMuYXR0cnMgPSBhdHRycztcblxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwiZHVyYXRpb25cIikpIHtcbiAgICAgICAgcHJvcHMuZHVyYXRpb24gPSAwO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wcm9wcyA9IHByb3BzOyAvLyB0aGUgcGFzc2l2ZSBmbGFnICh3aGVuIHRydWUpIGluZGljYXRlcyB0aGF0IHRoZSBEZXNjcmlwdGl2ZSBHcm91cCBoYXMgYmVlbiBjcmVhdGVkXG4gICAgICAvLyBhbmQgcGFzc2l2ZWx5IGFkZGVkIHRvIGEgQ2xpcCBvciBhIENvbWJvIHZpYSBidWlsZFRyZWUgbWV0aG9kLlxuICAgICAgLy8gRGVmYXVsdHMgdG8gZmFsc2VcblxuICAgICAgX3RoaXMucGFzc2l2ZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBEZXNjcmlwdGl2ZUluY2lkZW50O1xuICB9KF9MZWFmKTtcblxuICByZXR1cm4ge1xuICAgIEY6IERlc2NyaXB0aXZlSW5jaWRlbnQsXG4gICAgZDogW3tcbiAgICAgIGtpbmQ6IFwiZmllbGRcIixcbiAgICAgIFwic3RhdGljXCI6IHRydWUsXG4gICAgICBrZXk6IFwiSW5jaWRlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIE1vbm9JbmNpZGVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBraW5kOiBcImZpZWxkXCIsXG4gICAgICBcInN0YXRpY1wiOiB0cnVlLFxuICAgICAga2V5OiBcInBsdWdpbl9ucG1fbmFtZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCJtb3Rvci1jb3J0ZXgtanMtYXR0cmlidXRlXCI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJmaWVsZFwiLFxuICAgICAgXCJzdGF0aWNcIjogdHJ1ZSxcbiAgICAgIGtleTogXCJDaGFubmVsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBBdHRyaWJ1dGVDaGFubmVsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwiZmllbGRcIixcbiAgICAgIFwic3RhdGljXCI6IHRydWUsXG4gICAgICBrZXk6IFwiQ2xhc3NOYW1lXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBcIkluY2lkZW50XCI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGRlY29yYXRvcnM6IFtlZGl0QXR0cmlidXRlc10sXG4gICAgICBrZXk6IFwiZWRpdEF0dHJpYnV0ZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0QXR0cmlidXRlcygpIHt9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGRlY29yYXRvcnM6IFtlZGl0UHJvcGVydGllc10sXG4gICAgICBrZXk6IFwiZWRpdFByb3BlcnRpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0UHJvcGVydGllcygpIHt9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGRlY29yYXRvcnM6IFtyZXNpemVdLFxuICAgICAga2V5OiBcInJlc2l6ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHt9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGRlY29yYXRvcnM6IFtzZWxlY3RvckdldHRlcl0sXG4gICAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RvcigpIHt9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJtYW5hZ2VFZGl0QXR0clByb3BzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbWFuYWdlRWRpdEF0dHJQcm9wcyhuZXdBdHRycywgdHlwZSkge1xuICAgICAgICAvLyBnZXQgYSBwZXJtYW5lbnQgcmVmZXJlbmNlIHRvIGl0cyBwYXJlbnQgbm9kZVxuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMucGFyZW50Tm9kZTsgLy8gZ2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgSW5jaWRlbnQgd2l0aGluIGl0cyBwYXJlbnRcblxuICAgICAgICB2YXIgcG9zaXRpb24gPSBwYXJlbnROb2RlLmdldExlYWZQb3NpdGlvbih0aGlzLmlkKTsgLy8gZmlyc3QgZGV0YWNoIHRoZSBJbmNpZGVudCBmcm9tIGl0cyBwYXJlbnRcblxuICAgICAgICBwYXJlbnROb2RlLnJlbW92ZUluY2lkZW50KHRoaXMuaWQpOyAvLyBrZWVwIGEgYmFja3VwIG9mIHRoZSBjdXJyZW50IGF0dHJzL3Byb3BzXG5cbiAgICAgICAgdmFyIG9sZEF0dHJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzW3R5cGVdKSk7XG4gICAgICAgIHRoaXNbdHlwZV0gPSBuZXdBdHRycztcbiAgICAgICAgdmFyIHJlcyA9IHBhcmVudE5vZGUuYWRkSW5jaWRlbnQodGhpcywgcG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChyZXMucmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlSW5jaWRlbnQodGhpcy5pZCk7XG4gICAgICAgICAgdGhpc1t0eXBlXSA9IG9sZEF0dHJzO1xuICAgICAgICAgIHBhcmVudE5vZGUuYWRkSW5jaWRlbnQodGhpcywgcG9zaXRpb24pO1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwiZGV0YWNoRnJvbVBhcmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaEZyb21QYXJlbnQoKSB7XG4gICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKERlc2NyaXB0aXZlSW5jaWRlbnQucHJvdG90eXBlKSwgXCJkZXRhY2hGcm9tUGFyZW50XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5pbmhlcml0ZWRTZWxlY3RvciA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJoYW5kbGVDaGVja0ZvckludmFsaWRTZWxlY3RvcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDaGVja0ZvckludmFsaWRTZWxlY3RvcnMoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IoKTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBDbGFzc05hbWU6IHRoaXMuY29uc3RydWN0b3IuQ2xhc3NOYW1lLFxuICAgICAgICAgICAgcGx1Z2luX25wbV9uYW1lOiB0aGlzLmNvbnN0cnVjdG9yLnBsdWdpbl9ucG1fbmFtZSxcbiAgICAgICAgICAgIGVycm9yOiAnbnVsbCBzZWxlY3RvcidcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gXCImXCIpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBDbGFzc05hbWU6IHRoaXMuY29uc3RydWN0b3IuQ2xhc3NOYW1lLFxuICAgICAgICAgICAgcGx1Z2luX25wbV9uYW1lOiB0aGlzLmNvbnN0cnVjdG9yLnBsdWdpbl9ucG1fbmFtZSxcbiAgICAgICAgICAgIGVycm9yOiAncmVsYXRpdmUgc2VsZWN0b3Igd2l0aCBubyBpbmhlcml0ZWQgc2VsZWN0b3InLFxuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHJldHVybiB0aGlzLmJ5cGFzcygpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBleHBvcnQgYSBwb3J0YWJsZSBkZWZpbml0aW9uIHRoYXQgY2FuIGJlXG4gICAgICAgKiBsYXRlciB1c2VkIGluIG9yZGVyIHRvIHJlYnVpbGQgdGhlIEluaWNkZW50IGF0IGFueSB0aW1lXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwiZXhwb3J0RGVmaW5pdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydERlZmluaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgQ2xhc3NOYW1lOiB0aGlzLmNvbnN0cnVjdG9yLkNsYXNzTmFtZSxcbiAgICAgICAgICBwbHVnaW5fbnBtX25hbWU6IHRoaXMuY29uc3RydWN0b3IucGx1Z2luX25wbV9uYW1lLFxuICAgICAgICAgIGF0dHJzOiB0aGlzLmF0dHJzLFxuICAgICAgICAgIHByb3BzOiB0aGlzLnByb3BzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfV1cbiAgfTtcbn0sIExlYWYpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlc2NyaXB0aXZlSW5jaWRlbnQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _TARGETTYPES: {\n    _DECISIONAUTHORITY: \"mc.descriptive.decisionAuthority\"\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL19DT05TVC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvRGVzY3JpcHRpdmVJbmNpZGVudHMvX0NPTlNULmpzPzMwNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBfVEFSR0VUVFlQRVM6IHtcbiAgICBfREVDSVNJT05BVVRIT1JJVFk6IFwibWMuZGVzY3JpcHRpdmUuZGVjaXNpb25BdXRob3JpdHlcIlxuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction editAttributes(payload) {\n  payload.descriptor.value = function (newAttrs) {\n    var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n\n    if (checkIfBelongsToClip.response === true) {\n      // if the Group belongs on a Clip\n      return this.manageEditAttrProps(newAttrs, 'attrs');\n    } else {\n      this.attrs = newAttrs;\n      return {\n        result: true\n      };\n    }\n  };\n}\n\nmodule.exports = editAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdEF0dHJpYnV0ZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdEF0dHJpYnV0ZXMuanM/YTVhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9DT05TVCA9IHJlcXVpcmUoJy4uL19DT05TVCcpO1xuXG52YXIgX1RSRUVDT05TVCA9IHJlcXVpcmUoJy4uLy4uL1RyZWUvX0NPTlNUJyk7XG5cbmZ1bmN0aW9uIGVkaXRBdHRyaWJ1dGVzKHBheWxvYWQpIHtcbiAgcGF5bG9hZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKG5ld0F0dHJzKSB7XG4gICAgdmFyIGNoZWNrSWZCZWxvbmdzVG9DbGlwID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja0ZvckNsaXAnLCB7fSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrSWZCZWxvbmdzVG9DbGlwLnJlc3BvbnNlID09PSB0cnVlKSB7XG4gICAgICAvLyBpZiB0aGUgR3JvdXAgYmVsb25ncyBvbiBhIENsaXBcbiAgICAgIHJldHVybiB0aGlzLm1hbmFnZUVkaXRBdHRyUHJvcHMobmV3QXR0cnMsICdhdHRycycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF0dHJzID0gbmV3QXR0cnM7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRBdHRyaWJ1dGVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction editProperties(payload) {\n  payload.descriptor.value = function (newProps) {\n    var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n\n    if (checkIfBelongsToClip.response === true) {\n      // if the Group belongs on a Clip\n      return this.manageEditAttrProps(newProps, 'props');\n    } else {\n      this.props = newProps;\n      return {\n        result: true\n      };\n    }\n  };\n}\n\nmodule.exports = editProperties;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdFByb3BlcnRpZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdFByb3BlcnRpZXMuanM/ZDgyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9DT05TVCA9IHJlcXVpcmUoJy4uL19DT05TVCcpO1xuXG52YXIgX1RSRUVDT05TVCA9IHJlcXVpcmUoJy4uLy4uL1RyZWUvX0NPTlNUJyk7XG5cbmZ1bmN0aW9uIGVkaXRQcm9wZXJ0aWVzKHBheWxvYWQpIHtcbiAgcGF5bG9hZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKG5ld1Byb3BzKSB7XG4gICAgdmFyIGNoZWNrSWZCZWxvbmdzVG9DbGlwID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja0ZvckNsaXAnLCB7fSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrSWZCZWxvbmdzVG9DbGlwLnJlc3BvbnNlID09PSB0cnVlKSB7XG4gICAgICAvLyBpZiB0aGUgR3JvdXAgYmVsb25ncyBvbiBhIENsaXBcbiAgICAgIHJldHVybiB0aGlzLm1hbmFnZUVkaXRBdHRyUHJvcHMobmV3UHJvcHMsICdwcm9wcycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BzID0gbmV3UHJvcHM7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRQcm9wZXJ0aWVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n/**\n * resize method resizes the Incident by maintaining proportions between delay, duraiton and hiatus.\n * also, the new duration will be the full new duration of the Incident taking in considration\n * all delay, duration and hiatus along with\n **/\n\n\nfunction resize(payload) {\n  payload.descriptor.value = function (newSize) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      check: true\n    };\n\n    if (newSize === this.duration) {\n      return {\n        result: true,\n        meta: {\n          unprocessed: true\n        }\n      };\n    }\n\n    if (newSize <= 0) {\n      return {\n        result: false,\n        reason: 'Size must always be > 0'\n      };\n    }\n\n    if (options.check === true && this.hasParent) {\n      var mcCheck = this.putMessageOnPipe('checkResize', {\n        id: this.id,\n        newSize: newSize,\n        fraction: newSize / this.duration\n      }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n\n      if (mcCheck.response.result === false) {\n        return mcCheck.response;\n      }\n    }\n\n    this.setNewDuration(newSize);\n    return {\n      result: true\n    };\n  };\n}\n\nmodule.exports = resize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvcmVzaXplLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9kZWNvcmF0b3JzL3Jlc2l6ZS5qcz8yMDFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX0NPTlNUID0gcmVxdWlyZSgnLi4vX0NPTlNUJyk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcbi8qKlxuICogcmVzaXplIG1ldGhvZCByZXNpemVzIHRoZSBJbmNpZGVudCBieSBtYWludGFpbmluZyBwcm9wb3J0aW9ucyBiZXR3ZWVuIGRlbGF5LCBkdXJhaXRvbiBhbmQgaGlhdHVzLlxuICogYWxzbywgdGhlIG5ldyBkdXJhdGlvbiB3aWxsIGJlIHRoZSBmdWxsIG5ldyBkdXJhdGlvbiBvZiB0aGUgSW5jaWRlbnQgdGFraW5nIGluIGNvbnNpZHJhdGlvblxuICogYWxsIGRlbGF5LCBkdXJhdGlvbiBhbmQgaGlhdHVzIGFsb25nIHdpdGhcbiAqKi9cblxuXG5mdW5jdGlvbiByZXNpemUocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAobmV3U2l6ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgICBjaGVjazogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAobmV3U2l6ZSA9PT0gdGhpcy5kdXJhdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgdW5wcm9jZXNzZWQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobmV3U2l6ZSA8PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgICByZWFzb246ICdTaXplIG11c3QgYWx3YXlzIGJlID4gMCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hlY2sgPT09IHRydWUgJiYgdGhpcy5oYXNQYXJlbnQpIHtcbiAgICAgIHZhciBtY0NoZWNrID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja1Jlc2l6ZScsIHtcbiAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgIG5ld1NpemU6IG5ld1NpemUsXG4gICAgICAgIGZyYWN0aW9uOiBuZXdTaXplIC8gdGhpcy5kdXJhdGlvblxuICAgICAgfSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgICAgc2VsZkV4ZWN1dGU6IGZhbHNlLFxuICAgICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgICB9KTtcblxuICAgICAgaWYgKG1jQ2hlY2sucmVzcG9uc2UucmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbWNDaGVjay5yZXNwb25zZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldE5ld0R1cmF0aW9uKG5ld1NpemUpO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IHRydWVcbiAgICB9O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc2l6ZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction selector(payload) {\n  payload.descriptor.value = function () {\n    if (this.inheritedSelector === null) {\n      // if the Incident has no parent selector inherited\n      if (!Object.prototype.hasOwnProperty.call(this.props, \"selector\")) {\n        // and does not have a selector neither\n        return null; // then its selector is null\n      } else {\n        return this.props.selector; // else, if it has a selector that's its final selector\n      }\n    } else {\n      // else if there is an inherited selector\n      if (!Object.prototype.hasOwnProperty.call(this.props, \"selector\")) {\n        // and does not have a selector of its own\n        return this.inheritedSelector; // then its selector is equal to the inherited selector\n      } else {\n        // else, if it both has an inherited and an own selector\n        if (this.props.selector.charAt(0) === \"&\") {\n          return this.inheritedSelector + this.props.selector.substring(1);\n        } else {\n          return this.inheritedSelector + ' ' + this.props.selector;\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = selector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvc2VsZWN0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvc2VsZWN0b3IuanM/MzM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gc2VsZWN0b3IocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaW5oZXJpdGVkU2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgIC8vIGlmIHRoZSBJbmNpZGVudCBoYXMgbm8gcGFyZW50IHNlbGVjdG9yIGluaGVyaXRlZFxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5wcm9wcywgXCJzZWxlY3RvclwiKSkge1xuICAgICAgICAvLyBhbmQgZG9lcyBub3QgaGF2ZSBhIHNlbGVjdG9yIG5laXRoZXJcbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHRoZW4gaXRzIHNlbGVjdG9yIGlzIG51bGxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlbGVjdG9yOyAvLyBlbHNlLCBpZiBpdCBoYXMgYSBzZWxlY3RvciB0aGF0J3MgaXRzIGZpbmFsIHNlbGVjdG9yXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVsc2UgaWYgdGhlcmUgaXMgYW4gaW5oZXJpdGVkIHNlbGVjdG9yXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnByb3BzLCBcInNlbGVjdG9yXCIpKSB7XG4gICAgICAgIC8vIGFuZCBkb2VzIG5vdCBoYXZlIGEgc2VsZWN0b3Igb2YgaXRzIG93blxuICAgICAgICByZXR1cm4gdGhpcy5pbmhlcml0ZWRTZWxlY3RvcjsgLy8gdGhlbiBpdHMgc2VsZWN0b3IgaXMgZXF1YWwgdG8gdGhlIGluaGVyaXRlZCBzZWxlY3RvclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZWxzZSwgaWYgaXQgYm90aCBoYXMgYW4gaW5oZXJpdGVkIGFuZCBhbiBvd24gc2VsZWN0b3JcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiZcIikge1xuICAgICAgICAgIHJldHVybiB0aGlzLmluaGVyaXRlZFNlbGVjdG9yICsgdGhpcy5wcm9wcy5zZWxlY3Rvci5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5oZXJpdGVkU2VsZWN0b3IgKyAnICcgKyB0aGlzLnByb3BzLnNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbGVjdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar ElementSplitter = __webpack_require__(/*! ../Splitters/ElementSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\");\n\nvar ElementClipSplitter = __webpack_require__(/*! ../Splitters/ElementClipSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ./incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n/**\n * Creates a real Incident (with all of its real tree) out of the Descriptive Incident.\n * @param {object} descriptiveIncident - the Descriptive Incident that defines the Incident\n * @param {contextData} - the context data (object containing id and actual context) to be used for real\n *      Incidents init\n * @param {boolean} audio - defaults to false. It defines whether the method is been used\n *      by a real Clip or the Audio clip\n * @returns {object} - the real Incident\n **/\n\n\nfunction incidentFromDescription(descriptiveIncident, contextData) {\n  var audio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  /*\n  RULES:\n  - Clips can only have selectors (and not hosts) as they participate on a Desc. Tree\n      and thus they are Clips As Incidents. The DescriptiveClips are treated a bit\n      different compared to the rest of the Incidents as they copy all of the\n      Description channels and lanes\n  - Descriptive Incidents can either have or not have selectors\n  - Descriptive Compos always have selectors\n   All Incidents of the tree, no matter their type have the static properties:\n  - Incident (which is the Incident class they need to initialise)\n  - plugin_npm_name (the plugin name they bolong to)\n  - Channel (the Channel class to handle the instance)\n  */\n\n  /* check for the descriptive incident and audio compatibility. If audio is true then we're\n      working on the audioClip and we need incidents that are at least \"on\" while if the audio==false\n      and we are working on the real tree then we reject the cases that the incident is audio \"only\"\n  */\n  if (audio === true && descriptiveIncident.audio === \"off\" || audio === false && descriptiveIncident.audio === \"only\") {\n    return null;\n  }\n\n  var incidentToReturn;\n\n  if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector')) {\n    if (audio === false && descriptiveIncident.props.selector.charAt(0) === '~' || audio === true && descriptiveIncident.props.selector.charAt(0) !== '~' && descriptiveIncident.constructor.isClip === false) {\n      return null;\n    }\n  }\n\n  if (descriptiveIncident.constructor.isClip === true) {\n    if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector') && audio === false) {\n      incidentToReturn = new ElementClipSplitter(descriptiveIncident, contextData);\n      incidentToReturn.plugin_channel_class = Channel;\n    } else {\n      if (audio === true) {\n        return descriptiveIncident.audioClip;\n      } else {\n        return descriptiveIncident.realClip;\n      }\n    }\n  } else if (descriptiveIncident.constructor.Incident === Group) {\n    incidentToReturn = incidentFromIngredients({\n      id: descriptiveIncident.id,\n      attrs: descriptiveIncident.attrs,\n      props: descriptiveIncident.props,\n      Incident: descriptiveIncident.constructor.Incident,\n      plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n      Channel: descriptiveIncident.constructor.Channel,\n      DescriptiveIncident: descriptiveIncident\n    });\n\n    for (var incId in descriptiveIncident.children) {\n      var childIncident = incidentFromDescription(descriptiveIncident.children[incId].leaf, contextData);\n\n      if (childIncident === null) {\n        continue;\n      }\n\n      incidentToReturn.addChild(childIncident, descriptiveIncident.children[incId].position);\n    }\n  } else {\n    // if it is an Incident that extends the Incident (not a Group) then\n    // we should anaylse it to its element/attribute Incidents starting from\n    // the elements, that's why we create an ElementSplitter. It is our\n    // starting point to which the Incident will be analysed to its\n    // element/attributes children.\n    incidentToReturn = new ElementSplitter(descriptiveIncident, contextData);\n  }\n\n  return incidentToReturn;\n}\n\nmodule.exports = incidentFromDescription;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24uanM/YTAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEdyb3VwID0gcmVxdWlyZSgnLi4vQmFzZUNsYXNzZXMvR3JvdXAnKTtcblxudmFyIEVsZW1lbnRTcGxpdHRlciA9IHJlcXVpcmUoJy4uL1NwbGl0dGVycy9FbGVtZW50U3BsaXR0ZXInKTtcblxudmFyIEVsZW1lbnRDbGlwU3BsaXR0ZXIgPSByZXF1aXJlKCcuLi9TcGxpdHRlcnMvRWxlbWVudENsaXBTcGxpdHRlcicpO1xuXG52YXIgaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMgPSByZXF1aXJlKCcuL2luY2lkZW50RnJvbUluZ3JlZGllbnRzJyk7XG5cbnZhciBDaGFubmVsID0gcmVxdWlyZSgnLi4vQ2hhbm5lbHMvQ2hhbm5lbCcpO1xuLyoqXG4gKiBDcmVhdGVzIGEgcmVhbCBJbmNpZGVudCAod2l0aCBhbGwgb2YgaXRzIHJlYWwgdHJlZSkgb3V0IG9mIHRoZSBEZXNjcmlwdGl2ZSBJbmNpZGVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBkZXNjcmlwdGl2ZUluY2lkZW50IC0gdGhlIERlc2NyaXB0aXZlIEluY2lkZW50IHRoYXQgZGVmaW5lcyB0aGUgSW5jaWRlbnRcbiAqIEBwYXJhbSB7Y29udGV4dERhdGF9IC0gdGhlIGNvbnRleHQgZGF0YSAob2JqZWN0IGNvbnRhaW5pbmcgaWQgYW5kIGFjdHVhbCBjb250ZXh0KSB0byBiZSB1c2VkIGZvciByZWFsXG4gKiAgICAgIEluY2lkZW50cyBpbml0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGF1ZGlvIC0gZGVmYXVsdHMgdG8gZmFsc2UuIEl0IGRlZmluZXMgd2hldGhlciB0aGUgbWV0aG9kIGlzIGJlZW4gdXNlZFxuICogICAgICBieSBhIHJlYWwgQ2xpcCBvciB0aGUgQXVkaW8gY2xpcFxuICogQHJldHVybnMge29iamVjdH0gLSB0aGUgcmVhbCBJbmNpZGVudFxuICoqL1xuXG5cbmZ1bmN0aW9uIGluY2lkZW50RnJvbURlc2NyaXB0aW9uKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKSB7XG4gIHZhciBhdWRpbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgLypcbiAgUlVMRVM6XG4gIC0gQ2xpcHMgY2FuIG9ubHkgaGF2ZSBzZWxlY3RvcnMgKGFuZCBub3QgaG9zdHMpIGFzIHRoZXkgcGFydGljaXBhdGUgb24gYSBEZXNjLiBUcmVlXG4gICAgICBhbmQgdGh1cyB0aGV5IGFyZSBDbGlwcyBBcyBJbmNpZGVudHMuIFRoZSBEZXNjcmlwdGl2ZUNsaXBzIGFyZSB0cmVhdGVkIGEgYml0XG4gICAgICBkaWZmZXJlbnQgY29tcGFyZWQgdG8gdGhlIHJlc3Qgb2YgdGhlIEluY2lkZW50cyBhcyB0aGV5IGNvcHkgYWxsIG9mIHRoZVxuICAgICAgRGVzY3JpcHRpb24gY2hhbm5lbHMgYW5kIGxhbmVzXG4gIC0gRGVzY3JpcHRpdmUgSW5jaWRlbnRzIGNhbiBlaXRoZXIgaGF2ZSBvciBub3QgaGF2ZSBzZWxlY3RvcnNcbiAgLSBEZXNjcmlwdGl2ZSBDb21wb3MgYWx3YXlzIGhhdmUgc2VsZWN0b3JzXG4gICBBbGwgSW5jaWRlbnRzIG9mIHRoZSB0cmVlLCBubyBtYXR0ZXIgdGhlaXIgdHlwZSBoYXZlIHRoZSBzdGF0aWMgcHJvcGVydGllczpcbiAgLSBJbmNpZGVudCAod2hpY2ggaXMgdGhlIEluY2lkZW50IGNsYXNzIHRoZXkgbmVlZCB0byBpbml0aWFsaXNlKVxuICAtIHBsdWdpbl9ucG1fbmFtZSAodGhlIHBsdWdpbiBuYW1lIHRoZXkgYm9sb25nIHRvKVxuICAtIENoYW5uZWwgKHRoZSBDaGFubmVsIGNsYXNzIHRvIGhhbmRsZSB0aGUgaW5zdGFuY2UpXG4gICovXG5cbiAgLyogY2hlY2sgZm9yIHRoZSBkZXNjcmlwdGl2ZSBpbmNpZGVudCBhbmQgYXVkaW8gY29tcGF0aWJpbGl0eS4gSWYgYXVkaW8gaXMgdHJ1ZSB0aGVuIHdlJ3JlXG4gICAgICB3b3JraW5nIG9uIHRoZSBhdWRpb0NsaXAgYW5kIHdlIG5lZWQgaW5jaWRlbnRzIHRoYXQgYXJlIGF0IGxlYXN0IFwib25cIiB3aGlsZSBpZiB0aGUgYXVkaW89PWZhbHNlXG4gICAgICBhbmQgd2UgYXJlIHdvcmtpbmcgb24gdGhlIHJlYWwgdHJlZSB0aGVuIHdlIHJlamVjdCB0aGUgY2FzZXMgdGhhdCB0aGUgaW5jaWRlbnQgaXMgYXVkaW8gXCJvbmx5XCJcbiAgKi9cbiAgaWYgKGF1ZGlvID09PSB0cnVlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXVkaW8gPT09IFwib2ZmXCIgfHwgYXVkaW8gPT09IGZhbHNlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXVkaW8gPT09IFwib25seVwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW5jaWRlbnRUb1JldHVybjtcblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMsICdzZWxlY3RvcicpKSB7XG4gICAgaWYgKGF1ZGlvID09PSBmYWxzZSAmJiBkZXNjcmlwdGl2ZUluY2lkZW50LnByb3BzLnNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gJ34nIHx8IGF1ZGlvID09PSB0cnVlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMuc2VsZWN0b3IuY2hhckF0KDApICE9PSAnficgJiYgZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5pc0NsaXAgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5pc0NsaXAgPT09IHRydWUpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMsICdzZWxlY3RvcicpICYmIGF1ZGlvID09PSBmYWxzZSkge1xuICAgICAgaW5jaWRlbnRUb1JldHVybiA9IG5ldyBFbGVtZW50Q2xpcFNwbGl0dGVyKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKTtcbiAgICAgIGluY2lkZW50VG9SZXR1cm4ucGx1Z2luX2NoYW5uZWxfY2xhc3MgPSBDaGFubmVsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXVkaW8gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXVkaW9DbGlwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aXZlSW5jaWRlbnQucmVhbENsaXA7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IuSW5jaWRlbnQgPT09IEdyb3VwKSB7XG4gICAgaW5jaWRlbnRUb1JldHVybiA9IGluY2lkZW50RnJvbUluZ3JlZGllbnRzKHtcbiAgICAgIGlkOiBkZXNjcmlwdGl2ZUluY2lkZW50LmlkLFxuICAgICAgYXR0cnM6IGRlc2NyaXB0aXZlSW5jaWRlbnQuYXR0cnMsXG4gICAgICBwcm9wczogZGVzY3JpcHRpdmVJbmNpZGVudC5wcm9wcyxcbiAgICAgIEluY2lkZW50OiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLkluY2lkZW50LFxuICAgICAgcGx1Z2luX25wbV9uYW1lOiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLnBsdWdpbl9ucG1fbmFtZSxcbiAgICAgIENoYW5uZWw6IGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IuQ2hhbm5lbCxcbiAgICAgIERlc2NyaXB0aXZlSW5jaWRlbnQ6IGRlc2NyaXB0aXZlSW5jaWRlbnRcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGluY0lkIGluIGRlc2NyaXB0aXZlSW5jaWRlbnQuY2hpbGRyZW4pIHtcbiAgICAgIHZhciBjaGlsZEluY2lkZW50ID0gaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24oZGVzY3JpcHRpdmVJbmNpZGVudC5jaGlsZHJlbltpbmNJZF0ubGVhZiwgY29udGV4dERhdGEpO1xuXG4gICAgICBpZiAoY2hpbGRJbmNpZGVudCA9PT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaW5jaWRlbnRUb1JldHVybi5hZGRDaGlsZChjaGlsZEluY2lkZW50LCBkZXNjcmlwdGl2ZUluY2lkZW50LmNoaWxkcmVuW2luY0lkXS5wb3NpdGlvbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIGl0IGlzIGFuIEluY2lkZW50IHRoYXQgZXh0ZW5kcyB0aGUgSW5jaWRlbnQgKG5vdCBhIEdyb3VwKSB0aGVuXG4gICAgLy8gd2Ugc2hvdWxkIGFuYXlsc2UgaXQgdG8gaXRzIGVsZW1lbnQvYXR0cmlidXRlIEluY2lkZW50cyBzdGFydGluZyBmcm9tXG4gICAgLy8gdGhlIGVsZW1lbnRzLCB0aGF0J3Mgd2h5IHdlIGNyZWF0ZSBhbiBFbGVtZW50U3BsaXR0ZXIuIEl0IGlzIG91clxuICAgIC8vIHN0YXJ0aW5nIHBvaW50IHRvIHdoaWNoIHRoZSBJbmNpZGVudCB3aWxsIGJlIGFuYWx5c2VkIHRvIGl0c1xuICAgIC8vIGVsZW1lbnQvYXR0cmlidXRlcyBjaGlsZHJlbi5cbiAgICBpbmNpZGVudFRvUmV0dXJuID0gbmV3IEVsZW1lbnRTcGxpdHRlcihkZXNjcmlwdGl2ZUluY2lkZW50LCBjb250ZXh0RGF0YSk7XG4gIH1cblxuICByZXR1cm4gaW5jaWRlbnRUb1JldHVybjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbmNpZGVudEZyb21EZXNjcmlwdGlvbjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * @param {object} ingredients -\n * {\n *      id\n *      attrs\n *      props\n *      Incident\n *      plugin_npm_name\n *      Channel\n *      context (optional)\n *      mcid (optional)\n *      dnaExtras\n * }\n **/\n\nmodule.exports = function (ingredients) {\n  if (!Object.prototype.hasOwnProperty.call(ingredients, \"dnaExtras\")) {\n    ingredients.dnaExtras = {};\n  }\n\n  var incident = new ingredients.Incident(ingredients.attrs, _objectSpread({}, ingredients.props, {\n    id: ingredients.id || helper.getAnId()\n  }), _objectSpread({}, ingredients.dnaExtras, {\n    context: ingredients.context,\n    mcid: ingredients.mcid\n  }));\n  incident.mc_plugin_npm_name = ingredients.plugin_npm_name;\n  incident.plugin_channel_class = ingredients.Channel;\n  incident.DescriptiveIncident = ingredients.DescriptiveIncident;\n  return incident;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMuanM/NGI3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGluZ3JlZGllbnRzIC1cbiAqIHtcbiAqICAgICAgaWRcbiAqICAgICAgYXR0cnNcbiAqICAgICAgcHJvcHNcbiAqICAgICAgSW5jaWRlbnRcbiAqICAgICAgcGx1Z2luX25wbV9uYW1lXG4gKiAgICAgIENoYW5uZWxcbiAqICAgICAgY29udGV4dCAob3B0aW9uYWwpXG4gKiAgICAgIG1jaWQgKG9wdGlvbmFsKVxuICogICAgICBkbmFFeHRyYXNcbiAqIH1cbiAqKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5ncmVkaWVudHMpIHtcbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5ncmVkaWVudHMsIFwiZG5hRXh0cmFzXCIpKSB7XG4gICAgaW5ncmVkaWVudHMuZG5hRXh0cmFzID0ge307XG4gIH1cblxuICB2YXIgaW5jaWRlbnQgPSBuZXcgaW5ncmVkaWVudHMuSW5jaWRlbnQoaW5ncmVkaWVudHMuYXR0cnMsIF9vYmplY3RTcHJlYWQoe30sIGluZ3JlZGllbnRzLnByb3BzLCB7XG4gICAgaWQ6IGluZ3JlZGllbnRzLmlkIHx8IGhlbHBlci5nZXRBbklkKClcbiAgfSksIF9vYmplY3RTcHJlYWQoe30sIGluZ3JlZGllbnRzLmRuYUV4dHJhcywge1xuICAgIGNvbnRleHQ6IGluZ3JlZGllbnRzLmNvbnRleHQsXG4gICAgbWNpZDogaW5ncmVkaWVudHMubWNpZFxuICB9KSk7XG4gIGluY2lkZW50Lm1jX3BsdWdpbl9ucG1fbmFtZSA9IGluZ3JlZGllbnRzLnBsdWdpbl9ucG1fbmFtZTtcbiAgaW5jaWRlbnQucGx1Z2luX2NoYW5uZWxfY2xhc3MgPSBpbmdyZWRpZW50cy5DaGFubmVsO1xuICBpbmNpZGVudC5EZXNjcmlwdGl2ZUluY2lkZW50ID0gaW5ncmVkaWVudHMuRGVzY3JpcHRpdmVJbmNpZGVudDtcbiAgcmV0dXJuIGluY2lkZW50O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar ContextAwareIncident = __webpack_require__(/*! ./ContextAwareIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\");\n\nvar AnimatedAttributesSplitter =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(AnimatedAttributesSplitter, _Group);\n\n  function AnimatedAttributesSplitter(descriptiveIncident, contextData, mcid, selector) {\n    var _this;\n\n    _classCallCheck(this, AnimatedAttributesSplitter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedAttributesSplitter).call(this, {}, {\n      id: \"\".concat(descriptiveIncident.id, \"_\").concat(mcid)\n    }));\n    _this.mcid = mcid;\n    _this.selector = selector;\n\n    _this.setUp(descriptiveIncident, contextData);\n\n    return _this;\n  }\n\n  _createClass(AnimatedAttributesSplitter, [{\n    key: \"setUp\",\n    value: function setUp(descriptiveIncident, contextData) {\n      for (var attr in descriptiveIncident.attrs.animatedAttrs) {\n        var singleAnimatedAttrs = {};\n        singleAnimatedAttrs[attr] = descriptiveIncident.attrs.animatedAttrs[attr];\n\n        var attrsToPass = _objectSpread({}, descriptiveIncident.attrs, {\n          animatedAttrs: singleAnimatedAttrs\n        });\n\n        var propsToPass = _objectSpread({}, descriptiveIncident.props, {\n          selector: this.selector\n        });\n\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: attrsToPass,\n          props: propsToPass,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, this.mcid, attr);\n        this.addChild(contextAwareIncident, 0);\n      }\n    }\n  }]);\n\n  return AnimatedAttributesSplitter;\n}(Group);\n\nmodule.exports = AnimatedAttributesSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1NwbGl0dGVycy9BbmltYXRlZEF0dHJpYnV0ZVNwbGl0dGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9TcGxpdHRlcnMvQW5pbWF0ZWRBdHRyaWJ1dGVTcGxpdHRlci5qcz83ZDk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgR3JvdXAgPSByZXF1aXJlKCcuLi9CYXNlQ2xhc3Nlcy9Hcm91cCcpO1xuXG52YXIgQ29udGV4dEF3YXJlSW5jaWRlbnQgPSByZXF1aXJlKCcuL0NvbnRleHRBd2FyZUluY2lkZW50Jyk7XG5cbnZhciBBbmltYXRlZEF0dHJpYnV0ZXNTcGxpdHRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0dyb3VwKSB7XG4gIF9pbmhlcml0cyhBbmltYXRlZEF0dHJpYnV0ZXNTcGxpdHRlciwgX0dyb3VwKTtcblxuICBmdW5jdGlvbiBBbmltYXRlZEF0dHJpYnV0ZXNTcGxpdHRlcihkZXNjcmlwdGl2ZUluY2lkZW50LCBjb250ZXh0RGF0YSwgbWNpZCwgc2VsZWN0b3IpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXIpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXIpLmNhbGwodGhpcywge30sIHtcbiAgICAgIGlkOiBcIlwiLmNvbmNhdChkZXNjcmlwdGl2ZUluY2lkZW50LmlkLCBcIl9cIikuY29uY2F0KG1jaWQpXG4gICAgfSkpO1xuICAgIF90aGlzLm1jaWQgPSBtY2lkO1xuICAgIF90aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICBfdGhpcy5zZXRVcChkZXNjcmlwdGl2ZUluY2lkZW50LCBjb250ZXh0RGF0YSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXIsIFt7XG4gICAga2V5OiBcInNldFVwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVwKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKSB7XG4gICAgICBmb3IgKHZhciBhdHRyIGluIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXR0cnMuYW5pbWF0ZWRBdHRycykge1xuICAgICAgICB2YXIgc2luZ2xlQW5pbWF0ZWRBdHRycyA9IHt9O1xuICAgICAgICBzaW5nbGVBbmltYXRlZEF0dHJzW2F0dHJdID0gZGVzY3JpcHRpdmVJbmNpZGVudC5hdHRycy5hbmltYXRlZEF0dHJzW2F0dHJdO1xuXG4gICAgICAgIHZhciBhdHRyc1RvUGFzcyA9IF9vYmplY3RTcHJlYWQoe30sIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXR0cnMsIHtcbiAgICAgICAgICBhbmltYXRlZEF0dHJzOiBzaW5nbGVBbmltYXRlZEF0dHJzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBwcm9wc1RvUGFzcyA9IF9vYmplY3RTcHJlYWQoe30sIGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMsIHtcbiAgICAgICAgICBzZWxlY3RvcjogdGhpcy5zZWxlY3RvclxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY29uc3RydWN0aW9uSW5ncmVkaWVudHMgPSB7XG4gICAgICAgICAgaW5jaWRlbnRJZDogZGVzY3JpcHRpdmVJbmNpZGVudC5pZCxcbiAgICAgICAgICBhdHRyczogYXR0cnNUb1Bhc3MsXG4gICAgICAgICAgcHJvcHM6IHByb3BzVG9QYXNzLFxuICAgICAgICAgIEluY2lkZW50OiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLkluY2lkZW50LFxuICAgICAgICAgIHBsdWdpbl9ucG1fbmFtZTogZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5wbHVnaW5fbnBtX25hbWUsXG4gICAgICAgICAgQ2hhbm5lbDogZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5DaGFubmVsLFxuICAgICAgICAgIERlc2NyaXB0aXZlSW5jaWRlbnQ6IGRlc2NyaXB0aXZlSW5jaWRlbnRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNvbnRleHRBd2FyZUluY2lkZW50ID0gbmV3IENvbnRleHRBd2FyZUluY2lkZW50KGNvbnN0cnVjdGlvbkluZ3JlZGllbnRzLCBjb250ZXh0RGF0YSwgdGhpcy5tY2lkLCBhdHRyKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChjb250ZXh0QXdhcmVJbmNpZGVudCwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFuaW1hdGVkQXR0cmlidXRlc1NwbGl0dGVyO1xufShHcm91cCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar ClipCopy = __webpack_require__(/*! ../Clip/ClipCopy */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar ContextAwareClipIncident = _decorate(null, function (_initialize, _Leaf) {\n  var ContextAwareClipIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(ContextAwareClipIncident, _Leaf2);\n\n    function ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident) {\n      var _this;\n\n      _classCallCheck(this, ContextAwareClipIncident);\n\n      // console.log(constructionIngredients.props);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareClipIncident).call(this, {\n        id: \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n      })); // a property to hold all of the contexts\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.contexts = {};\n      _this.constructionIngredients = constructionIngredients;\n      _this.mcid = mcid;\n      _this._duration = descriptiveIncident.realClip.duration;\n      _this.DescriptiveIncident = descriptiveIncident;\n      _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n      _this.plugin_channel_class = constructionIngredients.Channel;\n\n      _this.addContext(contextData);\n\n      descriptiveIncident.realClip.subscribeToDurationChange(function (newDuration) {\n        _this._duration = newDuration;\n\n        _this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n      });\n      return _this;\n    }\n\n    return ContextAwareClipIncident;\n  }(_Leaf);\n\n  return {\n    F: ContextAwareClipIncident,\n    d: [{\n      kind: \"get\",\n      key: \"originalContext\",\n      value: function originalContext() {\n        return this.contexts[this.originalContextKey];\n      }\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this._duration;\n      }\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        this.contexts[contextId].onProgress(fraction, milliseconds, forceReset);\n      }\n    }, {\n      kind: \"method\",\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        // if it's the first context to be added then it's the original\n        if (Object.keys(this.contexts).length === 0) {\n          this.originalContextKey = contextData.clipId;\n        } // instantiates the Clip so it renders\n\n\n        var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n          context: contextData.context,\n          mcid: this.mcid,\n          Incident: ClipCopy,\n          DescriptiveIncident: this.DescriptiveIncident\n        }); // and puts it on the corresponding context key\n\n\n        this.contexts[contextData.clipId] = incidentFromIngredients(ingredientsToPass);\n\n        if (forceGetContext === true) {\n          this.contexts[contextData.clipId]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddContext\",\n      value: function handleAddContext(target, payload) {\n        this.addContext(payload, true);\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {} // massive editing methods that apply the request massively to all of the\n      // Incidents of all of the contexts\n\n    }, {\n      kind: \"method\",\n      key: \"gotContext\",\n      value: function gotContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].gotContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        for (var context in this.contexts) {\n          this.contexts[context]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var context in this.contexts) {\n          this.contexts[context].lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].onGetContext();\n        }\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = ContextAwareClipIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar _CONST = __webpack_require__(/*! ../_configuration/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js\");\n\nvar ContextAwareIncident = _decorate(null, function (_initialize, _Leaf) {\n  var ContextAwareIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(ContextAwareIncident, _Leaf2);\n\n    function ContextAwareIncident(constructionIngredients, contextData, mcid, attribute) {\n      var _this;\n\n      _classCallCheck(this, ContextAwareIncident);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareIncident).call(this, _objectSpread({}, constructionIngredients.props, {\n        id: attribute !== null ? \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid, \"_\").concat(attribute) : \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n      }))); // a property to hold all of the contexts\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.contexts = {};\n      _this.constructionIngredients = constructionIngredients;\n      _this.mcid = mcid;\n      _this.attribute = attribute; // this._duration = constructionIngredients.props.duration;\n\n      _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n      _this.plugin_channel_class = constructionIngredients.Channel;\n      _this.DescriptiveIncident = constructionIngredients.DescriptiveIncident;\n\n      _this.addContext(contextData);\n\n      if (attribute !== null) {\n        if (_typeof(_this.constructionIngredients.attrs.animatedAttrs[_this.attribute]) === 'object') {\n          _this.originalAnimatedAttributeValue = Object.assign({}, _this.constructionIngredients.attrs.animatedAttrs[_this.attribute]);\n        } else {\n          _this.originalAnimatedAttributeValue = _this.constructionIngredients.attrs.animatedAttrs[_this.attribute];\n        }\n      }\n\n      return _this;\n    }\n\n    return ContextAwareIncident;\n  }(_Leaf);\n\n  return {\n    F: ContextAwareIncident,\n    d: [{\n      kind: \"get\",\n      key: \"originalContext\",\n      value: function originalContext() {\n        return this.contexts[this.originalContextKey];\n      }\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return _get(_getPrototypeOf(ContextAwareIncident.prototype), \"duration\", this);\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(milliseconds) {\n        _set(_getPrototypeOf(ContextAwareIncident.prototype), \"duration\", milliseconds, this, true);\n\n        for (var context in this.contexts) {\n          this.contexts[context].duration = milliseconds;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        // if it's the first context to be added then it's the original\n        var isTheOriginalContext = false;\n\n        if (Object.keys(this.contexts).length === 0) {\n          this.originalContextKey = contextData.clipId;\n          this.originalClipContext = contextData.context;\n          isTheOriginalContext = true;\n        }\n\n        var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n          context: contextData.context,\n          mcid: this.mcid\n        });\n\n        var whatToAdd = incidentFromIngredients(ingredientsToPass);\n        this.contexts[contextData.clipId] = whatToAdd; // when we add a new context we must set the inital value of the newly added Incidents\n        // but only for Incidents with animatedAttrs\n\n        if (!isTheOriginalContext && this.attribute !== null) {\n          this.contexts[contextData.clipId].setInitialValue(this.getInitialValue());\n        }\n\n        if (forceGetContext === true) {\n          this.contexts[contextData.clipId]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddContext\",\n      value: function handleAddContext(target, payload) {\n        this.addContext(payload, true);\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        /* MonoIncidents are totally agnostic about delay, hiatus and repeats.\n        CAI is not that's exactly the point where these properties management occurs.\n        Having alredy set the duration of the ContextAwareIncident according to\n        all of these props, here the CAI decides on the progress that its MonoIncidents\n        are to on at the given millisecond and according to the given props.\n        */\n        // step 1: find the full delay-duration-hiatus duration of one repeat\n        var repeatDuration = this.delay + this.props.duration + this.hiatus; // step 2.a: find the running repeat and millisecond of this repeat\n\n        var millisecondWithinRepeat = milliseconds % repeatDuration; // step 2.b: decide between 0 and 1\n\n        if (milliseconds !== 0 && millisecondWithinRepeat === 0) {\n          millisecondWithinRepeat = this.delay + this.props.duration;\n        } // step 3: find the millisecond of the MonoIncident\n\n\n        var MI_millisecond = millisecondWithinRepeat - this.delay;\n\n        if (MI_millisecond < 0) {\n          MI_millisecond = 0;\n        } else if (MI_millisecond > this.props.duration) {\n          // if it has stepped into hiatus\n          MI_millisecond = this.props.duration;\n        }\n\n        var MI_fraction = MI_millisecond / this.props.duration;\n\n        if (contextId === undefined) {\n          for (var context in this.contexts) {\n            this.contexts[context].onProgress(MI_fraction, MI_millisecond);\n          }\n\n          return;\n        }\n\n        this.contexts[contextId].onProgress(MI_fraction, MI_millisecond);\n      }\n      /** METHODS THAT ACT AS \"PROXY\" TO ALL OF THE INCIDENTS BELONGING TO\n       * THE INCIDENTS COLLECTION OF THE CONTEXT AWARE INCIDENT\n       **/\n\n    }, {\n      kind: \"get\",\n      key: \"animatedAttributeValue\",\n      value: function animatedAttributeValue() {\n        return this.constructionIngredients.attrs.animatedAttrs[this.attribute];\n      }\n    }, {\n      kind: \"set\",\n      key: \"animatedAttributeValue\",\n      value: function animatedAttributeValue(value) {\n        this.constructionIngredients.attrs.animatedAttrs[this.attribute] = value;\n      } // massive editing methods that apply the request massively to all of the\n      // Incidents of all of the contexts\n\n    }, {\n      kind: \"method\",\n      key: \"gotContext\",\n      value: function gotContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].gotContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        for (var context in this.contexts) {\n          this.contexts[context]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var context in this.contexts) {\n          this.contexts[context].lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].onGetContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"getInitialValue\",\n      value: function getInitialValue() {\n        var attribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        if (attribute === null) {\n          attribute = this.attribute;\n        }\n\n        return this.originalContext.getInitialValue();\n      }\n    }, {\n      kind: \"get\",\n      key: \"initialValue\",\n      value: function initialValue() {\n        return this.getInitialValue();\n      }\n    }, {\n      kind: \"get\",\n      key: \"scratchValue\",\n      value: function scratchValue() {\n        return this.originalContext.scratchValue;\n      }\n    }, {\n      kind: \"get\",\n      key: \"pureInitialValues\",\n      value: function pureInitialValues() {\n        return this.originalContext.pureInitialValues;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setInitialValue\",\n      value: function setInitialValue() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (value === null) {\n          value = this.getScratchValue();\n        }\n\n        for (var context in this.contexts) {\n          this.contexts[context].setInitialValue(JSON.parse(JSON.stringify(value)), store);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"getScratchValue\",\n      value: function getScratchValue() {\n        var contextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        if (contextId === null) {\n          var contextsKeys = Object.keys(this.contexts);\n\n          if (Object.prototype.hasOwnProperty.call(this.originalClipContext, 'nonFragmentedContext')) {\n            var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n              context: this.originalClipContext.nonFragmentedContext,\n              mcid: this.mcid\n            });\n\n            var tempIncident = incidentFromIngredients(ingredientsToPass);\n            return tempIncident.getScratchValue();\n          } else if (contextsKeys.length === 1) {\n            return this.originalContext.getScratchValue();\n          } else {\n            // prefer another (not the original) context to provide scratch values\n            return this.contexts[contextsKeys[1]].getScratchValue();\n          }\n        }\n\n        return this.contexts[contextId].getScratchValue();\n      }\n    }, {\n      kind: \"method\",\n      key: \"setCompoAttrKeyValue\",\n      value: function setCompoAttrKeyValue(key, value) {\n        for (var context in this.contexts) {\n          this.contexts[context].attrs.animatedAttrs[this.attribute][key] = value;\n          this.contexts[context].lastWish();\n          this.contexts[context].onGetContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"play\",\n      value: function play(fraction, ms, contextId) {\n        return this.contexts[contextId].play(ms);\n      }\n    }, {\n      kind: \"method\",\n      key: \"stop\",\n      value: function stop(contextId) {\n        this.contexts[contextId].stop();\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = ContextAwareIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DWI = __webpack_require__(/*! ./ElementSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\");\n\nvar ContextAwareClipIncident = __webpack_require__(/*! ./ContextAwareClipIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Clip/ClipsChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n/**\n * This Class acts as the DOM Aware Incident for Clips. When constructed the Incident passed to\n * it is a Clip with FragmentHTML context handler.\n * On addition, edit or deletion of Incidents on the Fragmented Clip's tree, of the\n * Descriptive Clip this ElementClipSplitter implements, all updates on lanes\n * and everything that these clips need in order to run are made directly to the\n * ContextAwareIncidents of the DescriptiveClip's real Clip.\n */\n\n\nvar ElementClipSplitter =\n/*#__PURE__*/\nfunction (_DWI) {\n  _inherits(ElementClipSplitter, _DWI);\n\n  function ElementClipSplitter(descriptiveIncident, contextData) {\n    var _this;\n\n    _classCallCheck(this, ElementClipSplitter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementClipSplitter).call(this, descriptiveIncident, contextData));\n    _this.realClip = descriptiveIncident.realClip;\n    return _this;\n  }\n\n  _createClass(ElementClipSplitter, [{\n    key: \"_createElementIncident\",\n    value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n      var constructionArguments = descriptiveIncident.realClip.exportConstructionArguments();\n      var constructionIngredients = {\n        incidentId: descriptiveIncident.id,\n        attrs: constructionArguments.attrs,\n        props: _objectSpread({}, constructionArguments.props, {\n          selector: contextData.context.getElementSelectorByMCID(mcid),\n          runTimeInfo: descriptiveIncident.runTimeInfo\n        }),\n        Incident: descriptiveIncident.constructor.Incident,\n        plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n        Channel: Channel,\n        DescriptiveIncident: descriptiveIncident\n      };\n      var contextAwareClipIncident = new ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident);\n      this.addChild(contextAwareClipIncident, 0);\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return _get(_getPrototypeOf(ElementClipSplitter.prototype), \"duration\", this);\n    }\n    /*\n    ElementClipSplitter split the DescriptiveClip to element ContextAwareIncidents\n    All of the element ContextAwareClipIncidents instantiated share the same\n    DescriptiveClip and thus the same realClip. So ElementClipSplitter are\n    the Node from where a realClip starts to get copies.\n    Resizing though means resizing the realClip. In order to avoid redunduncy we\n    manage the resize here and we don't pass further down to the ContextAwareClipIncidents\n    the resizing command.\n    */\n    ,\n    set: function set(milliseconds) {\n      this.realClip._resize(milliseconds / this.realClip.duration);\n\n      this._duration = milliseconds;\n    }\n  }]);\n\n  return ElementClipSplitter;\n}(DWI);\n\nmodule.exports = ElementClipSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar AnimatedAttributeSplitter = __webpack_require__(/*! ./AnimatedAttributeSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextAwareIncident = __webpack_require__(/*! ./ContextAwareIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\");\n\nvar ElementSplitter =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(ElementSplitter, _Group);\n\n  function ElementSplitter(descriptiveIncident, contextData) {\n    var _this;\n\n    _classCallCheck(this, ElementSplitter);\n\n    // we make sure the DOMAwareIncident takes the same id as the Descriptive Incident\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementSplitter).call(this, {}, {\n      id: descriptiveIncident.id\n    })); // a property to hold all of the contexts\n\n    _this.contexts = {};\n    _this.contexts[contextData.clipId] = contextData.context;\n    _this.originalContextKey = contextData.clipId;\n    _this.instantiatedCopiesContexts = contextData.instantiatedCopiesContexts;\n\n    _this.setUp(descriptiveIncident, contextData);\n\n    return _this;\n  }\n\n  _createClass(ElementSplitter, [{\n    key: \"setUp\",\n    value: function setUp(descriptiveIncident, contextData) {\n      // the elements of the original context\n      var elements = this.originalContext.getElements(descriptiveIncident.selector()); // the elements for each of the copied contexts\n      // const copiesElements = {};\n      // for (let contextKey in this.instantiatedCopiesContexts) {\n      //     copiesElements[contextKey] = Array.from(this.instantiatedCopiesContexts[contextKey].rootElement.querySelectorAll(descriptiveIncident.props.selector));\n      // }\n\n      var totalElements = elements.length;\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i]; // set the mcid of the element on index i of the original context\n\n        var mcid = this._getElementMCID(element); // set the same mcid for the elements of the same context in all of the instantiatedCopiesContexts\n\n\n        for (var contextKey in this.instantiatedCopiesContexts) {\n          // TODO perfrormance improvement via selecting once elements per context\n          this._setElementMCID(this.instantiatedCopiesContexts[contextKey], this.instantiatedCopiesContexts[contextKey].getElements(descriptiveIncident.selector())[i], mcid);\n        }\n\n        this._createElementIncident(element, descriptiveIncident, contextData, i, totalElements, mcid);\n      }\n    }\n  }, {\n    key: \"_getElementMCID\",\n    value: function _getElementMCID(element) {\n      var mcid = this.originalContext.getMCID(element);\n\n      if (!mcid) {\n        mcid = helper.getAnId(true);\n        this.originalContext.setMCID(element, mcid);\n      }\n\n      return mcid;\n    }\n  }, {\n    key: \"_setElementMCID\",\n    value: function _setElementMCID(context, element, mcid) {\n      var existingMCID = context.getMCID(element);\n\n      if (!existingMCID) {\n        context.setMCID(element, mcid);\n      }\n    }\n  }, {\n    key: \"_createElementIncident\",\n    value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n      /* elements splitter might handle either attribute Incidents (that have animatedAttrs) or Incidents\n      that do not have animatedAttrs such as MediaPlayback Incidents.\n      In the case of an attributed Incident we proceed by creating one AttributeSplitter for each\n      while on the case of an non-attribured Incident we go ahead and\n      */\n      if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'animatedAttrs')) {\n        var animatedAttributeSplitter = new AnimatedAttributeSplitter(descriptiveIncident, contextData, mcid, contextData.context.getElementSelectorByMCID(mcid));\n        this.addChild(animatedAttributeSplitter, 0);\n      } else if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'keyframes')) {// TODO create a keyframes attribute splitter\n      } else {\n        var attrsToPass = descriptiveIncident.attrs;\n\n        var propsToPass = _objectSpread({}, descriptiveIncident.props, {\n          selector: this.selector\n        });\n\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: attrsToPass,\n          props: propsToPass,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, mcid, null);\n        this.addChild(contextAwareIncident, 0);\n      }\n    }\n  }, {\n    key: \"originalContext\",\n    get: function get() {\n      return this.contexts[this.originalContextKey];\n    }\n  }]);\n\n  return ElementSplitter;\n}(Group);\n\nmodule.exports = ElementSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar systoleDiastole = __webpack_require__(/*! ./decorators/systoleDiastole */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\");\n\nvar Leaf = _decorate(null, function (_initialize) {\n  var Leaf = function Leaf() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Leaf);\n\n    _initialize(this);\n\n    // parentNode is a reference to the parent Node the Leaf is attached to (if any)\n    this.parentNode = null;\n    this.isNode = false;\n\n    if (Object.prototype.hasOwnProperty.call(props, \"id\")) {\n      this.id = props.id;\n    } else {\n      this.id = helper.getAnId();\n    }\n\n    this.props = props;\n  };\n\n  return {\n    F: Leaf,\n    d: [{\n      kind: \"get\",\n      key: \"delay\",\n      value: function delay() {\n        if (Object.prototype.hasOwnProperty.call(this.props, \"delay\")) {\n          return this.props.delay;\n        }\n\n        return 0;\n      }\n    }, {\n      kind: \"set\",\n      key: \"delay\",\n      value: function delay(val) {\n        if (val != 0) {\n          this.props.delay = val;\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"hiatus\",\n      value: function hiatus() {\n        if (Object.prototype.hasOwnProperty.call(this.props, \"hiatus\")) {\n          return this.props.hiatus;\n        }\n\n        return 0;\n      }\n    }, {\n      kind: \"set\",\n      key: \"hiatus\",\n      value: function hiatus(val) {\n        if (val != 0) {\n          this.props.hiatus = val;\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"repeats\",\n      value: function repeats() {\n        if (Object.prototype.hasOwnProperty.call(this.props, \"repeats\")) {\n          return this.props.repeats;\n        }\n\n        return 1;\n      }\n    }, {\n      kind: \"set\",\n      key: \"repeats\",\n      value: function repeats(val) {\n        this.props.repeats = val;\n      }\n      /**\n       * the full duration of the Leaf taking in consideration all: delay, duration, hiatus and\n       * repeats factor\n       **/\n\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this.repeats * (this.delay + this.props.duration + this.hiatus);\n      }\n      /**\n       * the setter sets the overall duration of the Leaf by altering all\n       * delay, duration and hiatus properties of it\n       **/\n\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(milliseconds) {\n        var fraction = milliseconds / this.duration;\n        this.props.duration *= fraction;\n        this.hiatus *= fraction;\n        this.delay *= fraction;\n      }\n      /**\n       * setNewDuration method sets the new FULL duration as it derives from the\n       * delay, duration, hiatus and repeats factors\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"setNewDuration\",\n      value: function setNewDuration(newDuration) {\n        this.duration = newDuration;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _CONST._DIRECTIONS._UP\n        });\n      }\n    }, {\n      kind: \"method\",\n      decorators: [systoleDiastole],\n      key: \"systoleDiastole\",\n      value: function systoleDiastole() {}\n    }, {\n      kind: \"get\",\n      key: \"hasParent\",\n      value: function hasParent() {\n        if (this.parentNode === null) {\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"attachToNode\",\n      value: function attachToNode(node) {\n        this.parentNode = node;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        this.parentNode = null;\n      }\n      /**\n      @param {string} name - the name of the message\n      @param {object} payload - the payload of the message\n      @param {object} target - specifies the target of the message in a key-value pairs object\n      @param {object} options - in the form:\n      {\n          direction (either _UP or _DOWN)\n          selfExecute (either true which means the Leaf should try to handle the message itself or\n              false which means the Leaf should directly forward the message to its parent)\n      }\n      @returns The expected result of this method is on the form:\n      {\n          response: an object the structure of which depends on the name of the message\n              and maybe even on the payload\n          responder: a direct reference to the lead that actually responded\n          (only valid for direaction _DOWN) positionDelta: the position delta of the responder compared to the requester\n      }\n      **/\n\n    }, {\n      kind: \"method\",\n      key: \"putMessageOnPipe\",\n      value: function putMessageOnPipe(name, payload, target) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n        // default direction: _DOWN\n        if (!Object.prototype.hasOwnProperty.call(options, \"direction\")) {\n          options.direction = _CONST._DIRECTIONS._DOWN;\n        } // default positionDelta = 0\n\n\n        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, \"positionDelta\")) {\n          options.positionDelta = 0;\n        }\n\n        if (options.selfExecute === true) {\n          // if the Leaf has a \"handle<name>\" method with the first letter of\n          // name in Capital it runs it\n          var handlingMethodName = \"handle\".concat(helper.jsUcfirst(name));\n          var capable = typeof this[handlingMethodName] === 'function';\n\n          if (capable) {\n            var response = this[handlingMethodName](target, payload);\n\n            if (response !== _CONST._BYPASS) {\n              var result = {\n                response: response,\n                responder: this\n              };\n\n              if (options.direction === _CONST._DIRECTIONS._UP) {\n                return result;\n              } else {\n                return [_objectSpread({}, result, {\n                  positionDelta: options.positionDelta\n                })];\n              }\n            }\n          }\n        }\n\n        if (options.direction === _CONST._DIRECTIONS._UP) {\n          if (this.hasParent) {\n            return this.parentNode.putMessageOnPipe(name, payload, target, {\n              selfExecute: true,\n              direction: _CONST._DIRECTIONS._UP\n            });\n          } else {\n            // if the message reaches the top of the tree without finding any liable target\n            return {\n              response: false,\n              responder: null\n            };\n          }\n        } else {\n          // _CONST._DIRECTIONS._DOWN\n          return [];\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"bypass\",\n      value: function bypass() {\n        return _CONST._BYPASS;\n      }\n    }]\n  };\n});\n\nmodule.exports = Leaf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar _COPY = __webpack_require__(/*! ./_copy */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js\");\n\nvar systoleDiastole = __webpack_require__(/*! ./decorators/systoleDiastole */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\");\n\nvar Node = _decorate(null, function (_initialize, _Leaf) {\n  var Node =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(Node, _Leaf2);\n\n    function Node() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, Node);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.isNode = true;\n      /**\n        The object holds the Incidents of the Scene on the format:\n        {\n            <id>: {\n                  id // the id of the Incident object\n                  leaf // the incident object\n                  position // the position of the incident\n            },\n            ...\n        }\n         */\n\n      _this.children = {};\n      _this.calculatedDuration = 0;\n      return _this;\n    }\n\n    return Node;\n  }(_Leaf);\n\n  return {\n    F: Node,\n    d: [{\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this.calculatedDuration;\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(newDuration) {\n        var durationFraction = newDuration / this.duration;\n\n        if (this.props) {\n          if (Object.prototype.hasOwnProperty.call(this.props, \"duration\")) {\n            this.props.duration = newDuration;\n          }\n        }\n\n        this.calculatedDuration = newDuration;\n\n        for (var childKey in this.children) {\n          var child = this.children[childKey];\n          this.editPosition(child.id, child.position * durationFraction, true);\n          child.leaf.systoleDiastole(durationFraction);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"setNewDuration\",\n      value: function setNewDuration(newDuration) {\n        this.duration = newDuration;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _CONST._DIRECTIONS._UP\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateDuration\",\n      value: function _calculateDuration() {\n        var duration = 0;\n\n        for (var childKey in this.children) {\n          var child = this.children[childKey];\n\n          if (child.position + child.leaf.duration > duration) {\n            duration = child.position + child.leaf.duration;\n          }\n        }\n\n        if (duration === this.calculatedDuration) {\n          return false;\n        }\n\n        if (this.props) {\n          if (Object.prototype.hasOwnProperty.call(this.props, \"duration\")) {\n            this.props.duration = duration;\n          }\n        }\n\n        this.calculatedDuration = duration;\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [systoleDiastole],\n      key: \"systoleDiastole\",\n      value: function systoleDiastole() {}\n    }, {\n      kind: \"method\",\n      key: \"handleRecalcDuration\",\n      value: function handleRecalcDuration(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this._calculateDuration()) {\n          return this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: false,\n            direction: _CONST._DIRECTIONS._UP\n          });\n        }\n\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"getLeafById\",\n      value: function getLeafById(id) {\n        var onlyDirectChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return this.children[id].leaf;\n        } else if (onlyDirectChild === false) {\n          for (var child in this.children) {\n            var childLeaf = this.children[child].leaf;\n\n            if (childLeaf.isNode) {\n              var leaf = childLeaf.getLeafById(id);\n\n              if (leaf != null) {\n                return leaf;\n              }\n            }\n          }\n        } else {\n          return null;\n        }\n\n        return null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"getLeafPosition\",\n      value: function getLeafPosition(id) {\n        return this.children[id].position;\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkAddition\",\n      value: function checkAddition(leaf, position) {\n        if (leaf.hasParent) {\n          return {\n            result: false,\n            reason: _COPY._LEAFALREADYASSIGNED\n          };\n        }\n\n        if (position < 0) {\n          return {\n            result: false,\n            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"addChild\",\n      value: function addChild(leaf, position) {\n        // this hasParent check occurs here as an extra security check so it\n        // gets executed regardless if the user wants to perform checks or not\n        if (leaf.hasParent) {\n          return {\n            result: false,\n            reason: _COPY._LEAFALREADYASSIGNED\n          };\n        }\n\n        this.children[leaf.id] = {\n          id: leaf.id,\n          leaf: leaf,\n          position: position\n        };\n        leaf.attachToNode(this);\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _CONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkRemoveChild\",\n      value: function checkRemoveChild(id) {\n        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return {\n            result: false,\n            reason: _COPY._LEAFNOTFOUND\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"removeChild\",\n      value: function removeChild(id) {\n        this.children[id].leaf.detachFromParent();\n        delete this.children[id];\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _CONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkEditPosition\",\n      value: function checkEditPosition(id, position) {\n        if (position < 0) {\n          return {\n            result: false,\n            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED\n          };\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return {\n            result: false,\n            reason: _COPY._LEAFNOTFOUND\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"editPosition\",\n      value: function editPosition(id, position) {\n        var bypassRecalcDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n          this.children[id].position = position;\n\n          if (bypassRecalcDuration === false) {\n            this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _CONST._DIRECTIONS._UP\n            });\n          }\n\n          return {\n            result: true\n          };\n        }\n      }\n      /**\n      The expected result of this method depends on the direction of the message\n      The direction might either be _UP or _DOWN.\n      In the case of _UP the expected result is identical as on Leaf:\n      {\n          response: an object the structure of which depends on the name of the message\n              and maybe even on the payload\n          responder: a direct reference to the lead that actually responded\n      }\n      In the case of _DOWN though, where multiple Leafs might be eligible in the tree\n      for handling the message the result is on the form:\n      [\n          {\n              response: an object the structure of which depends on the name of the message\n                  and maybe even on the payload\n              responder: a direct reference to the lead that actually responded\n              positionDelta: the position delta of the responder compared to the requester\n          }\n      ]\n      */\n\n    }, {\n      kind: \"method\",\n      key: \"putMessageOnPipe\",\n      value: function putMessageOnPipe(name, payload, target) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n        // default direction: _DOWN\n        if (!Object.prototype.hasOwnProperty.call(options, 'direction')) {\n          options.direction = _CONST._DIRECTIONS._DOWN;\n        } // default positionDelta = 0\n\n\n        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, 'positionDelta')) {\n          options.positionDelta = 0;\n        }\n\n        if (options.direction === _CONST._DIRECTIONS._UP) {\n          // if the direction is up\n          return _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options); // act exactly as any other Leaf\n        } else {\n          var result = _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options);\n\n          if (result.length > 0) {\n            return result;\n          }\n\n          for (var child in this.children) {\n            var leaf = this.children[child].leaf;\n\n            var newOptions = _objectSpread({}, options, {\n              selfExecute: true,\n              positionDelta: options.positionDelta + this.children[child].position\n            });\n\n            result = result.concat(leaf.putMessageOnPipe(name, payload, target, newOptions));\n          }\n\n          return result;\n        }\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _STATE: {\n    _ROOTOFTREE: \"root_of_descriptive_clip\",\n    // this Descriptive Incident is directly attached to a real Clip\n    _FREE: \"free\" // this DI is neither attached to a real Clip nor has a parent on the Descriptive Tree\n\n  },\n  _DIRECTIONS: {\n    _UP: \"up\",\n    _DOWN: \"down\"\n  },\n  _TARGETTYPES: {\n    _ROOTOFTREE: \"native.tree.rootoftree\"\n  },\n  _BYPASS: \"native.tree.bypass\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX0NPTlNULmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9UcmVlL19DT05TVC5qcz84NjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgX1NUQVRFOiB7XG4gICAgX1JPT1RPRlRSRUU6IFwicm9vdF9vZl9kZXNjcmlwdGl2ZV9jbGlwXCIsXG4gICAgLy8gdGhpcyBEZXNjcmlwdGl2ZSBJbmNpZGVudCBpcyBkaXJlY3RseSBhdHRhY2hlZCB0byBhIHJlYWwgQ2xpcFxuICAgIF9GUkVFOiBcImZyZWVcIiAvLyB0aGlzIERJIGlzIG5laXRoZXIgYXR0YWNoZWQgdG8gYSByZWFsIENsaXAgbm9yIGhhcyBhIHBhcmVudCBvbiB0aGUgRGVzY3JpcHRpdmUgVHJlZVxuXG4gIH0sXG4gIF9ESVJFQ1RJT05TOiB7XG4gICAgX1VQOiBcInVwXCIsXG4gICAgX0RPV046IFwiZG93blwiXG4gIH0sXG4gIF9UQVJHRVRUWVBFUzoge1xuICAgIF9ST09UT0ZUUkVFOiBcIm5hdGl2ZS50cmVlLnJvb3RvZnRyZWVcIlxuICB9LFxuICBfQllQQVNTOiBcIm5hdGl2ZS50cmVlLmJ5cGFzc1wiXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _LEAFALREADYASSIGNED: \"Leaf has already been attached to another Node\",\n  _NEGATIVEPOSITIONNOTALLOWED: \"Negative positioning of childs on nodes is not allowed\",\n  _LEAFNOTFOUND: \"The Leaf with the requested id couldn't be found on the Tree\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX2NvcHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX2NvcHkuanM/MDczOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9MRUFGQUxSRUFEWUFTU0lHTkVEOiBcIkxlYWYgaGFzIGFscmVhZHkgYmVlbiBhdHRhY2hlZCB0byBhbm90aGVyIE5vZGVcIixcbiAgX05FR0FUSVZFUE9TSVRJT05OT1RBTExPV0VEOiBcIk5lZ2F0aXZlIHBvc2l0aW9uaW5nIG9mIGNoaWxkcyBvbiBub2RlcyBpcyBub3QgYWxsb3dlZFwiLFxuICBfTEVBRk5PVEZPVU5EOiBcIlRoZSBMZWFmIHdpdGggdGhlIHJlcXVlc3RlZCBpZCBjb3VsZG4ndCBiZSBmb3VuZCBvbiB0aGUgVHJlZVwiXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * this method acts as a proxy to duration setter by taking a fraction and not\n * an absolute number for the overall duration of the Leaf\n **/\nfunction systoleDiastole(payload) {\n  payload.descriptor.value = function (durationFraction) {\n    this.duration = this.duration * durationFraction;\n  };\n}\n\nmodule.exports = systoleDiastole;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvZGVjb3JhdG9ycy9zeXN0b2xlRGlhc3RvbGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvZGVjb3JhdG9ycy9zeXN0b2xlRGlhc3RvbGUuanM/OWZhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiB0aGlzIG1ldGhvZCBhY3RzIGFzIGEgcHJveHkgdG8gZHVyYXRpb24gc2V0dGVyIGJ5IHRha2luZyBhIGZyYWN0aW9uIGFuZCBub3RcbiAqIGFuIGFic29sdXRlIG51bWJlciBmb3IgdGhlIG92ZXJhbGwgZHVyYXRpb24gb2YgdGhlIExlYWZcbiAqKi9cbmZ1bmN0aW9uIHN5c3RvbGVEaWFzdG9sZShwYXlsb2FkKSB7XG4gIHBheWxvYWQuZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uIChkdXJhdGlvbkZyYWN0aW9uKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24gKiBkdXJhdGlvbkZyYWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN5c3RvbGVEaWFzdG9sZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  'atTheEndOfTheGroup': {\n    value: 'end',\n    purpose: \"It's used on Groups and more specifically on the addIncident (and thus also on addPassiveIncident) methods. It\\n            implies that the millisecond for the new incident to be added should be at the end of the Group\"\n  },\n  notCalculateableScratchValue: \"motorcortex2__notCalculateableScratchValue\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb25maWd1cmF0aW9uL19DT05TVC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX2NvbmZpZ3VyYXRpb24vX0NPTlNULmpzPzM0MDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAnYXRUaGVFbmRPZlRoZUdyb3VwJzoge1xuICAgIHZhbHVlOiAnZW5kJyxcbiAgICBwdXJwb3NlOiBcIkl0J3MgdXNlZCBvbiBHcm91cHMgYW5kIG1vcmUgc3BlY2lmaWNhbGx5IG9uIHRoZSBhZGRJbmNpZGVudCAoYW5kIHRodXMgYWxzbyBvbiBhZGRQYXNzaXZlSW5jaWRlbnQpIG1ldGhvZHMuIEl0XFxuICAgICAgICAgICAgaW1wbGllcyB0aGF0IHRoZSBtaWxsaXNlY29uZCBmb3IgdGhlIG5ldyBpbmNpZGVudCB0byBiZSBhZGRlZCBzaG91bGQgYmUgYXQgdGhlIGVuZCBvZiB0aGUgR3JvdXBcIlxuICB9LFxuICBub3RDYWxjdWxhdGVhYmxlU2NyYXRjaFZhbHVlOiBcIm1vdG9yY29ydGV4Ml9fbm90Q2FsY3VsYXRlYWJsZVNjcmF0Y2hWYWx1ZVwiXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nknown events:\n- state-change / meta: the name of the new state\n- attribute-rejection / meta: animationID, attributes\n- animation-rejection / meta: animationID\n- conflicts-on-edit\n*/\nvar conf = {\n  keyframe_sec_key: 'sec_',\n  elements_data_attribute_name: 'data-motorcortex2-id',\n  selfContainedContextHandler: 'closed',\n  logLevel: 1,\n  testMode: true,\n  logTypes: [{\n    key: 'info',\n    style: 'color: #666;',\n    level: 5\n  }, {\n    key: 'notice',\n    style: 'background: rgba(0, 0, 0, 0.8); color:white; padding:8px;',\n    level: 4\n  }, {\n    key: 'warning',\n    style: 'color: black; background: orange;',\n    level: 2\n  }, {\n    key: 'error',\n    style: 'color: black; background: red;',\n    level: 1\n  }]\n};\nmodule.exports = conf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb25maWd1cmF0aW9uL2dlbmVyYWxDb25mLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZi5qcz85YjY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxua25vd24gZXZlbnRzOlxuLSBzdGF0ZS1jaGFuZ2UgLyBtZXRhOiB0aGUgbmFtZSBvZiB0aGUgbmV3IHN0YXRlXG4tIGF0dHJpYnV0ZS1yZWplY3Rpb24gLyBtZXRhOiBhbmltYXRpb25JRCwgYXR0cmlidXRlc1xuLSBhbmltYXRpb24tcmVqZWN0aW9uIC8gbWV0YTogYW5pbWF0aW9uSURcbi0gY29uZmxpY3RzLW9uLWVkaXRcbiovXG52YXIgY29uZiA9IHtcbiAga2V5ZnJhbWVfc2VjX2tleTogJ3NlY18nLFxuICBlbGVtZW50c19kYXRhX2F0dHJpYnV0ZV9uYW1lOiAnZGF0YS1tb3RvcmNvcnRleDItaWQnLFxuICBzZWxmQ29udGFpbmVkQ29udGV4dEhhbmRsZXI6ICdjbG9zZWQnLFxuICBsb2dMZXZlbDogMSxcbiAgdGVzdE1vZGU6IHRydWUsXG4gIGxvZ1R5cGVzOiBbe1xuICAgIGtleTogJ2luZm8nLFxuICAgIHN0eWxlOiAnY29sb3I6ICM2NjY7JyxcbiAgICBsZXZlbDogNVxuICB9LCB7XG4gICAga2V5OiAnbm90aWNlJyxcbiAgICBzdHlsZTogJ2JhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgY29sb3I6d2hpdGU7IHBhZGRpbmc6OHB4OycsXG4gICAgbGV2ZWw6IDRcbiAgfSwge1xuICAgIGtleTogJ3dhcm5pbmcnLFxuICAgIHN0eWxlOiAnY29sb3I6IGJsYWNrOyBiYWNrZ3JvdW5kOiBvcmFuZ2U7JyxcbiAgICBsZXZlbDogMlxuICB9LCB7XG4gICAga2V5OiAnZXJyb3InLFxuICAgIHN0eWxlOiAnY29sb3I6IGJsYWNrOyBiYWNrZ3JvdW5kOiByZWQ7JyxcbiAgICBsZXZlbDogMVxuICB9XVxufTtcbm1vZHVsZS5leHBvcnRzID0gY29uZjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** @classdesc Helper maintains a number of helpful functions in a single point  */\nvar conf = __webpack_require__(/*! ../_configuration/generalConf */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\"); // audio context initialisation\n\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\nvar audioContext = new window.AudioContext();\n\nvar Helper =\n/*#__PURE__*/\nfunction () {\n  function Helper(configuration) {\n    _classCallCheck(this, Helper);\n\n    var logLevel = conf.logLevel;\n\n    if (configuration) {\n      if (Object.prototype.hasOwnProperty.call(configuration, \"logLevel\")) {\n        logLevel = configuration.logLevel;\n      }\n    }\n\n    this.lanesMCIDattrsSeperator = '___';\n\n    for (var i = 0; i < conf.logTypes.length; i++) {\n      var logType = conf.logTypes[i];\n\n      if (logLevel >= logType.level) {\n        if (conf.testMode === true) {\n          this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - \".concat(logType.key, \": \"));\n        } else {\n          this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - %c%s\", logType.style);\n        }\n      } else this[logType.key] = function () {};\n    }\n\n    if (logLevel >= 3) {\n      this.log = window.console.log.bind(window.console, \"MotorCortex - \");\n    } else this.log = function () {};\n  }\n\n  _createClass(Helper, [{\n    key: \"getAudioContext\",\n    value: function getAudioContext() {\n      return audioContext;\n    }\n  }, {\n    key: \"renderTemplate\",\n    value: function renderTemplate(templateString, templateVars) {\n      return new Function(\"return `\" + templateString + \"`;\").call(templateVars);\n    }\n    /**\n     * @returns {string} in the form \"1bc45f78-ab23-jl59\"\n     */\n\n  }, {\n    key: \"getAnId\",\n    value: function getAnId() {\n      var underscore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var specialChar = '-';\n\n      if (underscore) {\n        specialChar = '_';\n      }\n\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n\n      return s4() + s4() + specialChar + s4() + specialChar + s4();\n    }\n  }, {\n    key: \"getLaneKey\",\n    value: function getLaneKey(mcid, attribute) {\n      return mcid + this.lanesMCIDattrsSeperator + attribute;\n    }\n  }, {\n    key: \"getLaneDataFromLaneKey\",\n    value: function getLaneDataFromLaneKey(laneKey) {\n      var ar = laneKey.split(this.lanesMCIDattrsSeperator);\n      return {\n        mcid: ar[0],\n        attribute: ar[1]\n      };\n    }\n  }, {\n    key: \"getMCIDandAttrOutOfLaneKey\",\n    value: function getMCIDandAttrOutOfLaneKey(laneKey) {\n      var laneArray = laneKey.split(this.lanesMCIDattrsSeperator);\n      return {\n        mcid: laneArray[0],\n        attribute: laneArray[1]\n      };\n    }\n  }, {\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(context, mcid) {\n      return context.rootElement.querySelectorAll('[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]')[0];\n    }\n    /**\n    subdivision might be rounding the number to its:\n    - units (subdivision = 1)\n    - tenths (subdivision = 10)\n    - hundreds (subdivision = 100)\n    - thousands (subdivision = 1000)\n     @param {string} int\n     @param {subdivision} int\n     @returns {int} the rounded number\n    */\n\n  }, {\n    key: \"roundNumberTo\",\n    value: function roundNumberTo(number, subdivision) {\n      return Math.round(number / subdivision) * subdivision;\n    }\n  }, {\n    key: \"isInteger\",\n    value: function isInteger(number) {\n      if (number === parseInt(number, 10)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isString\",\n    value: function isString(test) {\n      if (typeof test === 'string' || test instanceof String) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isObject\",\n    value: function isObject(test) {\n      return _typeof(test) === \"object\";\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray(test) {\n      return Array.isArray(test);\n    }\n  }, {\n    key: \"isFunction\",\n    value: function isFunction(functionToCheck) {\n      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n    }\n    /**\n     * systole / diastole of the projections\n     * @returns {array} - collection of objects with keys: {id, start, end, startDelta}\n     **/\n\n  }, {\n    key: \"systoleDiastoleProjections\",\n    value: function systoleDiastoleProjections(projections, durationFraction, anchorPoint) {\n      var alteredProjections = [];\n\n      for (var i = 0; i < projections.length; i++) {\n        var projectedIncident = projections[i];\n        var msInResizedPortion = projectedIncident.parentMillisecond - anchorPoint;\n\n        if (durationFraction != 1) {\n          alteredProjections.push({\n            id: projectedIncident.incident.id,\n            start: msInResizedPortion * durationFraction + anchorPoint,\n            end: msInResizedPortion * durationFraction + anchorPoint + projectedIncident.incident.duration * durationFraction,\n            startDelta: msInResizedPortion * durationFraction + anchorPoint - projectedIncident.millisecond\n          });\n        }\n      }\n\n      return alteredProjections;\n    }\n  }, {\n    key: \"jsUcfirst\",\n    value: function jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  }]);\n\n  return Helper;\n}();\n\nmodule.exports = Helper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Journey =\n/*#__PURE__*/\nfunction () {\n  function Journey(props) {\n    _classCallCheck(this, Journey);\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"incident\")) {\n      helper.error('Journey constructor expects an Incident on its properties on the key \"incident\"');\n      return false;\n    }\n\n    this.memory = props.calpuleMemory;\n    this.stations = [];\n    this.incident = props.incident;\n    this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;\n    this.startState = this.incident.runTimeInfo.state + \"\";\n    this.incident.stop();\n  }\n\n  _createClass(Journey, [{\n    key: \"station\",\n    value: function station(millisecond) {\n      var props = {};\n\n      if (this.stations.length > 0) {\n        props.previousStop = this.stations[this.stations.length - 1];\n      }\n\n      this.stations.push(millisecond); // helper.log(`CAPSULE passes as previousStop: ${props.previousStop}`);\n      // helper.log(this.stations);\n\n      this.incident.playableProgress(millisecond / this.incident.duration, millisecond);\n    }\n  }, {\n    key: \"destination\",\n    value: function destination() {\n      var millisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (millisecond != null) {\n        this.station(millisecond);\n      } else {\n        millisecond = this.stations[this.stations.length - 1];\n      }\n\n      this.incident.playableProgress(millisecond / this.incident.duration, millisecond); // if the clip was playing start it again\n\n      if (this.startState === 'playing' || this.startState === \"blocked\" && this.incident.statusBeforeBlock === \"playing\") {\n        this.incident.play();\n      } else {\n        if (millisecond >= this.incident.duration) {\n          this.incident.complete();\n        } else {\n          this.incident.arm();\n        }\n      }\n\n      this.memory.push(this.exportJourneyLog);\n    }\n  }, {\n    key: \"exportJourneyLog\",\n    value: function exportJourneyLog() {\n      return {\n        startMillisecond: this.startMillisecond,\n        startState: this.startState,\n        stations: this.stations\n      };\n    }\n  }]);\n\n  return Journey;\n}();\n\nvar TimeCapsule =\n/*#__PURE__*/\nfunction () {\n  function TimeCapsule() {\n    _classCallCheck(this, TimeCapsule);\n\n    this.memory = [];\n  }\n\n  _createClass(TimeCapsule, [{\n    key: \"startJourney\",\n    value: function startJourney(incident) {\n      if (!incident) {\n        helper.error('startJourney expects an Incident as an argument');\n        return false;\n      }\n\n      return new Journey({\n        incident: incident,\n        calpuleMemory: this.memory\n      });\n    }\n  }]);\n\n  return TimeCapsule;\n}();\n\nmodule.exports = TimeCapsule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb3JlVXRpbHMvVGltZUNhcHN1bGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb3JlVXRpbHMvVGltZUNhcHN1bGUuanM/YmIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIEpvdXJuZXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKb3VybmV5KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpvdXJuZXkpO1xuXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwiaW5jaWRlbnRcIikpIHtcbiAgICAgIGhlbHBlci5lcnJvcignSm91cm5leSBjb25zdHJ1Y3RvciBleHBlY3RzIGFuIEluY2lkZW50IG9uIGl0cyBwcm9wZXJ0aWVzIG9uIHRoZSBrZXkgXCJpbmNpZGVudFwiJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5tZW1vcnkgPSBwcm9wcy5jYWxwdWxlTWVtb3J5O1xuICAgIHRoaXMuc3RhdGlvbnMgPSBbXTtcbiAgICB0aGlzLmluY2lkZW50ID0gcHJvcHMuaW5jaWRlbnQ7XG4gICAgdGhpcy5zdGFydE1pbGxpc2Vjb25kID0gdGhpcy5pbmNpZGVudC5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQgKiAxO1xuICAgIHRoaXMuc3RhcnRTdGF0ZSA9IHRoaXMuaW5jaWRlbnQucnVuVGltZUluZm8uc3RhdGUgKyBcIlwiO1xuICAgIHRoaXMuaW5jaWRlbnQuc3RvcCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEpvdXJuZXksIFt7XG4gICAga2V5OiBcInN0YXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhdGlvbihtaWxsaXNlY29uZCkge1xuICAgICAgdmFyIHByb3BzID0ge307XG5cbiAgICAgIGlmICh0aGlzLnN0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcHJvcHMucHJldmlvdXNTdG9wID0gdGhpcy5zdGF0aW9uc1t0aGlzLnN0YXRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRpb25zLnB1c2gobWlsbGlzZWNvbmQpOyAvLyBoZWxwZXIubG9nKGBDQVBTVUxFIHBhc3NlcyBhcyBwcmV2aW91c1N0b3A6ICR7cHJvcHMucHJldmlvdXNTdG9wfWApO1xuICAgICAgLy8gaGVscGVyLmxvZyh0aGlzLnN0YXRpb25zKTtcblxuICAgICAgdGhpcy5pbmNpZGVudC5wbGF5YWJsZVByb2dyZXNzKG1pbGxpc2Vjb25kIC8gdGhpcy5pbmNpZGVudC5kdXJhdGlvbiwgbWlsbGlzZWNvbmQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXN0aW5hdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0aW5hdGlvbigpIHtcbiAgICAgIHZhciBtaWxsaXNlY29uZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgICAgaWYgKG1pbGxpc2Vjb25kICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGF0aW9uKG1pbGxpc2Vjb25kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pbGxpc2Vjb25kID0gdGhpcy5zdGF0aW9uc1t0aGlzLnN0YXRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluY2lkZW50LnBsYXlhYmxlUHJvZ3Jlc3MobWlsbGlzZWNvbmQgLyB0aGlzLmluY2lkZW50LmR1cmF0aW9uLCBtaWxsaXNlY29uZCk7IC8vIGlmIHRoZSBjbGlwIHdhcyBwbGF5aW5nIHN0YXJ0IGl0IGFnYWluXG5cbiAgICAgIGlmICh0aGlzLnN0YXJ0U3RhdGUgPT09ICdwbGF5aW5nJyB8fCB0aGlzLnN0YXJ0U3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIHRoaXMuaW5jaWRlbnQuc3RhdHVzQmVmb3JlQmxvY2sgPT09IFwicGxheWluZ1wiKSB7XG4gICAgICAgIHRoaXMuaW5jaWRlbnQucGxheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kID49IHRoaXMuaW5jaWRlbnQuZHVyYXRpb24pIHtcbiAgICAgICAgICB0aGlzLmluY2lkZW50LmNvbXBsZXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbmNpZGVudC5hcm0oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm1lbW9yeS5wdXNoKHRoaXMuZXhwb3J0Sm91cm5leUxvZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4cG9ydEpvdXJuZXlMb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0Sm91cm5leUxvZygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0TWlsbGlzZWNvbmQ6IHRoaXMuc3RhcnRNaWxsaXNlY29uZCxcbiAgICAgICAgc3RhcnRTdGF0ZTogdGhpcy5zdGFydFN0YXRlLFxuICAgICAgICBzdGF0aW9uczogdGhpcy5zdGF0aW9uc1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSm91cm5leTtcbn0oKTtcblxudmFyIFRpbWVDYXBzdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGltZUNhcHN1bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVDYXBzdWxlKTtcblxuICAgIHRoaXMubWVtb3J5ID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGltZUNhcHN1bGUsIFt7XG4gICAga2V5OiBcInN0YXJ0Sm91cm5leVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydEpvdXJuZXkoaW5jaWRlbnQpIHtcbiAgICAgIGlmICghaW5jaWRlbnQpIHtcbiAgICAgICAgaGVscGVyLmVycm9yKCdzdGFydEpvdXJuZXkgZXhwZWN0cyBhbiBJbmNpZGVudCBhcyBhbiBhcmd1bWVudCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSm91cm5leSh7XG4gICAgICAgIGluY2lkZW50OiBpbmNpZGVudCxcbiAgICAgICAgY2FscHVsZU1lbW9yeTogdGhpcy5tZW1vcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaW1lQ2Fwc3VsZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUaW1lQ2Fwc3VsZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getIncidentsByChannel(pld) {\n  pld.descriptor.value = function () {\n    var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var incidentsByPlugin = {};\n    incidentsByPlugin[this.mc_plugin_npm_name] = [{\n      millisecond: adjustMillisecond,\n      parentMillisecond: parentMillisecond,\n      incident: this,\n      id: this.id\n    }];\n    return incidentsByPlugin;\n  };\n}\n\nmodule.exports = getIncidentsByChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19kZWNvcmF0b3JzL2dldEluY2lkZW50c0J5Q2hhbm5lbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX2RlY29yYXRvcnMvZ2V0SW5jaWRlbnRzQnlDaGFubmVsLmpzPzkwZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldEluY2lkZW50c0J5Q2hhbm5lbChwbGQpIHtcbiAgcGxkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFkanVzdE1pbGxpc2Vjb25kID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgIHZhciBwYXJlbnRNaWxsaXNlY29uZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICB2YXIgaW5jaWRlbnRzQnlQbHVnaW4gPSB7fTtcbiAgICBpbmNpZGVudHNCeVBsdWdpblt0aGlzLm1jX3BsdWdpbl9ucG1fbmFtZV0gPSBbe1xuICAgICAgbWlsbGlzZWNvbmQ6IGFkanVzdE1pbGxpc2Vjb25kLFxuICAgICAgcGFyZW50TWlsbGlzZWNvbmQ6IHBhcmVudE1pbGxpc2Vjb25kLFxuICAgICAgaW5jaWRlbnQ6IHRoaXMsXG4gICAgICBpZDogdGhpcy5pZFxuICAgIH1dO1xuICAgIHJldHVybiBpbmNpZGVudHNCeVBsdWdpbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJbmNpZGVudHNCeUNoYW5uZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/main.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Validator = __webpack_require__(/*! fastest-validator */ \"./node_modules/fastest-validator/dist/index.min.js\");\n\nvar DescriptiveIncident = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js\");\n\nvar DescriptiveGroup = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveGroup */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\");\n\nvar DescriptiveClip = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveClip */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\");\n\nvar DescriptiveAudioClip = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveAudioClip */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js\");\n\nvar MonoIncident = __webpack_require__(/*! ./BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar MediaPlayback = __webpack_require__(/*! ./BaseClasses/MediaPlayIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\");\n\nvar AudioPlaybackChannel = __webpack_require__(/*! ./Channels/Media/AudioPlaybackChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./Clip/ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar DOMClip = __webpack_require__(/*! ./Clip/DOMClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\");\n\nvar AttributeChannel = __webpack_require__(/*! ./Channels/Attribute/AttributeChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\");\n\nvar TimeCapsule = __webpack_require__(/*! ./_coreUtils/TimeCapsule */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\");\n\nvar Helper = __webpack_require__(/*! ./_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper({\n  logLevel: 0\n});\n\nvar checkPlugin = function checkPlugin(main) {\n  if (Object.prototype.hasOwnProperty.call(main, \"default\")) {\n    main = main[\"default\"];\n  }\n\n  var plugin_name = main.npm_name;\n  var check = true;\n\n  if (!Object.prototype.hasOwnProperty.call(main, \"name\")) {\n    helper.error(\"Warning on plugin \".concat(plugin_name, \". A plugin is always good to have its name on\\n        its main.js file, under the key \\\"name\\\". It's missing from this plugin\"));\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(main, \"incidents\") && !Object.prototype.hasOwnProperty.call(main, \"Clip\")) {\n    helper.error(\"Error on plugin \".concat(plugin_name, \". A plugin must expose at least one Incident or a Clip.\\n        Exposed plugin Incidents should be defined on the \\\"incidents\\\" key of the main.js file while Clips on the \\\"Clip\\\".\"));\n    check = false;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(main, \"incidents\") && !helper.isArray(main.incidents)) {\n    helper.error(\"Error on plugin \".concat(plugin_name, \". thePlugin exposed Incidents are defined on the \\\"incidents\\\" key of the main.js file in array format.\\n        Please refer to the documentation\"));\n    check = false;\n  } else if (Object.prototype.hasOwnProperty.call(main, \"incidents\")) {\n    for (var i = 0; i < main.incidents.length; i++) {\n      var exposedIncidentDefinition = main.incidents[i];\n\n      if (_typeof(exposedIncidentDefinition.exportable) === \"object\") {\n        if (Object.prototype.hasOwnProperty.call(exposedIncidentDefinition.exportable, \"default\")) {\n          exposedIncidentDefinition.exportable = exposedIncidentDefinition.exportable[\"default\"];\n        }\n      }\n\n      if (!(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveGroup) && !(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveClip) && !(exposedIncidentDefinition.exportable.prototype instanceof MonoIncident) && !(exposedIncidentDefinition.exportable.prototype instanceof MediaPlayback)) {\n        helper.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must extend one of the base classes provided by MotorCortex.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"));\n        check = false;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, \"name\")) {\n        helper.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must have the \\\"name\\\" key which defines the name of the exported Incident.\\n                Please refer to documentation\"));\n        check = false;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, \"propTypes\")) {\n        helper.log(\"Warning on plugin \".concat(plugin_name, \".\\n                It's always good for plugins to define the supported propTypes of their exposed Incidents' supported properties.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"), 'warning');\n      }\n    }\n  }\n\n  return check;\n}; // plugin_name is the unique name of the plugin\n\n\nfunction loadPlugin(plugin) {\n  if (Object.prototype.hasOwnProperty.call(plugin, \"default\")) {\n    plugin = plugin[\"default\"];\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(plugin, \"npm_name\")) {\n    plugin.npm_name = \"plugin_\".concat(new Date().getTime());\n  }\n\n  if (!checkPlugin(plugin)) {\n    return false;\n  } else {\n    // thePlugin is the plugin object which will hold on its keys\n    // the names of the exposed Incidents of its. The keys of this object\n    // are going to be identical with the names of the classes exposed\n    var thePlugin = {};\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"Clip\")) {\n      var _class, _temp;\n\n      var DynamicDescriptiveClip = (_temp = _class =\n      /*#__PURE__*/\n      function (_DescriptiveClip) {\n        _inherits(DynamicDescriptiveClip, _DescriptiveClip);\n\n        function DynamicDescriptiveClip() {\n          _classCallCheck(this, DynamicDescriptiveClip);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveClip).apply(this, arguments));\n        }\n\n        return DynamicDescriptiveClip;\n      }(DescriptiveClip), _defineProperty(_class, \"Incident\", plugin.Clip), _defineProperty(_class, \"audio\", plugin.audio ? plugin.audio : \"off\"), _defineProperty(_class, \"customClip\", true), _temp);\n      thePlugin.Clip = DynamicDescriptiveClip;\n    } // if the plugin definition has compositeAttributes then we dynamically\n    // create a new Channel class extending AttributeChannel setting the\n    // composite Attributes on the fly. We can then use this Channel class\n    // for all Incidents exposed by the plugin\n\n\n    var AttributeChannelToUse = AttributeChannel;\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"compositeAttributes\")) {\n      AttributeChannelToUse =\n      /*#__PURE__*/\n      function (_AttributeChannel) {\n        _inherits(AttributeChannelToUse, _AttributeChannel);\n\n        function AttributeChannelToUse(props) {\n          _classCallCheck(this, AttributeChannelToUse);\n\n          props.comboAttributes = plugin.compositeAttributes;\n          return _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannelToUse).call(this, props));\n        }\n\n        return AttributeChannelToUse;\n      }(AttributeChannel);\n    } // for each of the exposed Incidents\n\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"incidents\")) {\n      var _loop = function _loop(i) {\n        var incidentClass = plugin.incidents[i].exportable;\n        var DynamicDescriptiveIncident = void 0; // the exportable Incident can be either a Clip, a Compo or an Incident\n        // if it is an Incident\n\n        if (incidentClass.prototype instanceof MonoIncident) {\n          var _class2, _temp2;\n\n          DynamicDescriptiveIncident = (_temp2 = _class2 =\n          /*#__PURE__*/\n          function (_DescriptiveIncident) {\n            _inherits(DynamicDescriptiveIncident, _DescriptiveIncident);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(DescriptiveIncident), _defineProperty(_class2, \"Incident\", incidentClass), _defineProperty(_class2, \"plugin_npm_name\", plugin.npm_name), _defineProperty(_class2, \"plugin\", plugin.name), _defineProperty(_class2, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class2, \"Channel\", AttributeChannelToUse), _defineProperty(_class2, \"audio\", plugin.audio ? plugin.audio : \"off\"), _temp2);\n        } // if it is an Incident\n        else if (incidentClass.prototype instanceof MediaPlayback) {\n            var _class3, _temp3;\n\n            DynamicDescriptiveIncident = (_temp3 = _class3 =\n            /*#__PURE__*/\n            function (_DescriptiveIncident2) {\n              _inherits(DynamicDescriptiveIncident, _DescriptiveIncident2);\n\n              function DynamicDescriptiveIncident() {\n                _classCallCheck(this, DynamicDescriptiveIncident);\n\n                return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n              }\n\n              return DynamicDescriptiveIncident;\n            }(DescriptiveIncident), _defineProperty(_class3, \"Incident\", incidentClass), _defineProperty(_class3, \"plugin_npm_name\", '@kissmybutton/media-playback'), _defineProperty(_class3, \"plugin\", plugin.name), _defineProperty(_class3, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class3, \"Channel\", AudioPlaybackChannel), _defineProperty(_class3, \"audio\", plugin.audio ? plugin.audio : \"off\"), _temp3);\n          } // else if it is a Clip\n          else if (incidentClass.prototype instanceof DescriptiveClip) {\n              var _class4, _temp4;\n\n              DynamicDescriptiveIncident = (_temp4 = _class4 =\n              /*#__PURE__*/\n              function (_incidentClass) {\n                _inherits(DynamicDescriptiveIncident, _incidentClass);\n\n                function DynamicDescriptiveIncident() {\n                  _classCallCheck(this, DynamicDescriptiveIncident);\n\n                  return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n                }\n\n                return DynamicDescriptiveIncident;\n              }(incidentClass), _defineProperty(_class4, \"plugin\", plugin.name), _defineProperty(_class4, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class4, \"audio\", plugin.audio ? plugin.audio : \"on\"), _temp4);\n            } else if (incidentClass.prototype instanceof DescriptiveGroup) {\n              var _class5, _temp5;\n\n              DynamicDescriptiveIncident = (_temp5 = _class5 =\n              /*#__PURE__*/\n              function (_incidentClass2) {\n                _inherits(DynamicDescriptiveIncident, _incidentClass2);\n\n                function DynamicDescriptiveIncident() {\n                  _classCallCheck(this, DynamicDescriptiveIncident);\n\n                  return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n                }\n\n                return DynamicDescriptiveIncident;\n              }(incidentClass), _defineProperty(_class5, \"plugin\", plugin.name), _defineProperty(_class5, \"ClassName\", plugin.incidents[i].name), _temp5);\n            }\n\n        Object.defineProperty(thePlugin, plugin.incidents[i].name, {\n          get: function get() {\n            // the getter will construct a wrapper class which on the constructor will instantiate an object of the\n            // exposed class, set to it the plugin name and channel class parameters and return\n            // it from the constructor\n            var WrapperClass = function WrapperClass(attrs, props) {\n              _classCallCheck(this, WrapperClass);\n\n              var instantiatedIncident = new DynamicDescriptiveIncident(attrs, props);\n\n              if (Object.prototype.hasOwnProperty.call(plugin.incidents[i], \"attributesValidationRules\")) {\n                var v = new Validator();\n                var validationResult = v.validate(attrs, plugin.incidents[i].attributesValidationRules);\n\n                if (validationResult.length > 0) {\n                  return {\n                    result: false,\n                    errors: validationResult\n                  };\n                }\n              } else {\n                helper.warning(\"It's always good to provide attributesValidationRules to the exported incidents. \".concat(plugin.npm_name, \".\").concat(instantiatedIncident.constructor.name, \" doesn't provide it\"));\n              }\n\n              return instantiatedIncident;\n            };\n\n            return WrapperClass;\n          }\n        });\n      };\n\n      for (var i = 0; i < plugin.incidents.length; i++) {\n        _loop(i);\n      }\n    }\n\n    return thePlugin;\n  }\n}\n\nvar audioPluginMain = __webpack_require__(/*! ./Audio/main */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js\");\n\nvar AudioPlugin = loadPlugin(audioPluginMain);\nmodule.exports = {\n  API: {\n    MonoIncident: MonoIncident,\n    Group: DescriptiveGroup,\n    Clip: DescriptiveClip,\n    AudioClip: DescriptiveAudioClip,\n    MediaPlayback: MediaPlayback,\n    ExtendableClip: ExtendableClip,\n    DOMClip: DOMClip\n  },\n  Group: DescriptiveGroup,\n  Clip: DescriptiveClip,\n  loadPlugin: loadPlugin,\n  AudioClip: AudioPlugin.Clip,\n  AudioPlayback: AudioPlugin.AudioPlayback,\n  AudioEffect: AudioPlugin.AudioEffect,\n  TimeCapsule: TimeCapsule\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/main.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = filter;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = findIndex;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = sortBy;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9sb2Rhc2gtY3VzdG9tLWJ1aWxkL21vZHVsYXJpemUvbG9kYXNoLnNvcnRieS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2xvZGFzaC1jdXN0b20tYnVpbGQvbW9kdWxhcml6ZS9sb2Rhc2guc29ydGJ5L2luZGV4LmpzP2FjM2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGluY2x1ZGU9XCJmaWx0ZXIsc29ydEJ5LGZpbmRJbmRleCxmaW5kLGZvckVhY2gsY2xvbmVEZWVwXCIgZXhwb3J0cz1cIm5wbVwiYFxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAqIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBTeW1ib2wgPSByb290LlN5bWJvbCxcbiAgICBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5LFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMubGVuZ3RoID8gaXRlcmF0ZWVzIDogW2lkZW50aXR5XSwgYmFzZVVuYXJ5KGJhc2VJdGVyYXRlZSkpO1xuXG4gIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICB9KTtcblxuICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8qKlxuICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAqXG4gKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgfVxuICB9XG4gIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gIC8vXG4gIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAqIF07XG4gKlxuICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICpcbiAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgNDBdLCBbJ2ZyZWQnLCA0OF1dXG4gKi9cbnZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgaXRlcmF0ZWVzID0gW107XG4gIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICB9XG4gIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRCeTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\n");

/***/ }),

/***/ "./node_modules/fastest-validator/dist/index.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/fastest-validator/dist/index.min.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {function t(){function e(e){return\"number\"!=typeof e&&\"string\"!=typeof e?this.makeError(\"string\"):(\"string\"!=typeof e&&(e=String(e)),e=e.replace(/\\D+/g,\"\"),function(e){return function(t){for(var r=t?t.length:0,n=1,i=0;r--;)i+=(n^=1)?e[t[r]]:parseInt(t[r],10);return 0==i%10&&0<i}}([0,2,4,6,8,1,3,5,7,9])(e)||this.makeError(\"luhn\"))}function t(e){return\"string\"!=typeof e?this.makeError(\"string\"):(e=e.toLowerCase(),!!w.test(e)||this.makeError(\"mac\"))}function r(e,t){if(\"string\"!=typeof e)return this.makeError(\"string\");if(e=e.toLowerCase(),!M.test(e))return this.makeError(\"uuid\");var r=0|e.charAt(14);if(t.version&&t.version!==r)return this.makeError(\"uuidVersion\",t.version,r);switch(r){case 1:case 2:return!0;case 3:case 4:case 5:return-1!==[\"8\",\"9\",\"a\",\"b\"].indexOf(e.charAt(19))||this.makeError(\"uuid\")}}function n(e){return\"string\"!=typeof e?this.makeError(\"string\"):!!j.test(e)||this.makeError(\"url\")}function i(e,t){if(\"string\"!=typeof e)return this.makeError(\"string\");var r=e.length;return!1===t.empty&&0===r?this.makeError(\"stringEmpty\"):null!=t.min&&r<t.min?this.makeError(\"stringMin\",t.min,r):null!=t.max&&r>t.max?this.makeError(\"stringMax\",t.max,r):null!=t.length&&r!==t.length?this.makeError(\"stringLength\",t.length,r):null==t.pattern||(r=\"string\"==typeof t.pattern?new RegExp(t.pattern,t.patternFlags):t.pattern).test(e)?null!=t.contains&&-1===e.indexOf(t.contains)?this.makeError(\"stringContains\",t.contains,e):null!=t.enum&&-1===t.enum.indexOf(e)?this.makeError(\"stringEnum\",t.enum,e):!0!==t.numeric||O.test(e)?!0!==t.alpha||_.test(e)?!0!==t.alphanum||A.test(e)?!(!0===t.alphadash&&!T.test(e))||this.makeError(\"stringAlphadash\",\"An alphadash string\",e):this.makeError(\"stringAlphanum\",\"An alphanumeric string\",e):this.makeError(\"stringAlpha\",\"An alphabetic string\",e):this.makeError(\"stringNumeric\",\"A numeric string\",e):this.makeError(\"stringPattern\",r,e)}function a(e,t){if(\"object\"!=typeof e||null===e||Array.isArray(e))return this.makeError(\"object\");if(!0===t.strict&&t.props){t=Object.keys(t.props);var r=[];e=Object.keys(e);for(var n=0;n<e.length;n++)-1===t.indexOf(e[n])&&r.push(e[n]);if(0!==r.length)return this.makeError(\"objectStrict\",void 0,r.join(\", \"))}return!0}function o(e,t){return!0===t.convert&&\"number\"!=typeof e&&(e=Number(e)),\"number\"!=typeof e||isNaN(e)||!isFinite(e)?this.makeError(\"number\"):null!=t.min&&e<t.min?this.makeError(\"numberMin\",t.min,e):null!=t.max&&e>t.max?this.makeError(\"numberMax\",t.max,e):null!=t.equal&&e!==t.equal?this.makeError(\"numberEqual\",t.equal,e):null!=t.notEqual&&e===t.notEqual?this.makeError(\"numberNotEqual\",t.notEqual):!0===t.integer&&0!=e%1?this.makeError(\"numberInteger\",e):!0===t.positive&&0>=e?this.makeError(\"numberPositive\",e):!(!0===t.negative&&0<=e)||this.makeError(\"numberNegative\",e)}function s(e){return\"function\"==typeof e||this.makeError(\"function\")}function u(e){return null===e||void 0===e||this.makeError(\"forbidden\")}function l(e,t){return null==t.values||-1!==t.values.indexOf(e)||this.makeError(\"enumValue\",t.values,e)}function f(e,t){return\"string\"!=typeof e?this.makeError(\"string\"):!!(\"precise\"==t.mode?S:x).test(e)||this.makeError(\"email\")}function c(e,t){return!0!==t.convert||e instanceof Date||(e=new Date(e)),e instanceof Date&&!isNaN(e.getTime())||this.makeError(\"date\")}function h(e,t){return t.check.call(this,e,t)}function p(e,t){return!0===t.convert&&\"boolean\"!=typeof e&&(1===e||0===e||\"true\"===e||\"false\"===e||\"1\"===e||\"0\"===e||\"on\"===e||\"off\"===e)||(\"boolean\"==typeof e||this.makeError(\"boolean\"))}function m(e,t){if(!Array.isArray(e))return this.makeError(\"array\");var r=e.length;if(!1===t.empty&&0===r)return this.makeError(\"arrayEmpty\");if(null!=t.min&&r<t.min)return this.makeError(\"arrayMin\",t.min,r);if(null!=t.max&&r>t.max)return this.makeError(\"arrayMax\",t.max,r);if(null!=t.length&&r!==t.length)return this.makeError(\"arrayLength\",t.length,r);if(null!=t.contains&&-1===e.indexOf(t.contains))return this.makeError(\"arrayContains\",t.contains);if(null!=t.enum)for(r=0;r<e.length;r++)if(-1===t.enum.indexOf(e[r]))return this.makeError(\"arrayEnum\",e[r],t.enum);return!0}function d(){return!0}function y(e,t){t=t||[];for(var r=0;r<e.length;++r)Array.isArray(e[r])?y(e[r],t):t.push(e[r]);return t}function g(e,t){for(var r in t)\"object\"==typeof t[r]&&null!==t[r]?(e[r]=e[r]||{},g(e[r],t[r])):e[r]=t[r];return e}function b(e){return e.replace(R,function(e){switch(e){case'\"':case\"'\":case\"\\\\\":return\"\\\\\"+e;case\"\\n\":return\"\\\\n\";case\"\\r\":return\"\\\\r\";case\"\\u2028\":return\"\\\\u2028\";case\"\\u2029\":return\"\\\\u2029\"}})}function v(y){this.opts={messages:E({},k)},y&&E(this.opts,y),this.messages=this.opts.messages,this.messageKeys=Object.keys(this.messages),this.rules={any:d,array:m,boolean:p,custom:h,date:c,email:f,enum:l,forbidden:u,function:s,number:o,object:a,string:i,url:n,uuid:r,mac:t,luhn:e},this.cache=new Map}var E=g,k={required:\"The '{field}' field is required!\",string:\"The '{field}' field must be a string!\",stringEmpty:\"The '{field}' field must not be empty!\",stringMin:\"The '{field}' field length must be greater than or equal to {expected} characters long!\",stringMax:\"The '{field}' field length must be less than or equal to {expected} characters long!\",stringLength:\"The '{field}' field length must be {expected} characters long!\",stringPattern:\"The '{field}' field fails to match the required pattern!\",stringContains:\"The '{field}' field must contain the '{expected}' text!\",stringEnum:\"The '{field}' field does not match any of the allowed values!\",stringNumeric:\"The '{field}' field must be a numeric string\",stringAlpha:\"The '{field}' field must be an alphabetic string\",stringAlphanum:\"The '{field}' field must be an alphanumeric string\",stringAlphadash:\"The '{field}' field must be an alphadash string\",number:\"The '{field}' field must be a number!\",numberMin:\"The '{field}' field must be greater than or equal to {expected}!\",numberMax:\"The '{field}' field must be less than or equal to {expected}!\",numberEqual:\"The '{field}' field must be equal with {expected}!\",numberNotEqual:\"The '{field}' field can't be equal with {expected}!\",numberInteger:\"The '{field}' field must be an integer!\",numberPositive:\"The '{field}' field must be a positive number!\",numberNegative:\"The '{field}' field must be a negative number!\",array:\"The '{field}' field must be an array!\",arrayEmpty:\"The '{field}' field must not be an empty array!\",arrayMin:\"The '{field}' field must contain at least {expected} items!\",arrayMax:\"The '{field}' field must contain less than or equal to {expected} items!\",arrayLength:\"The '{field}' field must contain {expected} items!\",arrayContains:\"The '{field}' field must contain the '{expected}' item!\",arrayEnum:\"The '{field} field value '{expected}' does not match any of the allowed values!\",boolean:\"The '{field}' field must be a boolean!\",function:\"The '{field}' field must be a function!\",date:\"The '{field}' field must be a Date!\",dateMin:\"The '{field}' field must be greater than or equal to {expected}!\",dateMax:\"The '{field}' field must be less than or equal to {expected}!\",forbidden:\"The '{field}' field is forbidden!\",email:\"The '{field}' field must be a valid e-mail!\",url:\"The '{field}' field must be a valid URL!\",enumValue:\"The '{field} field value '{expected}' does not match any of the allowed values!\",object:\"The '{field}' must be an Object!\",objectStrict:\"The object '{field}' contains invalid keys: '{actual}'!\",uuid:\"The {field} field must be a valid UUID\",uuidVersion:\"The {field} field must be a valid version provided\",mac:\"The {field} field must be a valid MAC address\",luhn:\"The {field} field must be a valid checksum luhn\"},S=/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,x=/^\\S+@\\S+\\.\\S+$/,O=/^-?[0-9]\\d*(\\.\\d+)?$/,_=/^[a-zA-Z]+$/,A=/^[a-zA-Z0-9]+$/,T=/^[a-zA-Z0-9_-]+$/,j=/^https?:\\/\\/\\S+/,M=/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i,w=/^((([a-f0-9][a-f0-9]+[-]){5}|([a-f0-9][a-f0-9]+[:]){5})([a-f0-9][a-f0-9])$)|(^([a-f0-9][a-f0-9][a-f0-9][a-f0-9]+[.]){2}([a-f0-9][a-f0-9][a-f0-9][a-f0-9]))$/i,P=/^[_$a-zA-Z][_$a-zA-Z0-9]*$/,R=/[\"'\\\\\\n\\r\\u2028\\u2029]/g;return v.prototype.validate=function(e,t){return this.compile(t)(e)},v.prototype.compile=function(e){var t=this;if(Array.isArray(e)){if(0==e.length)throw Error(\"If the schema is an Array, must contain at least one element!\");var r=this.compileSchemaType(e);return this.cache.clear(),function(e,n,i){return t.checkSchemaType(e,r,n,i||null)}}var n=this.compileSchemaObject(e);return this.cache.clear(),function(e,r,i){return t.checkSchemaObject(e,n,r,i||null)}},v.prototype.compileSchemaObject=function(e){var t=this;if(null===e||\"object\"!=typeof e||Array.isArray(e))throw Error(\"Invalid schema!\");var r=this.cache.get(e);if(r)return r.cycle=!0,r;r={cycle:!1,properties:null,compiledObjectFunction:null,objectStack:[]},this.cache.set(e,r),r.properties=Object.keys(e).filter(function(e){return\"$$strict\"!==e}).map(function(r){return{name:r,compiledType:t.compileSchemaType(e[r])}});var n=[];n.push(\"let res;\"),n.push(\"let propertyPath;\"),n.push(\"const errors = [];\"),!0===e.$$strict&&n.push(\"const givenProps = new Map(Object.keys(value).map(key => [key, true]));\");for(var i=0;i<r.properties.length;i++){var a=r.properties[i],o=b(a.name),s=P.test(o)?\"value.\"+o:'value[\"'+o+'\"]';n.push('propertyPath = (path !== undefined ? path + \".'+o+'\" : \"'+o+'\");'),Array.isArray(a.compiledType)?n.push(\"res = this.checkSchemaType(\"+s+\", properties[\"+i+\"].compiledType, propertyPath, value);\"):n.push(\"res = this.checkSchemaRule(\"+s+\", properties[\"+i+\"].compiledType, propertyPath, value);\"),n.push(\"if (res !== true) {\"),n.push(\"\\tthis.handleResult(errors, propertyPath, res, properties[\"+i+\"].compiledType.messages);\"),n.push(\"}\"),!0===e.$$strict&&n.push('givenProps.delete(\"'+o+'\");')}return!0===e.$$strict&&(n.push(\"if (givenProps.size !== 0) {\"),n.push(\"\\tthis.handleResult(errors, path || 'rootObject', this.makeError('objectStrict', undefined, [...givenProps.keys()].join(', ')), this.messages);\"),n.push(\"}\")),n.push(\"return errors.length === 0 ? true : errors;\"),r.compiledObjectFunction=new Function(\"value\",\"properties\",\"path\",\"parent\",n.join(\"\\n\")),r},v.prototype.compileSchemaType=function(e){var t=this;return Array.isArray(e)?(e=y(e.map(function(e){return t.compileSchemaType(e)})),1==e.length?e[0]:e):this.compileSchemaRule(e)},v.prototype.compileMessages=function(e){return e.messages?Object.assign({},this.messages,e.messages):this.messages},v.prototype.compileSchemaRule=function(e){\"string\"==typeof e&&(e={type:e});var t=this.rules[e.type];if(!t)throw Error(\"Invalid '\"+e.type+\"' type in validator schema!\");var r=this.compileMessages(e),n=null,i=null;return\"object\"===e.type&&e.props?(n=this.compileSchemaObject(e.props),i=this.checkSchemaObject):\"array\"===e.type&&e.items&&(n=this.compileSchemaType(e.items),i=this.checkSchemaArray),{messages:r,schemaRule:e,ruleFunction:t,dataFunction:i,dataParameter:n}},v.prototype.checkSchemaObject=function(e,t,r,n){return t.cycle?-1!==t.objectStack.indexOf(e)||(t.objectStack.push(e),e=this.checkSchemaObjectInner(e,t,r,n),t.objectStack.pop(),e):this.checkSchemaObjectInner(e,t,r,n)},v.prototype.checkSchemaObjectInner=function(e,t,r,n){return t.compiledObjectFunction.call(this,e,t.properties,r,n)},v.prototype.checkSchemaType=function(e,t,r,n){if(Array.isArray(t)){for(var i=[],a=t.length,o=0;o<a;o++){var s=this.checkSchemaRule(e,t[o],r,n);if(!0===s)return!0;this.handleResult(i,r,s,t.messages)}return i}return this.checkSchemaRule(e,t,r,n)},v.prototype.checkSchemaArray=function(e,t,r,n){for(var i=[],a=e.length,o=0;o<a;o++){var s=(void 0!==r?r:\"\")+\"[\"+o+\"]\",u=this.checkSchemaType(e[o],t,s,e,n);!0!==u&&this.handleResult(i,s,u,t.messages)}return 0===i.length||i},v.prototype.checkSchemaRule=function(e,t,r,n){var i=t.schemaRule;return void 0===e||null===e?\"forbidden\"===i.type||!0===i.optional||(e=[],this.handleResult(e,r,this.makeError(\"required\"),t.messages),e):(i=t.ruleFunction.call(this,e,i,r,n),!0!==i?(e=[],this.handleResult(e,r,i,t.messages),e):null===t.dataFunction||t.dataFunction.call(this,e,t.dataParameter,r,n))},v.prototype.handleResult=function(e,t,r,n){var i=this;(Array.isArray(r)?r:[r]).forEach(function(r){r.field||(r.field=t),r.message||(r.message=i.resolveMessage(r,n[r.type])),e.push(r)})},v.prototype.makeError=function(e,t,r){return{type:e,expected:t,actual:r}},v.prototype.resolveMessage=function(e,t){if(void 0===t&&(t=null),null!=t){var r=null!=e.expected?e.expected:\"\",n=null!=e.actual?e.actual:\"\";return t.replace(/\\{field\\}/g,e.field).replace(/\\{expected\\}/g,r).replace(/\\{actual\\}/g,n)}},v.prototype.add=function(e,t){this.rules[e]=t},v}var f=f||{};f.scope={},f.ASSUME_ES5=!1,f.ASSUME_NO_NATIVE_MAP=!1,f.ASSUME_NO_NATIVE_SET=!1,f.defineProperty=f.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(e,t,r){e!=Array.prototype&&e!=Object.prototype&&(e[t]=r.value)},f.getGlobal=function(e){return\"undefined\"!=typeof window&&window===e?e:\"undefined\"!=typeof global&&null!=global?global:e},f.global=f.getGlobal(this),f.SYMBOL_PREFIX=\"jscomp_symbol_\",f.initSymbol=function(){f.initSymbol=function(){},f.global.Symbol||(f.global.Symbol=f.Symbol)},f.Symbol=function(){var e=0;return function(t){return f.SYMBOL_PREFIX+(t||\"\")+e++}}(),f.initSymbolIterator=function(){f.initSymbol();var e=f.global.Symbol.iterator;e||(e=f.global.Symbol.iterator=f.global.Symbol(\"iterator\")),\"function\"!=typeof Array.prototype[e]&&f.defineProperty(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return f.arrayIterator(this)}}),f.initSymbolIterator=function(){}},f.arrayIterator=function(e){var t=0;return f.iteratorPrototype(function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}})},f.iteratorPrototype=function(e){return f.initSymbolIterator(),e={next:e},e[f.global.Symbol.iterator]=function(){return this},e},f.iteratorFromArray=function(e,t){f.initSymbolIterator(),e instanceof String&&(e+=\"\");var r=0,n={next:function(){if(r<e.length){var i=r++;return{value:t(i,e[i]),done:!1}}return n.next=function(){return{done:!0,value:void 0}},n.next()}};return n[Symbol.iterator]=function(){return n},n},f.polyfill=function(e,t){if(t){var r=f.global;e=e.split(\".\");for(var n=0;n<e.length-1;n++){var i=e[n];i in r||(r[i]={}),r=r[i]}(t=t(n=r[e=e[e.length-1]]))!=n&&null!=t&&f.defineProperty(r,e,{configurable:!0,writable:!0,value:t})}},f.polyfill(\"Array.prototype.keys\",function(e){return e||function(){return f.iteratorFromArray(this,function(e){return e})}},\"es6\",\"es3\"),f.checkEs6ConformanceViaProxy=function(){try{var e={},t=Object.create(new f.global.Proxy(e,{get:function(r,n,i){return r==e&&\"q\"==n&&i==t}}));return!0===t.q}catch(e){return!1}},f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1,f.ES6_CONFORMANCE=f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&f.checkEs6ConformanceViaProxy(),f.makeIterator=function(e){f.initSymbolIterator();var t=e[Symbol.iterator];return t?t.call(e):f.arrayIterator(e)},f.owns=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},f.polyfill(\"WeakMap\",function(e){function t(e){if(this.id_=(a+=Math.random()+1).toString(),e){f.initSymbol(),f.initSymbolIterator(),e=f.makeIterator(e);for(var t;!(t=e.next()).done;)t=t.value,this.set(t[0],t[1])}}function r(e){f.owns(e,i)||f.defineProperty(e,i,{value:{}})}function n(e){var t=Object[e];t&&(Object[e]=function(e){return r(e),t(e)})}if(f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(e&&f.ES6_CONFORMANCE)return e}else if(function(){if(!e||!Object.seal)return!1;try{var t=Object.seal({}),r=Object.seal({}),n=new e([[t,2],[r,3]]);return 2==n.get(t)&&3==n.get(r)&&(n.delete(t),n.set(r,4),!n.has(t)&&4==n.get(r))}catch(e){return!1}}())return e;var i=\"$jscomp_hidden_\"+Math.random();n(\"freeze\"),n(\"preventExtensions\"),n(\"seal\");var a=0;return t.prototype.set=function(e,t){if(r(e),!f.owns(e,i))throw Error(\"WeakMap key fail: \"+e);return e[i][this.id_]=t,this},t.prototype.get=function(e){return f.owns(e,i)?e[i][this.id_]:void 0},t.prototype.has=function(e){return f.owns(e,i)&&f.owns(e[i],this.id_)},t.prototype.delete=function(e){return!(!f.owns(e,i)||!f.owns(e[i],this.id_))&&delete e[i][this.id_]},t},\"es6\",\"es3\"),f.MapEntry=function(){},f.polyfill(\"Map\",function(e){function t(){var e={};return e.previous=e.next=e.head=e}function r(e,t){var r=e.head_;return f.iteratorPrototype(function(){if(r){for(;r.head!=e.head_;)r=r.previous;for(;r.next!=r.head;)return r=r.next,{done:!1,value:t(r)};r=null}return{done:!0,value:void 0}})}function n(e,t){var r=t&&typeof t;\"object\"==r||\"function\"==r?a.has(t)?r=a.get(t):(r=\"\"+ ++o,a.set(t,r)):r=\"p_\"+t;var n=e.data_[r];if(n&&f.owns(e.data_,r))for(e=0;e<n.length;e++){var i=n[e];if(t!==t&&i.key!==i.key||t===i.key)return{id:r,list:n,index:e,entry:i}}return{id:r,list:n,index:-1,entry:void 0}}function i(e){if(this.data_={},this.head_=t(),this.size=0,e){e=f.makeIterator(e);for(var r;!(r=e.next()).done;)r=r.value,this.set(r[0],r[1])}}if(f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(e&&f.ES6_CONFORMANCE)return e}else if(function(){if(f.ASSUME_NO_NATIVE_MAP||!e||\"function\"!=typeof e||!e.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var t=Object.seal({x:4}),r=new e(f.makeIterator([[t,\"s\"]]));if(\"s\"!=r.get(t)||1!=r.size||r.get({x:4})||r.set({x:4},\"t\")!=r||2!=r.size)return!1;var n=r.entries(),i=n.next();return!i.done&&i.value[0]==t&&\"s\"==i.value[1]&&!((i=n.next()).done||4!=i.value[0].x||\"t\"!=i.value[1]||!n.next().done)}catch(e){return!1}}())return e;f.initSymbol(),f.initSymbolIterator();var a=new WeakMap;i.prototype.set=function(e,t){var r=n(this,e);return r.list||(r.list=this.data_[r.id]=[]),r.entry?r.entry.value=t:(r.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:e,value:t},r.list.push(r.entry),this.head_.previous.next=r.entry,this.head_.previous=r.entry,this.size++),this},i.prototype.delete=function(e){return!(!(e=n(this,e)).entry||!e.list)&&(e.list.splice(e.index,1),e.list.length||delete this.data_[e.id],e.entry.previous.next=e.entry.next,e.entry.next.previous=e.entry.previous,e.entry.head=null,this.size--,!0)},i.prototype.clear=function(){this.data_={},this.head_=this.head_.previous=t(),this.size=0},i.prototype.has=function(e){return!!n(this,e).entry},i.prototype.get=function(e){return(e=n(this,e).entry)&&e.value},i.prototype.entries=function(){return r(this,function(e){return[e.key,e.value]})},i.prototype.keys=function(){return r(this,function(e){return e.key})},i.prototype.values=function(){return r(this,function(e){return e.value})},i.prototype.forEach=function(e,t){for(var r,n=this.entries();!(r=n.next()).done;)r=r.value,e.call(t,r[1],r[0],this)},i.prototype[Symbol.iterator]=i.prototype.entries;var o=0;return i},\"es6\",\"es3\"),f.assign=\"function\"==typeof Object.assign?Object.assign:function(e,t){for(var r=1;r<arguments.length;r++){var n=arguments[r];if(n)for(var i in n)f.owns(n,i)&&(e[i]=n[i])}return e},f.polyfill(\"Object.assign\",function(e){return e||f.assign},\"es6\",\"es3\");var r=this; true?module.exports=t():undefined;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fastest-validator/dist/index.min.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./src/Incidents/Effect.js":
/*!*********************************!*\
  !*** ./src/Incidents/Effect.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MotorCortex = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar effects = __webpack_require__(/*! ../compositeAttributes */ \"./src/compositeAttributes.js\").filter;\n\nvar VideoEffect =\n/*#__PURE__*/\nfunction (_MotorCortex$API$Mono) {\n  _inherits(VideoEffect, _MotorCortex$API$Mono);\n\n  function VideoEffect() {\n    _classCallCheck(this, VideoEffect);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VideoEffect).apply(this, arguments));\n  }\n\n  _createClass(VideoEffect, [{\n    key: \"getScratchValue\",\n    value: function getScratchValue() {\n      return {\n        blur: 0,\n        brightness: 1,\n        contrast: 1,\n        grayscale: 0,\n        'hue-rotate': 0,\n        invert: 0,\n        opacity: 1,\n        saturate: 1,\n        sepia: 0\n      };\n    }\n  }, {\n    key: \"_objToFilterValue\",\n    value: function _objToFilterValue(obj) {\n      var string = \"\";\n\n      for (var filter in obj) {\n        string += \"\".concat(filter, \"(\").concat(obj[filter]).concat(this._effectsUnits[filter], \") \");\n      }\n\n      return string;\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(f, m) {\n      var targetValues = Object.assign({}, this.initialValue);\n\n      for (var i = 0; i < effects.length; i++) {\n        var effect = effects[i];\n\n        if (this.initialValue[effect] !== this.targetValue[effect]) {\n          targetValues[effect] = f * (this.targetValue[effect] - this.initialValue[effect]) + this.initialValue[effect];\n        }\n      }\n\n      this.element.entity.ctx.filter = this._objToFilterValue(targetValues);\n    }\n  }, {\n    key: \"_effectsUnits\",\n    get: function get() {\n      return {\n        blur: 'px',\n        brightness: '',\n        contrast: '',\n        grayscale: '',\n        'hue-rotate': 'deg',\n        invert: '',\n        opacity: '',\n        saturate: '',\n        sepia: ''\n      };\n    }\n  }]);\n\n  return VideoEffect;\n}(MotorCortex.API.MonoIncident);\n\nmodule.exports = VideoEffect;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvSW5jaWRlbnRzL0VmZmVjdC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvSW5jaWRlbnRzL0VmZmVjdC5qcz9kNWViIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vdG9yQ29ydGV4ID0gcmVxdWlyZShcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXhcIik7XG5jb25zdCBlZmZlY3RzID0gcmVxdWlyZSgnLi4vY29tcG9zaXRlQXR0cmlidXRlcycpLmZpbHRlcjtcblxuY2xhc3MgVmlkZW9FZmZlY3QgZXh0ZW5kcyBNb3RvckNvcnRleC5BUEkuTW9ub0luY2lkZW50IHtcbiAgICBnZXRTY3JhdGNoVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibHVyOiAwLFxuICAgICAgICAgICAgYnJpZ2h0bmVzczogMSxcbiAgICAgICAgICAgIGNvbnRyYXN0OiAxLFxuICAgICAgICAgICAgZ3JheXNjYWxlOiAwLFxuICAgICAgICAgICAgJ2h1ZS1yb3RhdGUnOiAwLFxuICAgICAgICAgICAgaW52ZXJ0OiAwLFxuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIHNhdHVyYXRlOiAxLFxuICAgICAgICAgICAgc2VwaWE6IDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBfZWZmZWN0c1VuaXRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmx1cjogJ3B4JyxcbiAgICAgICAgICAgIGJyaWdodG5lc3M6ICcnLFxuICAgICAgICAgICAgY29udHJhc3Q6ICcnLFxuICAgICAgICAgICAgZ3JheXNjYWxlOiAnJyxcbiAgICAgICAgICAgICdodWUtcm90YXRlJzogJ2RlZycsXG4gICAgICAgICAgICBpbnZlcnQ6ICcnLFxuICAgICAgICAgICAgb3BhY2l0eTogJycsXG4gICAgICAgICAgICBzYXR1cmF0ZTogJycsXG4gICAgICAgICAgICBzZXBpYTogJydcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vYmpUb0ZpbHRlclZhbHVlKG9iaikge1xuICAgICAgICBsZXQgc3RyaW5nID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgaW4gb2JqKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gYCR7ZmlsdGVyfSgke29ialtmaWx0ZXJdfSR7dGhpcy5fZWZmZWN0c1VuaXRzW2ZpbHRlcl19KSBgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgb25Qcm9ncmVzcyhmLCBtKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldFZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlZmZlY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSBlZmZlY3RzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFZhbHVlW2VmZmVjdF0gIT09IHRoaXMudGFyZ2V0VmFsdWVbZWZmZWN0XSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFZhbHVlc1tlZmZlY3RdID0gZiAqICh0aGlzLnRhcmdldFZhbHVlW2VmZmVjdF0gLSB0aGlzLmluaXRpYWxWYWx1ZVtlZmZlY3RdKSArIHRoaXMuaW5pdGlhbFZhbHVlW2VmZmVjdF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LmVudGl0eS5jdHguZmlsdGVyID0gdGhpcy5fb2JqVG9GaWx0ZXJWYWx1ZSh0YXJnZXRWYWx1ZXMpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWaWRlb0VmZmVjdDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7OztBQWdCQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUEvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7Ozs7QUEzQkE7QUFDQTtBQWdEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Incidents/Effect.js\n");

/***/ }),

/***/ "./src/Incidents/VideoPlay.js":
/*!************************************!*\
  !*** ./src/Incidents/VideoPlay.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar VideoPlay =\n/*#__PURE__*/\nfunction (_MC$API$MediaPlayback) {\n  _inherits(VideoPlay, _MC$API$MediaPlayback);\n\n  function VideoPlay() {\n    _classCallCheck(this, VideoPlay);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VideoPlay).apply(this, arguments));\n  }\n\n  _createClass(VideoPlay, [{\n    key: \"play\",\n    value: function play(millisecond) {\n      var _this = this;\n\n      var video = this.element.entity.video;\n      var ctx = this.element.entity.ctx;\n      var playPromise = video.play();\n\n      if (this.hasSetWaitingListener !== true) {\n        video.addEventListener('waiting', this._waitingHandler.bind(this));\n        this.hasSetWaitingListener = true;\n      }\n\n      if (this.hasSetCanplayListener !== true) {\n        video.addEventListener('canplay', this._canplayHandler.bind(this));\n        this.hasSetCanplayListener = true;\n      }\n\n      var drawFrame = function drawFrame(video) {\n        ctx.drawImage(video, 0, 0);\n        _this.timeout = setTimeout(function () {\n          drawFrame(video);\n        }, 10);\n      };\n\n      drawFrame(video);\n      return true;\n    }\n  }, {\n    key: \"_waitingHandler\",\n    value: function _waitingHandler() {\n      console.log('waiting');\n      console.log('and blocking');\n      this.setBlock('Video loading');\n    }\n  }, {\n    key: \"_canplayHandler\",\n    value: function _canplayHandler() {\n      console.log('unblocking');\n      this.unblock();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.element.entity.video.pause();\n      clearTimeout(this.timeout);\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(f, millisecond) {\n      var startFrom = millisecond + this.element.entity.startFrom;\n      this.element.entity.video.currentTime = (startFrom + millisecond) / 1000;\n      this.element.entity.ctx.drawImage(this.element.entity.video, 0, 0);\n    }\n  }]);\n\n  return VideoPlay;\n}(MC.API.MediaPlayback);\n\nmodule.exports = VideoPlay;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvSW5jaWRlbnRzL1ZpZGVvUGxheS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvSW5jaWRlbnRzL1ZpZGVvUGxheS5qcz9jYjBlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1DID0gcmVxdWlyZShcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXhcIik7XG5cbmNsYXNzIFZpZGVvUGxheSBleHRlbmRzIE1DLkFQSS5NZWRpYVBsYXliYWNrIHtcbiAgICBwbGF5KG1pbGxpc2Vjb25kKSB7XG4gICAgICAgIGNvbnN0IHZpZGVvID0gdGhpcy5lbGVtZW50LmVudGl0eS52aWRlbztcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5lbGVtZW50LmVudGl0eS5jdHg7XG5cbiAgICAgICAgY29uc3QgcGxheVByb21pc2UgPSB2aWRlby5wbGF5KCk7XG4gICAgICAgIGlmICh0aGlzLmhhc1NldFdhaXRpbmdMaXN0ZW5lciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMuX3dhaXRpbmdIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5oYXNTZXRXYWl0aW5nTGlzdGVuZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1NldENhbnBsYXlMaXN0ZW5lciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMuX2NhbnBsYXlIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5oYXNTZXRDYW5wbGF5TGlzdGVuZXIgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZHJhd0ZyYW1lID0gKHZpZGVvKSA9PiB7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHZpZGVvLCAwLCAwKTtcblxuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkcmF3RnJhbWUodmlkZW8pO1xuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGRyYXdGcmFtZSh2aWRlbyk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgX3dhaXRpbmdIYW5kbGVyKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnd2FpdGluZycpO1xuICAgICAgICBjb25zb2xlLmxvZygnYW5kIGJsb2NraW5nJyk7XG4gICAgICAgIHRoaXMuc2V0QmxvY2soJ1ZpZGVvIGxvYWRpbmcnKTtcbiAgICB9XG5cbiAgICBfY2FucGxheUhhbmRsZXIoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd1bmJsb2NraW5nJyk7XG4gICAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5lbnRpdHkudmlkZW8ucGF1c2UoKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuXG4gICAgb25Qcm9ncmVzcyhmLCBtaWxsaXNlY29uZCkge1xuICAgICAgICBjb25zdCBzdGFydEZyb20gPSBtaWxsaXNlY29uZCArIHRoaXMuZWxlbWVudC5lbnRpdHkuc3RhcnRGcm9tO1xuICAgICAgICB0aGlzLmVsZW1lbnQuZW50aXR5LnZpZGVvLmN1cnJlbnRUaW1lID0gKHN0YXJ0RnJvbSArIG1pbGxpc2Vjb25kKSAvIDEwMDA7XG4gICAgICAgIHRoaXMuZWxlbWVudC5lbnRpdHkuY3R4LmRyYXdJbWFnZSh0aGlzLmVsZW1lbnQuZW50aXR5LnZpZGVvLCAwLCAwKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmlkZW9QbGF5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBL0NBO0FBQ0E7QUFpREEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Incidents/VideoPlay.js\n");

/***/ }),

/***/ "./src/VideoClip.js":
/*!**************************!*\
  !*** ./src/VideoClip.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar VideoClip =\n/*#__PURE__*/\nfunction (_MC$API$DOMClip) {\n  _inherits(VideoClip, _MC$API$DOMClip);\n\n  function VideoClip() {\n    _classCallCheck(this, VideoClip);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VideoClip).apply(this, arguments));\n  }\n\n  _createClass(VideoClip, [{\n    key: \"onAfterRender\",\n    value: function onAfterRender() {\n      var video = this.context.getElements(\"video\")[0];\n      video.muted = true;\n      var canvas = this.context.getElements(\"canvas\")[0];\n      var ctx = canvas.getContext('2d');\n      canvas.width = this.attrs.width || 640;\n      canvas.height = this.attrs.width || 360; // ctx.filter = \"grayscale(100%)\";\n\n      this.setCustomEntity(\"video\", {\n        video: video,\n        canvas: canvas,\n        ctx: ctx,\n        startFrom: this.attrs.startFrom * 1000 || 0\n      });\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      var _this = this;\n\n      return \"\\n        <div>\\n            <video id=\\\"video\\\" style=\\\"width:\".concat(this.attrs.width || 640, \"px;height:\").concat(this.attrs.height || 360, \"px;\\\" preload=\\\"auto\\\">\\n                \").concat(this.attrs.sources.map(function (item, i) {\n        return \"\\n                    <source src=\\\"\".concat(item, \"#t=\").concat(_this.attrs.startFrom || 0, \"\\\"></source>\\n                \");\n      }).join(''), \"\\n            </video>\\n            <canvas id=\\\"canvas\\\"></canvas>\\n        </div>\\n        \");\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      return \"\\n            #video{\\n                display:none;\\n            }\\n        \";\n    }\n  }]);\n\n  return VideoClip;\n}(MC.API.DOMClip);\n\nmodule.exports = VideoClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvVmlkZW9DbGlwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9WaWRlb0NsaXAuanM/OGY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBNQyA9IHJlcXVpcmUoJ0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgnKTtcblxuY2xhc3MgVmlkZW9DbGlwIGV4dGVuZHMgTUMuQVBJLkRPTUNsaXAge1xuICAgIGdldCBodG1sKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHZpZGVvIGlkPVwidmlkZW9cIiBzdHlsZT1cIndpZHRoOiR7dGhpcy5hdHRycy53aWR0aCB8fCA2NDB9cHg7aGVpZ2h0OiR7dGhpcy5hdHRycy5oZWlnaHQgfHwgMzYwfXB4O1wiIHByZWxvYWQ9XCJhdXRvXCI+XG4gICAgICAgICAgICAgICAgJHt0aGlzLmF0dHJzLnNvdXJjZXMubWFwKChpdGVtLCBpKSA9PiBgXG4gICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPVwiJHtpdGVtfSN0PSR7dGhpcy5hdHRycy5zdGFydEZyb20gfHwgMH1cIj48L3NvdXJjZT5cbiAgICAgICAgICAgICAgICBgKS5qb2luKCcnKX1cbiAgICAgICAgICAgIDwvdmlkZW8+XG4gICAgICAgICAgICA8Y2FudmFzIGlkPVwiY2FudmFzXCI+PC9jYW52YXM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgXG4gICAgfVxuXG4gICAgZ2V0IGNzcygpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICN2aWRlb3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5Om5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICB9XG5cbiAgICBvbkFmdGVyUmVuZGVyKCkge1xuICAgICAgICBjb25zdCB2aWRlbyA9IHRoaXMuY29udGV4dC5nZXRFbGVtZW50cyhcInZpZGVvXCIpWzBdO1xuICAgICAgICB2aWRlby5tdXRlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY29udGV4dC5nZXRFbGVtZW50cyhcImNhbnZhc1wiKVswXTtcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMuYXR0cnMud2lkdGggfHwgNjQwO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5hdHRycy53aWR0aCB8fCAzNjA7XG4gICAgICAgIC8vIGN0eC5maWx0ZXIgPSBcImdyYXlzY2FsZSgxMDAlKVwiO1xuXG4gICAgICAgIHRoaXMuc2V0Q3VzdG9tRW50aXR5KFwidmlkZW9cIiwge1xuICAgICAgICAgICAgdmlkZW8sXG4gICAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICBzdGFydEZyb206IHRoaXMuYXR0cnMuc3RhcnRGcm9tICogMTAwMCB8fCAwXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWaWRlb0NsaXA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTs7O0FBcENBO0FBQUE7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQU9BOzs7QUFFQTtBQUNBO0FBS0E7Ozs7QUFwQkE7QUFDQTtBQXVDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/VideoClip.js\n");

/***/ }),

/***/ "./src/compositeAttributes.js":
/*!************************************!*\
  !*** ./src/compositeAttributes.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  filter: [\"blur\", \"brightness\", \"contrast\", \"drop-shadow\", \"grayscale\", \"hue-rotate\", \"invert\", \"opacity\", \"saturate\", \"sepia\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9zaXRlQXR0cmlidXRlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY29tcG9zaXRlQXR0cmlidXRlcy5qcz9jOTFmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZpbHRlcjogW1xuICAgICAgICBcImJsdXJcIixcbiAgICAgICAgXCJicmlnaHRuZXNzXCIsXG4gICAgICAgIFwiY29udHJhc3RcIixcbiAgICAgICAgXCJkcm9wLXNoYWRvd1wiLFxuICAgICAgICBcImdyYXlzY2FsZVwiLFxuICAgICAgICBcImh1ZS1yb3RhdGVcIixcbiAgICAgICAgXCJpbnZlcnRcIixcbiAgICAgICAgXCJvcGFjaXR5XCIsXG4gICAgICAgIFwic2F0dXJhdGVcIixcbiAgICAgICAgXCJzZXBpYVwiXG4gICAgXVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/compositeAttributes.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar VideoClip = __webpack_require__(/*! ./VideoClip */ \"./src/VideoClip.js\");\n\nvar VideoPlay = __webpack_require__(/*! ./Incidents/VideoPlay */ \"./src/Incidents/VideoPlay.js\");\n\nvar VideoEffect = __webpack_require__(/*! ./Incidents/Effect */ \"./src/Incidents/Effect.js\");\n\nvar compositeAttributes = __webpack_require__(/*! ./compositeAttributes */ \"./src/compositeAttributes.js\");\n\nmodule.exports = {\n  npm_name: \"@kissmybutton/motorcortex-video\",\n  incidents: [{\n    exportable: VideoPlay,\n    name: \"Playback\"\n  }, {\n    exportable: VideoEffect,\n    name: \"VideoEffect\"\n  }],\n  compositeAttributes: compositeAttributes,\n  Clip: VideoClip\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbWFpbi5qcz8yZWUyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFZpZGVvQ2xpcCA9IHJlcXVpcmUoJy4vVmlkZW9DbGlwJyk7XG5jb25zdCBWaWRlb1BsYXkgPSByZXF1aXJlKCcuL0luY2lkZW50cy9WaWRlb1BsYXknKTtcbmNvbnN0IFZpZGVvRWZmZWN0ID0gcmVxdWlyZSgnLi9JbmNpZGVudHMvRWZmZWN0Jyk7XG5jb25zdCBjb21wb3NpdGVBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9jb21wb3NpdGVBdHRyaWJ1dGVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5wbV9uYW1lOiBcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtdmlkZW9cIixcbiAgICBpbmNpZGVudHM6IFt7XG4gICAgICAgIGV4cG9ydGFibGU6IFZpZGVvUGxheSxcbiAgICAgICAgbmFtZTogXCJQbGF5YmFja1wiXG4gICAgfSwge1xuICAgICAgICBleHBvcnRhYmxlOiBWaWRlb0VmZmVjdCxcbiAgICAgICAgbmFtZTogXCJWaWRlb0VmZmVjdFwiXG4gICAgfV0sXG4gICAgY29tcG9zaXRlQXR0cmlidXRlcyxcbiAgICBDbGlwOiBWaWRlb0NsaXBcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQVZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./test/script.js":
/*!************************!*\
  !*** ./test/script.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar MotorCortex = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar Player = __webpack_require__(/*! @kissmybutton/motorcortex-player */ \"./node_modules/@kissmybutton/motorcortex-player/dist/Player.js\");\n\nvar VideoPluginDefinition = __webpack_require__(/*! ../src/main */ \"./src/main.js\");\n\nvar VideoPlugin = MotorCortex.loadPlugin(VideoPluginDefinition);\n/**** 1 ******/\n\n/***** CASI ******/\n\nvar MyClip = new MotorCortex.Clip({\n  host: document.getElementById(\"video-container\"),\n  id: \"my-root-clip\",\n  html: \"<div id=\\\"video-container\\\"></div>\",\n  css: \"\\n        #video-container{\\n            width: 1280px;\\n            height: 720px;\\n        }\\n    \"\n});\nvar VideoClip = new VideoPlugin.Clip({\n  sources: [\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"],\n  startFrom: 120,\n  width: 1280,\n  height: 720\n}, {\n  selector: '#video-container',\n  id: 'videoClip'\n});\nvar Playback1 = new VideoPlugin.Playback({}, {\n  selector: \"!#video\",\n  duration: 25000\n});\nvar Effect1 = new VideoPlugin.VideoEffect({\n  animatedAttrs: {\n    filter: {\n      blur: 6\n    }\n  }\n}, {\n  selector: \"!#video\",\n  duration: 2000\n});\nvar Effect2 = new VideoPlugin.VideoEffect({\n  animatedAttrs: {\n    filter: {\n      blur: 0,\n      sepia: 1\n    }\n  }\n}, {\n  selector: \"!#video\",\n  duration: 2000\n});\nvar Effect3 = new VideoPlugin.VideoEffect({\n  animatedAttrs: {\n    filter: {\n      sepia: 0\n    }\n  }\n}, {\n  selector: \"!#video\",\n  duration: 2000\n});\nvar Effect4 = new VideoPlugin.VideoEffect({\n  animatedAttrs: {\n    filter: {\n      'hue-rotate': 360\n    }\n  }\n}, {\n  selector: \"!#video\",\n  duration: 4000\n});\nvar Effect5 = new VideoPlugin.VideoEffect({\n  animatedAttrs: {\n    filter: {\n      grayscale: 1\n    }\n  }\n}, {\n  selector: \"!#video\",\n  duration: 2000\n});\nvar Effect6 = new VideoPlugin.VideoEffect({\n  animatedAttrs: {\n    filter: {\n      grayscale: 0,\n      invert: 1\n    }\n  }\n}, {\n  selector: \"!#video\",\n  duration: 8000\n});\nMyClip.addIncident(VideoClip, 0);\nVideoClip.addIncident(Playback1, 500);\nVideoClip.addIncident(Effect1, 1000);\nVideoClip.addIncident(Effect2, 3000);\nVideoClip.addIncident(Effect3, 5000);\nVideoClip.addIncident(Effect4, 10000);\nVideoClip.addIncident(Effect5, 14000);\nVideoClip.addIncident(Effect6, 16000);\nnew Player({\n  clip: MyClip\n});\n\"\";\n/****** 2 ********/\n\n/****** SELF HOSTED ******/\n// const VideoClip = new VideoPlugin.Clip({\n//     sources: [\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"],\n//     startFrom: 50,\n//     width: 640,\n//     height: 360\n// }, {\n//     host: document.getElementById(\"video-container\"),\n//     id: 'videoClip'\n// });\n// const Playback1 = new VideoPlugin.Playback({}, {\n//     selector: \"!#video\",\n//     duration: 15000\n// });\n// VideoClip.addIncident(Playback1, 500);\n// new Player({ clip: VideoClip });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0L3NjcmlwdC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy90ZXN0L3NjcmlwdC5qcz84ODdhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vdG9yQ29ydGV4ID0gcmVxdWlyZShcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXhcIik7XG5jb25zdCBQbGF5ZXIgPSByZXF1aXJlKFwiQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXJcIik7XG5jb25zdCBWaWRlb1BsdWdpbkRlZmluaXRpb24gPSByZXF1aXJlKFwiLi4vc3JjL21haW5cIik7XG5jb25zdCBWaWRlb1BsdWdpbiA9IE1vdG9yQ29ydGV4LmxvYWRQbHVnaW4oVmlkZW9QbHVnaW5EZWZpbml0aW9uKTtcblxuXG4vKioqKiAxICoqKioqKi9cbi8qKioqKiBDQVNJICoqKioqKi9cbmNvbnN0IE15Q2xpcCA9IG5ldyBNb3RvckNvcnRleC5DbGlwKHtcbiAgICBob3N0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvLWNvbnRhaW5lclwiKSxcbiAgICBpZDogXCJteS1yb290LWNsaXBcIixcbiAgICBodG1sOiBgPGRpdiBpZD1cInZpZGVvLWNvbnRhaW5lclwiPjwvZGl2PmAsXG4gICAgY3NzOiBgXG4gICAgICAgICN2aWRlby1jb250YWluZXJ7XG4gICAgICAgICAgICB3aWR0aDogMTI4MHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiA3MjBweDtcbiAgICAgICAgfVxuICAgIGBcbn0pO1xuXG5cbmNvbnN0IFZpZGVvQ2xpcCA9IG5ldyBWaWRlb1BsdWdpbi5DbGlwKHtcbiAgICBzb3VyY2VzOiBbXCJodHRwczovL2NvbW1vbmRhdGFzdG9yYWdlLmdvb2dsZWFwaXMuY29tL2d0di12aWRlb3MtYnVja2V0L3NhbXBsZS9CaWdCdWNrQnVubnkubXA0XCJdLFxuICAgIHN0YXJ0RnJvbTogMTIwLFxuICAgIHdpZHRoOiAxMjgwLFxuICAgIGhlaWdodDogNzIwXG59LCB7XG4gICAgc2VsZWN0b3I6ICcjdmlkZW8tY29udGFpbmVyJyxcbiAgICBpZDogJ3ZpZGVvQ2xpcCdcbn0pO1xuXG5jb25zdCBQbGF5YmFjazEgPSBuZXcgVmlkZW9QbHVnaW4uUGxheWJhY2soe30sIHtcbiAgICBzZWxlY3RvcjogXCIhI3ZpZGVvXCIsXG4gICAgZHVyYXRpb246IDI1MDAwXG59KTtcblxuY29uc3QgRWZmZWN0MSA9IG5ldyBWaWRlb1BsdWdpbi5WaWRlb0VmZmVjdCh7XG4gICAgYW5pbWF0ZWRBdHRyczoge1xuICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIGJsdXI6IDZcbiAgICAgICAgfVxuICAgIH1cbn0sIHtcbiAgICBzZWxlY3RvcjogXCIhI3ZpZGVvXCIsXG4gICAgZHVyYXRpb246IDIwMDBcbn0pO1xuXG5jb25zdCBFZmZlY3QyID0gbmV3IFZpZGVvUGx1Z2luLlZpZGVvRWZmZWN0KHtcbiAgICBhbmltYXRlZEF0dHJzOiB7XG4gICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgYmx1cjogMCxcbiAgICAgICAgICAgIHNlcGlhOiAxXG4gICAgICAgIH1cbiAgICB9XG59LCB7XG4gICAgc2VsZWN0b3I6IFwiISN2aWRlb1wiLFxuICAgIGR1cmF0aW9uOiAyMDAwXG59KTtcblxuY29uc3QgRWZmZWN0MyA9IG5ldyBWaWRlb1BsdWdpbi5WaWRlb0VmZmVjdCh7XG4gICAgYW5pbWF0ZWRBdHRyczoge1xuICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHNlcGlhOiAwXG4gICAgICAgIH1cbiAgICB9XG59LCB7XG4gICAgc2VsZWN0b3I6IFwiISN2aWRlb1wiLFxuICAgIGR1cmF0aW9uOiAyMDAwXG59KTtcblxuY29uc3QgRWZmZWN0NCA9IG5ldyBWaWRlb1BsdWdpbi5WaWRlb0VmZmVjdCh7XG4gICAgYW5pbWF0ZWRBdHRyczoge1xuICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICdodWUtcm90YXRlJzogMzYwXG4gICAgICAgIH1cbiAgICB9XG59LCB7XG4gICAgc2VsZWN0b3I6IFwiISN2aWRlb1wiLFxuICAgIGR1cmF0aW9uOiA0MDAwXG59KTtcblxuY29uc3QgRWZmZWN0NSA9IG5ldyBWaWRlb1BsdWdpbi5WaWRlb0VmZmVjdCh7XG4gICAgYW5pbWF0ZWRBdHRyczoge1xuICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIGdyYXlzY2FsZTogMVxuICAgICAgICB9XG4gICAgfVxufSwge1xuICAgIHNlbGVjdG9yOiBcIiEjdmlkZW9cIixcbiAgICBkdXJhdGlvbjogMjAwMFxufSk7XG5cbmNvbnN0IEVmZmVjdDYgPSBuZXcgVmlkZW9QbHVnaW4uVmlkZW9FZmZlY3Qoe1xuICAgIGFuaW1hdGVkQXR0cnM6IHtcbiAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICBncmF5c2NhbGU6IDAsXG4gICAgICAgICAgICBpbnZlcnQ6IDFcbiAgICAgICAgfVxuICAgIH1cbn0sIHtcbiAgICBzZWxlY3RvcjogXCIhI3ZpZGVvXCIsXG4gICAgZHVyYXRpb246IDgwMDBcbn0pO1xuXG5NeUNsaXAuYWRkSW5jaWRlbnQoVmlkZW9DbGlwLCAwKTtcblZpZGVvQ2xpcC5hZGRJbmNpZGVudChQbGF5YmFjazEsIDUwMCk7XG5WaWRlb0NsaXAuYWRkSW5jaWRlbnQoRWZmZWN0MSwgMTAwMCk7XG5WaWRlb0NsaXAuYWRkSW5jaWRlbnQoRWZmZWN0MiwgMzAwMCk7XG5WaWRlb0NsaXAuYWRkSW5jaWRlbnQoRWZmZWN0MywgNTAwMCk7XG5WaWRlb0NsaXAuYWRkSW5jaWRlbnQoRWZmZWN0NCwgMTAwMDApO1xuVmlkZW9DbGlwLmFkZEluY2lkZW50KEVmZmVjdDUsIDE0MDAwKTtcblZpZGVvQ2xpcC5hZGRJbmNpZGVudChFZmZlY3Q2LCAxNjAwMCk7XG5cbm5ldyBQbGF5ZXIoeyBjbGlwOiBNeUNsaXAgfSk7XG5gYFxuXG5cbi8qKioqKiogMiAqKioqKioqKi9cbi8qKioqKiogU0VMRiBIT1NURUQgKioqKioqL1xuLy8gY29uc3QgVmlkZW9DbGlwID0gbmV3IFZpZGVvUGx1Z2luLkNsaXAoe1xuLy8gICAgIHNvdXJjZXM6IFtcImh0dHBzOi8vY29tbW9uZGF0YXN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZ3R2LXZpZGVvcy1idWNrZXQvc2FtcGxlL0JpZ0J1Y2tCdW5ueS5tcDRcIl0sXG4vLyAgICAgc3RhcnRGcm9tOiA1MCxcbi8vICAgICB3aWR0aDogNjQwLFxuLy8gICAgIGhlaWdodDogMzYwXG4vLyB9LCB7XG4vLyAgICAgaG9zdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlby1jb250YWluZXJcIiksXG4vLyAgICAgaWQ6ICd2aWRlb0NsaXAnXG4vLyB9KTtcblxuLy8gY29uc3QgUGxheWJhY2sxID0gbmV3IFZpZGVvUGx1Z2luLlBsYXliYWNrKHt9LCB7XG4vLyAgICAgc2VsZWN0b3I6IFwiISN2aWRlb1wiLFxuLy8gICAgIGR1cmF0aW9uOiAxNTAwMFxuLy8gfSk7XG5cbi8vIFZpZGVvQ2xpcC5hZGRJbmNpZGVudChQbGF5YmFjazEsIDUwMCk7XG5cbi8vIG5ldyBQbGF5ZXIoeyBjbGlwOiBWaWRlb0NsaXAgfSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQURBO0FBREE7QUFPQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFEQTtBQURBO0FBUUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQURBO0FBREE7QUFPQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBREE7QUFEQTtBQU9BO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFEQTtBQURBO0FBT0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBREE7QUFEQTtBQVFBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./test/script.js\n");

/***/ })

/******/ });