const DWI = require('./ElementSplitter');
const ContextAwareClipIncident = require('./ContextAwareClipIncident');
const Channel = require('../Channels/Clip/ClipsChannel');

/**
 * This Class acts as the DOM Aware Incident for Clips. When constructed the Incident passed to
 * it is a Clip with FragmentHTML context handler.
 * On addition, edit or deletion of Incidents on the Fragmented Clip's tree, of the
 * Descriptive Clip this ElementClipSplitter implements, all updates on lanes
 * and everything that these clips need in order to run are made directly to the
 * ContextAwareIncidents of the DescriptiveClip's real Clip.
 */
class ElementClipSplitter extends DWI {
    constructor(descriptiveIncident, contextData) {
        super(descriptiveIncident, contextData);
        this.realClip = descriptiveIncident.realClip;
    }

    _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {
        const constructionArguments = descriptiveIncident.realClip.exportConstructionArguments();
        const constructionIngredients = {
            incidentId: descriptiveIncident.id,
            attrs: constructionArguments.attrs,
            props: { ...constructionArguments.props, selector: contextData.context.getElementSelectorByMCID(mcid), runTimeInfo: descriptiveIncident.runTimeInfo },
            Incident: descriptiveIncident.constructor.Incident,
            plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,
            Channel: Channel,
            DescriptiveIncident: descriptiveIncident
        };
        const contextAwareClipIncident = new ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident);
        this.addChild(contextAwareClipIncident, 0);
    }

    get duration() {
        return super.duration;
    }

    /*
    ElementClipSplitter split the DescriptiveClip to element ContextAwareIncidents
    All of the element ContextAwareClipIncidents instantiated share the same
    DescriptiveClip and thus the same realClip. So ElementClipSplitter are
    the Node from where a realClip starts to get copies.
    Resizing though means resizing the realClip. In order to avoid redunduncy we
    manage the resize here and we don't pass further down to the ContextAwareClipIncidents
    the resizing command.
    */
    set duration(milliseconds) {
        this.realClip._resize(milliseconds / this.realClip.duration);
        this._duration = milliseconds;
    }
}

module.exports = ElementClipSplitter;
