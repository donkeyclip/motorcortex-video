const Group = require('../BaseClasses/Group');
const AnimatedAttributeSplitter = require('./AnimatedAttributeSplitter');
const Helper = require('../_coreUtils/Helper');
const helper = new Helper();
const ContextAwareIncident = require('./ContextAwareIncident');


class ElementSplitter extends Group {
    constructor(descriptiveIncident, contextData) {
        // we make sure the DOMAwareIncident takes the same id as the Descriptive Incident
        super({}, { id: descriptiveIncident.id });

        // a property to hold all of the contexts
        this.contexts = {};
        this.contexts[contextData.clipId] = contextData.context;
        this.originalContextKey = contextData.clipId;
        this.instantiatedCopiesContexts = contextData.instantiatedCopiesContexts;

        this.setUp(descriptiveIncident, contextData);
    }


    get originalContext() {
        return this.contexts[this.originalContextKey];
    }


    setUp(descriptiveIncident, contextData) {
        // the elements of the original context
        const elements = this.originalContext.getElements(descriptiveIncident.selector());
        // the elements for each of the copied contexts
        // const copiesElements = {};
        // for (let contextKey in this.instantiatedCopiesContexts) {
        //     copiesElements[contextKey] = Array.from(this.instantiatedCopiesContexts[contextKey].rootElement.querySelectorAll(descriptiveIncident.props.selector));
        // }

        const totalElements = elements.length;
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            // set the mcid of the element on index i of the original context
            const mcid = this._getElementMCID(element);
            // set the same mcid for the elements of the same context in all of the instantiatedCopiesContexts
            for (let contextKey in this.instantiatedCopiesContexts) { // TODO perfrormance improvement via selecting once elements per context
                this._setElementMCID(this.instantiatedCopiesContexts[contextKey],
                    this.instantiatedCopiesContexts[contextKey].getElements(descriptiveIncident.selector())[i],
                    mcid);
            }
            this._createElementIncident(element, descriptiveIncident, contextData, i, totalElements, mcid);
        }
    }

    _getElementMCID(element) {
        let mcid = this.originalContext.getMCID(element);
        if (!mcid) {
            mcid = helper.getAnId(true);
            this.originalContext.setMCID(element, mcid);
        }
        return mcid;
    }

    _setElementMCID(context, element, mcid) {
        let existingMCID = context.getMCID(element);
        if (!existingMCID) {
            context.setMCID(element, mcid);
        }
    }


    _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {
        /* elements splitter might handle either attribute Incidents (that have animatedAttrs) or Incidents
        that do not have animatedAttrs such as MediaPlayback Incidents.
        In the case of an attributed Incident we proceed by creating one AttributeSplitter for each
        while on the case of an non-attribured Incident we go ahead and
        */
        if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'animatedAttrs')) {
            const animatedAttributeSplitter = new AnimatedAttributeSplitter(descriptiveIncident, contextData,
                mcid, contextData.context.getElementSelectorByMCID(mcid));
            this.addChild(animatedAttributeSplitter, 0);
        }
        else if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'keyframes')) {
            // TODO create a keyframes attribute splitter
        }
        else {
            const attrsToPass = descriptiveIncident.attrs;
            const propsToPass = { ...descriptiveIncident.props, selector: this.selector };
            const constructionIngredients = {
                incidentId: descriptiveIncident.id,
                attrs: attrsToPass,
                props: propsToPass,
                Incident: descriptiveIncident.constructor.Incident,
                plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,
                Channel: descriptiveIncident.constructor.Channel,
                DescriptiveIncident: descriptiveIncident
            };
            const contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, mcid, null);
            this.addChild(contextAwareIncident, 0);
        }
    }

}

module.exports = ElementSplitter;
