const Group = require('../BaseClasses/Group');
const ContextAwareIncident = require('./ContextAwareIncident');

class KeyframesAttributeSplitter extends Group {
    constructor(descriptiveIncident, contextData, mcid, selector) {
        super({}, { id: `${descriptiveIncident.id}_${mcid}` });
        this.mcid = mcid;
        this.selector = selector;
        this.setUp(descriptiveIncident, contextData);
    }

    _createAttrubuteSequences(keyframes) {
        /*
        an object holding arrays of incidents per attribute in the form:
        {
            <attribute>: [
                {
                    start: 0.3,
                    end: 0.4,
                    duration: 0.1,
                    startValue: 2,
                    value: 3
                }, ...
            ]
        }
        */
        const attributeSets = {};
        for (let percentage in keyframes) {
            const end = parseInt(percentage) / 100;
            for (let attribute in keyframes[percentage]) {
                const value = keyframes[percentage][attribute];
                if (!Object.prototype.hasOwnProperty.call(attributeSets, attribute)) {
                    attributeSets[attribute] = [{
                        start: 0,
                        end: end,
                        startValue: null,
                        value: value,
                        duration: end
                    }];
                }
                else {
                    const previousEntry = attributeSets[attribute][attributeSets[attribute].length - 1];
                    attributeSets[attribute].push({
                        start: previousEntry.end,
                        end: end,
                        startValue: previousEntry.value,
                        value: value,
                        duration: (10 * end - 10 * previousEntry.end) / 10
                    });
                }

            }
        }

        return attributeSets;
    }


    setUp(descriptiveIncident, contextData) {
        const attributeSets = this._createAttrubuteSequences(descriptiveIncident.attrs.keyframes);


        for (let attr in descriptiveIncident.attrs.animatedAttrs) {
            const singleAnimatedAttrs = {};
            singleAnimatedAttrs[attr] = descriptiveIncident.attrs.animatedAttrs[attr];
            const attrsToPass = { ...descriptiveIncident.attrs, animatedAttrs: singleAnimatedAttrs };
            const propsToPass = { ...descriptiveIncident.props, selector: this.selector };
            const constructionIngredients = {
                incidentId: descriptiveIncident.id,
                attrs: attrsToPass,
                props: propsToPass,
                Incident: descriptiveIncident.constructor.Incident,
                plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,
                Channel: descriptiveIncident.constructor.Channel,
                DescriptiveIncident: descriptiveIncident
            };
            const contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, this.mcid, attr);
            this.addChild(contextAwareIncident, 0);
        }
    }


}

module.exports = KeyframesAttributeSplitter;
