const ContextAwareIncident = require('../ContextAwareIncident');
const MonoIncident = require('../../BaseClasses/MonoIncident');
const Channel = require('../../Channels/Channel');


const constructionIngredients = {
    incidentId: 'incident-id',
    attrs: {
        animatedAttrs: {
            alpha: 1.1
        }
    },
    props: {
        selector: 'an-mcid-targeting-selector'
    },
    Incident: MonoIncident,
    plugin_npm_name: 'my_test_plugin',
    Channel: Channel
};

const contextData = {
    clipId: 'my-test-clip-id',
    context: {}
};

const cai = new ContextAwareIncident(constructionIngredients, contextData, 'my-mcid', 'alpha');

test(`ContextAwareIncident shoud initialise by creating an Incident and
            assigning it to the original context key`, () => {
    // console.log(dg1);
    expect(cai.id).toEqual('incident-id_my-mcid_alpha');
    expect(Object.keys(cai.contexts).length).toEqual(1);
    expect(cai.contexts['my-test-clip-id'].constructor).toEqual(MonoIncident);
    expect(cai.originalContext).toEqual(cai.contexts['my-test-clip-id']);
    expect(cai.contexts['my-test-clip-id'].attrs).toEqual(constructionIngredients.attrs);
});

test(`ContextAwareIncident should create one key-value pair on on its
            contexts map, per new context added to it`, () => {
    cai.setInitialValue({
        final: true,
        value: '3'
    })
    cai.addContext({
        clipId: 'my-second-clip-id',
        context: {}
    });

    expect(Object.keys(cai.contexts).length).toEqual(2);
    expect(cai.contexts['my-second-clip-id'].constructor).toEqual(MonoIncident);
    expect(cai.originalContext).toEqual(cai.contexts['my-test-clip-id']);
    expect(cai.contexts['my-second-clip-id'].attrs).toEqual(constructionIngredients.attrs);
});
