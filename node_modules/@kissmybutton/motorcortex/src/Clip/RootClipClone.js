const Helper = require('../_coreUtils/Helper');
const helper = new Helper();

/*
dna: {
    host
    descriptiveIncident
}
*/
class ClipClone {
    constructor(dna) {
        this.runTimeInfo = {
            currentMillisecond: 0,
            state: 'transitional'
        };

        this.id = helper.getAnId();
        this.realClip = dna.descriptiveIncident.realClip;
        // In order to render itself on the given element first it needs the props (including html and css)
        // from the real Clip it copies
        const constructionArgs = dna.descriptiveIncident.realClip.exportConstructionArguments();
        // it properly sets its own host on the props to use to initialise its own clip
        const hostedProps = { ...constructionArgs.props, selector: undefined, host: dna.host, id: this.id };
        // we create a clip because Clips on creation render and thus have their own context
        this.ownClip = new dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps);

        // flushes the realClip with its ownClip's context
        dna.descriptiveIncident.realClip.addContext({
            clipId: this.id,
            context: this.ownClip.ownContext,
            synchronize: dna.synchronize,
            runTimeInfo: this.runTimeInfo
        }, true);
    }

    onProgress(fraction, milliseconds, forceReset = false) {
        for (let key in this.realClip.instantiatedChannels) {
            const channel = this.realClip.instantiatedChannels[key];
            channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, true);
        }
        this.runTimeInfo.currentMillisecond = milliseconds;
    }

}

module.exports = ClipClone;
