import { elements_data_attribute_name } from '../../_configuration/generalConf';
import helper from '../../_coreUtils/Helper';

export default class ContextHandler {
  constructor() {
    this.customEntities = {};
  }

  getElementByMCID(mcid) {
    if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {
      return this.customEntities[mcid];
    }
    if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {
      return this.elementsByMCID[mcid];
    }

    const element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));
    this.elementsByMCID[mcid] = element;
    return element;
  }

  getElements(selector) {
    if(selector === null || selector === undefined || selector === ""){
      return [];
    }
    if (selector.charAt(0) === '!') {
      selector = selector.substr(1);
      if (selector.charAt(0) === '#') {
        return [this.customEntities[selector.substr(1)]];
      }
      if (selector.charAt(0) === '.') {
        const toReturn = [];
        for (const key in this.customEntities) {
          const entity = this.customEntities[key];
          if (entity.classes.indexOf(selector.substr(1)) > -1) {
            toReturn.push(entity);
          }
        }
        return toReturn;
      }
    }
    return Array.from(this.context.rootElement.querySelectorAll(selector));
  }

  getMCID(element) {
    if (element.customEntity === true) {
      return element.id;
    }
    return element.getAttribute(elements_data_attribute_name);
  }

  setMCID(element, mcid) {
    element.setAttribute(elements_data_attribute_name, mcid);
  }

  getElementSelectorByMCID(mcid) {
    if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {
      return `!#${mcid}`;
    }
    return `[${elements_data_attribute_name}="${mcid}"]`;
  }

  setCustomEntity(id, entity, classes = []) {
    if (Object.prototype.hasOwnProperty.call(this.customEntities, id)) {
      helper.error(`Clip ${this.id} already has custom Entity with id: ${id}`);
      return false;
    }

    this.customEntities[id] = {
      id,
      entity,
      classes,
      customEntity: true
    };
    return true;
  }
}
