const Helper = require('../../_coreUtils/Helper');
const helper = new Helper();
const ContextHandler = require('./ContextHandler');

class HTMLFragmentContextHandler extends ContextHandler {
    /**
     * @param {object} props - an object that should contain all of the following keys:
     * - html (the html template to render)
     * - css (the css template of the isolated tree)
     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
     * - host (an Element object that will host the isolated tree)
     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)
     */
    constructor(originalProps = {}) {
        super();
        let props = Object.assign({}, originalProps);

        if (!helper.isObject(props)) {
            helper.error(`HTMLFragmentContextHandler expects an object on its constructor. ${typeof props} passed`);
            return false;
        }

        if (!Object.prototype.hasOwnProperty.call(props, "html")) {
            props.html = '';
        }

        this.isDOM = true;

        const fragment = document.createDocumentFragment();
        const wrapper = document.createElement('div');
        if (Object.prototype.hasOwnProperty.call(props, "containerParams")) {
            if (Object.prototype.hasOwnProperty.call(props, "width")) {
                wrapper.style.width = props.containerParams.width;
            }
            if (Object.prototype.hasOwnProperty.call(props, "height")) {
                wrapper.style.height = props.containerParams.height;
            }
        }
        wrapper.innerHTML = helper.renderTemplate(props.html, { params: props.initParams });
        fragment.appendChild(wrapper);

        wrapper.style.overflow = "hidden";

        this.rootElement = wrapper;

        /* TODO make the context definition more generic so always the setCustomEntity gets set
        along with the rest of the required methods, so it can be used on the afterRender method
        of the DOMClip.
        The Clip will expose a method "setCustomEntity" that will set custom entities.
        TEST
        */
        this.context = {
            document: document,
            window: window,
            clipContainer: this.rootElement,
            rootElement: wrapper,
            unmount: function () {
                props.host.removeChild(fragment);
            },
            getElements: this.getElements.bind(this),
            getMCID: this.getMCID.bind(this),
            setMCID: this.setMCID.bind(this),
            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),
            getElementByMCID: this.getElementByMCID.bind(this),
            setCustomEntity: this.setCustomEntity.bind(this),
            fragment: true
        };

        this.elementsByMCID = {};
    }

}

module.exports = HTMLFragmentContextHandler;
