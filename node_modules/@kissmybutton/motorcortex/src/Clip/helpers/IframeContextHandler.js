/*
iframe[seamless]{
    background-color: transparent;
    border: 0px none transparent;
    padding: 0px;
    overflow: hidden;
}

might need more work for IE. See here: https://stackoverflow.com/a/29209248
*/

const Helper = require('../../_coreUtils/Helper');
const helper = new Helper();
const ContextHandler = require('./ContextHandler');

class IframeContextHandler extends ContextHandler {
    /**
     * @param {object} props - an object that should contain all of the following keys:
     * - html (the html template to render)
     * - css (the css template of the isolated tree)
     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
     * - host (an Element object that will host the isolated tree)
     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)
     */
    constructor(props = {}) {
        super();
        if (!helper.isObject(props)) {
            helper.error(`ContextHandler expects an object on its constructor. ${typeof props} passed`);
            return false;
        }

        if (!Object.prototype.hasOwnProperty.call(props, 'html')) {
            helper.error(`ContextHandler expects the html key on its constructor properties which is missing`);
            return false;
        }

        if (!Object.prototype.hasOwnProperty.call(props, 'css')) {
            helper.error(`ContextHandler expects the css key on its constructor properties which is missing`);
            return false;
        }

        if (!Object.prototype.hasOwnProperty.call(props, 'initParams')) {
            helper.info(`ContextHandler got null initParams`);
        }

        if (!Object.prototype.hasOwnProperty.call(props, 'host')) {
            helper.error(`ContextHandler expects the host key on its constructor properties which is missing`);
            return false;
        }

        this.isDOM = true;

        const ownerDocument = props.host.ownerDocument;

        if (!ownerDocument.getElementById("@kissmybutton/motorcortex/iframeContextHandler/css")) {
            const seamlessCSS = `
            iframe[seamless]{
                background-color: transparent;
                border: 0px none transparent;
                padding: 0px;
                overflow: hidden;
            }
            `;
            const iframesCSS = ownerDocument.createElement('style');
            iframesCSS.id = "@kissmybutton/motorcortex/iframeContextHandler/css";
            iframesCSS.type = 'text/css';
            const Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];
            if (iframesCSS.styleSheet) {
                iframesCSS.styleSheet.cssText = seamlessCSS;
            }
            else {
                iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));
            }

            Head.appendChild(iframesCSS);
        }

        // Create an iframe:
        let iframe = ownerDocument.createElement('iframe');
        props.host.appendChild(iframe);
        iframe.setAttribute("seamless", "seamless");
        if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {
            if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {
                iframe.setAttribute('width', props.containerParams.width);
            }
            if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {
                iframe.setAttribute('height', props.containerParams.height);
            }
        }
        // Initialise the iframe
        iframe.src = '';
        // Put it in the document (but hidden):
        let iframeDocument = (iframe.contentWindow || iframe.contentDocument);
        if (iframeDocument.document) {
            iframeDocument = iframeDocument.document;
        }

        iframeDocument.write(helper.renderTemplate(props.html, { params: props.initParams }));
        const bodyFixCSS = `
        body{
            padding:0;
            margin:0;
        }
        `;

        const styleTag = iframeDocument.createElement('style');
        styleTag.type = 'text/css';
        if (styleTag.styleSheet) {
            styleTag.styleSheet.cssText = helper.renderTemplate(props.css, { params: props.initParams }) + bodyFixCSS;
        }
        else {
            styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));
        }

        const head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];
        head.appendChild(styleTag);

        if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {
            for (let i = 0; i < props.fonts.length; i++) {
                const theFont = props.fonts[i];
                if (theFont.type === "google-font") {
                    const fontTag = iframeDocument.createElement('link');
                    fontTag.setAttribute('rel', 'stylesheet');
                    fontTag.setAttribute('href', theFont.src);
                    head.appendChild(fontTag);
                }
            }
        }

        this.rootElement = iframe;
        iframeDocument.close();

        this.context = {
            document: iframeDocument,
            window: iframe.contentWindow || iframe,
            clipContainer: iframe,
            rootElement: iframeDocument.body,
            unmount: function () {
                props.host.removeChild(iframe);
            },
            getElements: this.getElements.bind(this),
            getMCID: this.getMCID.bind(this),
            setMCID: this.setMCID.bind(this),
            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),
            getElementByMCID: this.getElementByMCID.bind(this),
            setCustomEntity: this.setCustomEntity.bind(this)
        };

        this.elementsByMCID = {};
    }

}

module.exports = IframeContextHandler;
