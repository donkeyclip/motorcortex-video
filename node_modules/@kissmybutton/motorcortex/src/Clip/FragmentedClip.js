const HTMLFragmentContextHandler = require('./helpers/HTMLFragmentContextHandler');

const ExtendableClip = require('./ExtendableClip');

class FragmentedClip extends ExtendableClip {
    constructor(props = {}, oldProps = null) {
        let attrsToPass, propsToUse;
        /*
        backwards compatibility. If the user doesn't pass a second argument on the constructor then this is
        the new way of initialising a Group (only props).
        */
        if (oldProps === null) {
            attrsToPass = {};
            propsToUse = props;
        }
        else { // else, in case the user has passed two arguments then both should be used
            attrsToPass = props;
            propsToUse = oldProps;
        }

        super(attrsToPass, propsToUse);

        const contextHanlder = new HTMLFragmentContextHandler({
            ...propsToUse,
            html: Object.prototype.hasOwnProperty.call(propsToUse, "html") ? propsToUse.html : this.html,
            css: Object.prototype.hasOwnProperty.call(propsToUse, "css") ? propsToUse.css : this.css,
            fonts: Object.prototype.hasOwnProperty.call(propsToUse, "fonts") ? propsToUse.fonts : this.fonts
        });

        this.ownContext = { ...contextHanlder.context, isHostedClip: false };
        this.iframe = contextHanlder.iframeElement;

        this.forceExportIncidents = true;

        this.onDOMCLipInitialise();

        // as soon as a Fragmented Clip is been intialised that means the Descriptive
        // Clip has a selector and not a host. Thus is not a hosted clip
        // this.isHostedClip = false;
    }

    exportConstructionArguments() {
        // TODO also export CSS and fonts taking in account the potential existance
        // of them on the get methods
        // console.log(this.ownContext.rootElement.innerHTML);
        return {
            attrs: this.attrs,
            props: { ...this.props, html: this.ownContext.rootElement.innerHTML }
        };
    }

    onDOMCLipInitialise() {
        // implement here
    }


    get rootElement() {
        return this.ownContext.clipContainer;
    }


}

module.exports = FragmentedClip;
