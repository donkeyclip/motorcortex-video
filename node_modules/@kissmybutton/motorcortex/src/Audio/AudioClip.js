const ExtendableClip = require('../Clip/ExtendableClip');
const AudioContextHandler = require('./AudioContextHandler');
const AudioNode = require('./helpers/AudioNode');
const Helper = require('../_coreUtils/Helper');
const helper = new Helper();

class AudioClip extends ExtendableClip {
    constructor(attrs, props) {
        super(attrs, props);

        this.audioNode = new AudioNode();
        this.audioNode.connect(helper.getAudioContext().destination);
        const contextHanlder = new AudioContextHandler(this.props.audioSources, this.audioNode);

        this.ownContext = { ...contextHanlder.context, isHostedClip: true };

        this.audioClip = true;
    }


    onProgress(fraction, ms, contextId, forceReset = false) {
        super.onProgress(fraction, ms, this.id, forceReset);
    }

    _onGetContextOnce(parentClipContext) {
        /*
        context.master {gain, pan, highpass, lowpass}
        */
        // as highpass is the first node of master in row
        this.audioNode.disconnect();
        this.parentClipContext = parentClipContext;
        this.audioNode.connect(parentClipContext.masterNode.input);
    }

    lastWish() {
        this.audioNode.output.disconnect();
        this.audioNode.output.connect(helper.getAudioContext().destination);
    }

    setVolume(vol) {
        this.audioNode.output.gain.value = vol;
    }

}


module.exports = AudioClip;
