import helper from '../_coreUtils/Helper';

function wrapReturn(result) {
  if (!result.result) {
    return {
      result: false,
      errors: result.errors,
    };
  }

  return {
    result: true,
    execute: result.execute,
  };
}

class Channel {
  constructor(props) {
    this.runTimeInfo = props.runTimeInfo;
    this.context = props.context;
    this.onInitialise();
    this.getIncidentById = props.getIncidentById;
    // this.type = "plain";
  }

  static get type() {
    return 'plain';
  }

  onInitialise() {}

  _resize() {
    helper.log('Please overwite the _resize method of the Channel');
  }

  /**
   * @param {array} incidents - A collection of Incidents in the form:
   * {
   *  millisecond
   *  incident
   *  id
   * }
   * @returns either:
   *   {
   *       result:true,
   *       execute: // an array of functions that when executed it will add the Incidents on the Channels
   *   }
   *   or
   *   {
   *       result: false,
   *       errors
   *   }
   */
  addIncidents(incidents) {
    // first check the Incidents addition directly using the checkAddition method of the class
    return wrapReturn(this.checkAddition(incidents));
  }

  /**
     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions
     * that apply the change
     * @param {array} incidents - the list of the incidents to edit in an array format [object, object, ...]
     * @param {number} millisecondsDelta - the milliseconds delta to apply to the incidents
     * @returns {object} -
     * either:
     {
        result: true,
        execute: // array of functions to be executed in order to apply the edit
     }
     or
     {
         result: false,
         errors: // an array including all the errors / conflicts found on edit
     }
    */
  editIncidents(incidents, millisecondsDelta) {
    // first check the Incidents addition directly using the checkAddition method of the class
    return wrapReturn(this.checkEdit(incidents, millisecondsDelta));
  }

  /**
     * Method to remove incidents
     * @param {array} incidents - the ids of the incidents to remove in an array format
     * @param {object} props
     * @retuns {object} -
     * either:
     {
        result: true,
        execute: // array of functions to be executed in order to apply the edit
     }
     or
     {
         result: false,
         errors: // an array including all the errors / conflicts found on edit
     }
    */
  removeIncidents(incidents, props = {}) {
    // first check the Incidents addition directly using the checkAddition method of the class
    return wrapReturn(this.checkDelete(incidents, props));
  }

  /**
   * This method is invoked whenever a CASI (the owner of the Channel) enters
   * the tree of another clip, so the scratch values of all first Incidents of
   * each channel should be recalculated based on the context. All Channels
   * that extend Channel can rewrite this method accordingly
   * @param {string} contextId - The id of the context of the Clip Copy according to which
   *      we are going to recalc the scratch values
   * */
  // eslint-disable-next-line no-unused-vars
  recalcScratchValues(contextId) {}

  /**
     * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself
     * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:
     *  {
            incident: // reference to the Incident object that has bee discarded
            error: // text
        }
    * @param {array} incidents - a colleciton of all incidents to be added on the form:
    *
        {
            id
            millisecond
            incident
        }
    * @returns {object} -
    * either:
        {
            result:true,
            execute: // a function that when executed it will add the Incidents on the Channels
        }
        or
        {
            result: false,
            errors
        }
    */
  // eslint-disable-next-line no-unused-vars
  checkAddition(incidents) {
    return { result: true, execute() {} };
  }

  // eslint-disable-next-line no-unused-vars
  checkEdit(incidentsArray, millisecondsDelta) {
    return { result: true, execute() {} };
  }

  // eslint-disable-next-line no-unused-vars
  checkDelete(incidentIds) {
    return { result: true, execute() {} };
  }

  // eslint-disable-next-line no-unused-vars
  checkResizedIncidents(incidents) {
    return { result: true, execute() {} };
  }

  moveTo(from, to, contextId) {} // eslint-disable-line no-unused-vars
}

export default Channel;
