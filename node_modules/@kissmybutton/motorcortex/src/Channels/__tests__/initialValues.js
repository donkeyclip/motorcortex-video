const MotorCortex = require('../../main');
let myClip;

const TesterClass = require('../../../tester/Tester');
const Tester = new TesterClass();

const iv_state1 = require('./states/iv_state1');
const iv_state2 = require('./states/iv_state2');
const iv_state3 = require('./states/iv_state3');
const iv_state4 = require('./states/iv_state4');
const iv_state5 = require('./states/iv_state5');
const iv_state6 = require('./states/iv_state6');
const iv_state7 = require('./states/iv_state7');
const iv_state8a = require('./states/iv_state8a');
const iv_state8 = require('./states/iv_state8');
const iv_state9 = require('./states/iv_state9');
const iv_state10 = require('./states/iv_state10');
const iv_state11 = require('./states/iv_state11');
const iv_state12 = require('./states/iv_state12');

/*************************** PLUGIN DEFINITION *************************/
/**********************************************************************/
class MyPluginIncident extends MotorCortex.API.MonoIncident {
    onGetContext() {
        // console.log('got context');
    }

    onProgress(fraction, ms) { // eslint-disable-line no-unused-vars
        const initialValue = this.initialValue;
        const targetValue = this.targetValue;
        const value = initialValue + (targetValue - initialValue) * fraction;
        // console.log(`initialValue of ${this.id}: ${initialValue}`);
        // console.log(`setting value to ${value} for ms = ${ms}`);
        this.element.setAttribute(this.attributeKey, value);
    }

    getScratchValue() { // eslint-disable-line no-unused-vars
        if (this.attributeKey === "alpha") {
            return 1;
        }
        else if (this.attributeKey === "beta") {
            return 2.5;
        }
        else if (this.attributeKey === "compo") {
            return {
                gamma: 3,
                delta: 4,
                epsilon: 5
            }
        }
        else {
            return 0;
        }
    }
}

/*************************** PLUGIN LOADING ***************************/
/**********************************************************************/
const testPlugin0 = {
    npm_name: '@kissmybutton/test-plugin-0',
    name: 'Test Plugin 0',
    incidents: [{
        exportable: MyPluginIncident,
        name: 'MPInc'
    }],
    compositeAttributes: {
        compo: [
            "gamma",
            "delta",
            "epsilon"
        ]
    }
};

const TestPlugin = MotorCortex.loadPlugin(testPlugin0);

/******************************** INCIDENTS ***************************/
/**********************************************************************/
let incident1, cincident1, incident2, cincident2,
    incident3, cincident3, incident4, cincident4;


test(`IV1. Check Incident with initial values on some of its plain attributes`, () => {
    document.body.innerHTML =
        `<div id="clip-container"></div>`;

    myClip = new MotorCortex.Clip({
        html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
        css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
        host: document.querySelector('#clip-container'),
        id: 'my-clip'
    });

    incident1 = new TestPlugin.MPInc({
        animatedAttrs: {
            alpha: 2,
            beta: 2
        },
        initialValues: {
            alpha: 3
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'incident1'
    });

    const res = myClip.addIncident(incident1, 3000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state1.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV2. Check Incident with initial values on some keys of a combo attribute`, () => {
    cincident1 = new TestPlugin.MPInc({
        animatedAttrs: {
            compo: {
                gamma: 7,
                delta: 8
            }
        },
        initialValues: {
            compo: {
                gamma: 0,
                epsilon: 1
            }
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'cincident1'
    });

    const res = myClip.addIncident(cincident1, 3000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state2.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV3. check adding an Incident before an Incident with initialValues (plain)`, () => {
    incident2 = new TestPlugin.MPInc({
        animatedAttrs: {
            alpha: 20,
            beta: 20
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'incident2'
    });

    const res = myClip.addIncident(incident2, 2000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state3.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV4. check adding an Incident before an Incident with initialValues (combo)`, () => {
    cincident2 = new TestPlugin.MPInc({
        animatedAttrs: {
            compo: {
                gamma: 10,
                delta: 11,
                epsilon: 12
            }
        },
        initialValues: {
            compo: {
                delta: 9,
                epsilon: 10
            }
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'cincident2'
    });

    const res = myClip.addIncident(cincident2, 2000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state4.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV5. Check deleting an Incident with no intial values, being on zero index and followed by Incident with initial values (plain attributes)`, () => {
    const res = myClip.removeIncident(incident2);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state5.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV6. Check deleting an Incident with initial values being on zero index and followed by Incident with initial values (combo attributes)`, () => {
    const res = myClip.removeIncident(cincident2);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state6.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV7. Check moving an Incident with no intial values to the zero index, before an Incident with initial values (plain attributes)`, () => {
    const res0 = myClip.addIncident(incident2, 4000);
    expect(res0.result).toBe(true);

    const res = myClip.moveIncident(incident2, 1000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state7.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV8. Check moving an Incident with no intial values to the zero index, before an Incident with initial values (combo attributes)`, () => {
    const res0 = myClip.addIncident(cincident2, 4000);
    expect(res0.result).toBe(true);

    const lha = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTesta = Tester.testLanes(iv_state8a.lanes, lha.lanes, lha.incidentsById);
    expect(lanesTesta).toHaveNoErros();

    const res = myClip.moveIncident(cincident2, 1000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state8.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV9. Check moving an Incident followed by Incident with initial values from 0 index to the middle of the lane (plain attributes)`, () => {
    incident3 = new TestPlugin.MPInc({
        animatedAttrs: {
            alpha: 30,
            beta: 30
        },
        initialValues: {
            beta: 15
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'incident3'
    });

    const res0 = myClip.addIncident(incident3, 5000);
    expect(res0.result).toBe(true);

    const res = myClip.moveIncident(incident2, 4000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state9.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV10. Check moving an Incident followed by Incident with initial values from 0 index to the middle of the lane (combo attributes)`, () => {
    cincident3 = new TestPlugin.MPInc({
        animatedAttrs: {
            compo: {
                gamma: 30
            }
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'cincident3'
    });

    const res0 = myClip.addIncident(cincident3, 5000);
    expect(res0.result).toBe(true);

    const res = myClip.moveIncident(cincident2, 4000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state10.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`IV12. Check moving an Incident of a lane of 4 Incidents from index 2 to index 1  (plain attributes)`, () => {
    incident4 = new TestPlugin.MPInc({
        animatedAttrs: {
            alpha: 40,
            beta: 40
        },
        initialValues: {
            alpha: 39
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'incident4'
    });

    const res0 = myClip.addIncident(incident4, 0);
    expect(res0.result).toBe(true);

    const res = myClip.moveIncident(incident2, 1000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state11.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});

test(`Check moving an Incident of a lane of 4 Incidents from index 2 to index 1  (combo attributes)`, () => {
    cincident4 = new TestPlugin.MPInc({
        animatedAttrs: {
            compo: {
                gamma: 40
            }
        },
        initialValues: {
            compo: {
                epsilon: 39
            }
        }
    }, {
        selector: '#element-1',
        duration: 1000,
        id: 'cincident4'
    });

    const res0 = myClip.addIncident(cincident4, 0);
    expect(res0.result).toBe(true);

    const res = myClip.moveIncident(cincident2, 1000);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(iv_state12.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
});
