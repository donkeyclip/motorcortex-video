/**
 * The goal of this class is to get an original array, provide all the functionality
 * of the Collection class but by keeping the originalArray clean as it was provided.
 */

class SandboxCollection {
    constructor(originalArray) {
        this.originalArray = originalArray;
        this.extraArray = {};
        this.addedKeys = [];
        this.removedKeys = [];
    }

    _hasOwnProperty(key) {
        return Object.prototype.hasOwnProperty.call(this.originalArray, key) ||
            Object.prototype.hasOwnProperty.call(this.extraArray, key)
    }

    _get(key) {
        if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {
            return this.extraArray[key];
        }
        else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {
            return undefined;
        }
        else {
            this.extraArray[key] = Object.assign({}, this.originalArray[key]);
            return this.extraArray[key];
        }
    }

    _set(key, value) {
        this.extraArray[key] = value;
        if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {
            this.addedKeys.push(key);
        }
        const indexOnRemovedKeys = this.removedKeys.indexOf(key);
        if (indexOnRemovedKeys > -1) {
            this.removedKeys.splice(indexOnRemovedKeys, 1);
        }
    }

    _keys() {
        let allKeys = (Object.keys(this.originalArray)).concat(this.addedKeys);
        for (let i = 0; i < this.removedKeys.length; i++) {
            const indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);
            allKeys.splice(indexOnArray, 1);
        }
        return allKeys;
    }

    _delete(key) {
        const indexOnAddedKeys = this.addedKeys.indexOf(key);
        if (indexOnAddedKeys > -1) {
            this.addedKeys.splice(indexOnAddedKeys);
            return delete this.extraArray[key];
        }
        else {
            return this.removedKeys.push(key);
        }
    }

    _export() {
        for (let key in this.extraArray) {
            this.originalArray[key] = this.extraArray[key];
        }

        for (let i = 0; i < this.removedKeys.length; i++) {
            delete this.originalArray[this.removedKeys[i]];
        }

        return this.originalArray;
    }
}

module.exports = SandboxCollection;
