import AttributeChannel from '../Channels/Attribute/AttributeChannel';
import ClipChannel from '../Channels/Clip/ClipsChannel';
import DescriptiveClip from '../DescriptiveIncidents/DescriptiveClip';
import DescriptiveIncident from '../DescriptiveIncidents/DescriptiveIncident';
import { API, Clip, loadPlugin } from '../main';

class MyPluginIncident extends API.MonoIncident {
  onGetContext() {
    // console.log('got context');
  }

  // eslint-disable-next-line no-unused-vars
  onProgress(t) {
    // console.log('progressing ' + t);
  }
}

class MySecondPluginIncident extends API.MonoIncident {
  onGetContext() {
    // console.log('got context');
  }

  // eslint-disable-next-line no-unused-vars
  onProgress(t) {
    // console.log('progressing ' + t);
  }
}

class MyPluginClip extends API.Clip {
  buildTree() {
    // console.log('building tree');
  }
}

const testPlugin = {
  npm_name: '@kissmybutton/test-plugin',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc',
      attributesValidationRules: {
        animatedAttrs: {
          optional: false,
          type: 'object',
          props: {
            test: {
              type: 'number',
            },
          },
        },
      },
    },
    {
      exportable: MySecondPluginIncident,
      name: 'MSPInc',
      attributesValidationRules: {
        animatedAttrs: {
          optional: false,
          type: 'object',
          props: {
            test: {
              type: 'number',
              optional: false,
            },
            testObj: {
              type: 'object',
              optional: true,
              props: {
                msr: {
                  type: 'measurement',
                  units: ['%', 'px'],
                  min: 0,
                  max: 10,
                  optional: true,
                },
              },
            },
          },
        },
      },
    },
    {
      exportable: MyPluginClip,
      name: 'MPClip',
    },
  ],
};

const TestPlugin = loadPlugin(testPlugin);

test('Plugin loading', () => {
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 0,
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  const newMPClip = new TestPlugin.MPClip({
    selector: '.test-host',
  });

  expect(newMPInc instanceof DescriptiveIncident).toBe(true);
  expect(newMPClip instanceof Clip).toBe(true);

  expect(newMPInc.constructor.Incident).toBe(MyPluginIncident);
  expect(newMPInc.constructor.plugin_npm_name).toBe('@kissmybutton/test-plugin');
  expect(newMPInc.constructor.Channel).toBe(AttributeChannel);
  expect(newMPInc.constructor.plugin).toBe('@kissmybutton/test-plugin');

  expect(newMPClip.constructor.Incident).toBe(DescriptiveClip.Incident);
  expect(newMPClip.constructor.plugin_npm_name).toBe('@kissmybutton/self-contained-incidents');
  expect(newMPClip.constructor.Channel).toBe(ClipChannel);
  expect(newMPClip.constructor.plugin).toBe('@kissmybutton/test-plugin');
  expect(newMPInc.attrsValidationRules).toEqual({
    animatedAttrs: {
      type: 'object',
      optional: false,
      props: {
        test: {
          type: 'number',
        },
      },
    },
  });
});

test(`Plugin validation rules`, () => {
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 'alpha',
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  expect(newMPInc.result).toBe(false);
});

test(`Plugin validation rules with valid initialValues`, () => {
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 0,
      },
      initialValues: {
        test: 1,
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  expect(newMPInc instanceof DescriptiveIncident).toBe(true);
});

test(`Plugin validation rules with invalid initialValues`, () => {
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 0,
      },
      initialValues: {
        test: 'alpha',
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  expect(newMPInc.result).toBe(false);
});

test(`Edit incident passing wrong attributes according to validation rules`, () => {
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 0,
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  const res = newMPInc.editAttributes({});
  expect(res.result).toBe(false);
});

test(`Mandatory animatedAttrs to accept null initialValues`, () => {
  const newMPInc = new TestPlugin.MSPInc(
    {
      animatedAttrs: {
        test: 0,
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  expect(newMPInc instanceof DescriptiveIncident).toBe(true);
});

test(`Editing the attributes of an Incident with mandatory animatedAttrs and missing initialValues`, () => {
  const newMPInc = new TestPlugin.MSPInc(
    {
      animatedAttrs: {
        test: 0,
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  const res = newMPInc.editAttributes({
    animatedAttrs: {
      test: 2,
    },
  });

  expect(res.result).toBe(true);
});

test(`Creating an Incident with invalid initialValues`, () => {
  const newMPInc = new TestPlugin.MSPInc(
    {
      animatedAttrs: {
        test: 0,
        testObj: {
          msr: '8px',
        },
      },
      initialValues: {
        testObj: {
          msr: '2',
        },
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  expect(newMPInc.result).toBe(false);
});

test(`Editing the initialValues of an Incident that should not pass`, () => {
  const newMPInc = new TestPlugin.MSPInc(
    {
      animatedAttrs: {
        test: 0,
        testObj: {
          msr: '8px',
        },
      },
      initialValues: {
        testObj: {
          msr: '2px',
        },
      },
    },
    {
      selector: '.test',
      duration: 1000,
    }
  );

  const res = newMPInc.editAttributes({
    animatedAttrs: {
      test: 0,
      testObj: {
        msr: '8px',
      },
    },
    initialValues: {
      testObj: {
        msr: '2',
      },
    },
  });

  expect(res.result).toBe(false);
});

// TODO test attributes editing on Incidents without validation rules
