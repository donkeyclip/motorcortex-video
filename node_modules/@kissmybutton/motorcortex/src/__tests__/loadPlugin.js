const MC = require('../main.js');
const DescriptiveIncident = require('../DescriptiveIncidents/DescriptiveIncident');
const DescriptiveClip = require('../DescriptiveIncidents/DescriptiveClip');
const AttributeChannel = require('../Channels/Attribute/AttributeChannel');
const ClipChannel = require('../Channels/Clip/ClipsChannel');

test('Plugin loading', () => {
    class MyPluginIncident extends MC.API.MonoIncident {
        onGetContext() {
            // console.log('got context');
        }

        onProgress(t) { // eslint-disable-line no-unused-vars
            // console.log('progressing ' + t);
        }
    }

    class MyPluginClip extends MC.API.Clip {
        buildTree() {
            // console.log('building tree');
        }
    }

    const testPlugin = {
        npm_name: '@kissmybutton/test-plugin',
        name: 'Test Plugin',
        incidents: [{
                exportable: MyPluginIncident,
                name: 'MPInc'
            },
            {
                exportable: MyPluginClip,
                name: 'MPClip'
            }
        ]
    };

    const TestPlugin = MC.loadPlugin(testPlugin);

    const newMPInc = new TestPlugin.MPInc({
        animatedAttrs: {
            test: 0
        }
    }, {
        selector: '.test',
        duration: 1000
    });

    const newMPClip = new TestPlugin.MPClip({
        selector: '.test-host'
    });

    expect(newMPInc instanceof DescriptiveIncident).toBe(true);
    expect(newMPClip instanceof MC.Clip).toBe(true);

    expect(newMPInc.constructor.Incident).toBe(MyPluginIncident);
    expect(newMPInc.constructor.plugin_npm_name).toBe('@kissmybutton/test-plugin');
    expect(newMPInc.constructor.Channel).toBe(AttributeChannel);
    expect(newMPInc.constructor.plugin).toBe('Test Plugin');

    expect(newMPClip.constructor.Incident).toBe(DescriptiveClip.Incident);
    expect(newMPClip.constructor.plugin_npm_name).toBe("@kissmybutton/self-contained-incidents");
    expect(newMPClip.constructor.Channel).toBe(ClipChannel);
    expect(newMPClip.constructor.plugin).toBe('Test Plugin');

})
