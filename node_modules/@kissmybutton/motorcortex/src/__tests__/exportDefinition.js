const MC = require('../main.js');

test('Export definition', () => {
    /*********************** HELP PLUGIN DEFINITION *************************/
    /**********************************************************************/
    class MyHelpPluginIncident extends MC.API.MonoIncident {
        onGetContext() {
            // console.log('got context');
        }

        onProgress(fraction, ms) { // eslint-disable-line no-unused-vars
            const initialValue = this.initialValue;
            const targetValue = this.targetValue;
            const value = initialValue + (targetValue - initialValue) * fraction;
            this.element.setAttribute(this.attributeKey, value);
        }

        getScratchValue() { // eslint-disable-line no-unused-vars
            return 0;
        }
    }

    const helpPlugin = {
        npm_name: '@kissmybutton/help-plugin',
        name: 'Help Plugin',
        incidents: [{
            exportable: MyHelpPluginIncident,
            name: 'MyHelpPluginIncident'
        }],
        compositeAttributes: {
            compo: [
                "test3",
                "test4"
            ]
        }
    };

    const HelpPlugin = MC.loadPlugin(helpPlugin);

    /*************************** PLUGIN DEFINITION *************************/
    /**********************************************************************/
    class MyPluginIncident extends MC.API.MonoIncident {
        onGetContext() {
            // console.log('got context');
        }

        onProgress(fraction, ms) { // eslint-disable-line no-unused-vars
            const initialValue = this.initialValue;
            const targetValue = this.targetValue;
            const value = initialValue + (targetValue - initialValue) * fraction;
            // console.log(`initialValue of ${this.id}: ${initialValue}`);
            // console.log(`setting value to ${value} for ms = ${ms}`);
            this.element.setAttribute(this.attributeKey, value);
        }

        getScratchValue() { // eslint-disable-line no-unused-vars
            return 0;
        }
    }

    class MyPluginClip extends MC.API.Clip {
        buildTree() {
            const passiveIncident_1 = new HelpPlugin.MyHelpPluginIncident({ animatedAttrs: { test: 1000 } }, { id: 'descriptive-incident-1', selector: '#my-test-div', duration: 1000 });
            const passiveIncident_2 = new HelpPlugin.MyHelpPluginIncident({ animatedAttrs: { test: 2000 } }, { id: 'descriptive-incident-2', selector: '#my-test-div-2', duration: 1000 });
            this.addIncident(passiveIncident_1, 1000); // den exei
            this.addIncident(passiveIncident_2, 2000); // exei
        }

        get html() {
            return `
            <div>
                <div class="sub-class" id="my-test-div"></div>
                <div class="sub-class" id="my-test-div-2"></div>
            <div>`;
        }

        get css() {
            return '';
        }
    }

    /*************************** PLUGIN LOADING ***************************/
    /**********************************************************************/
    const testPlugin = {
        npm_name: '@kissmybutton/test-plugin',
        name: 'Test Plugin',
        incidents: [{
                exportable: MyPluginIncident,
                name: 'MPInc'
            },
            {
                exportable: MyPluginClip,
                name: 'MPClip'
            }
        ]
    };

    const TestPlugin = MC.loadPlugin(testPlugin);

    /******************** INCIDENTS INSTANTIATION *************************/
    /**********************************************************************/
    const newMPInc = new TestPlugin.MPInc({
        animatedAttrs: {
            test: 1000
        }
    }, {
        selector: '.my-class',
        duration: 1000,
        id: 'newMPInc'
    });

    const newSubMPInc = new TestPlugin.MPInc({
        animatedAttrs: {
            test2: 1000
        }
    }, {
        selector: '.sub-class',
        duration: 1000,
        id: 'newSubMPInc'
    });

    const newMPClip = new TestPlugin.MPClip({
        selector: '.class-1',
        id: 'newMPClip'
    });


    /*********************** ROOT CLIP DEFINITION *************************/
    /**********************************************************************/
    document.body.innerHTML =
        `<div id="clip-container"></div>`;

    const myClip = new MC.Clip({
        html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" test="0"></div>
                <div id="element-2" class="my-class" test="0"></div>
                <div id="element-3" class="class-1"></div>
                <div id="element-3-1" class="class-1"></div>
            </div>`,
        css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
        host: document.querySelector('#clip-container'),
        id: 'my-clip'
    });

    myClip.addIncident(newMPInc, 0);
    myClip.addIncident(newMPClip, 0);
    newMPClip.addIncident(newSubMPInc, 1000);


    /*************************** EXPECTATIONS *****************************/
    /**********************************************************************/
    const exported = myClip.exportDefinition();
    expect(exported.plugin_npm_name).toBe('@kissmybutton/self-contained-incidents');
    expect(exported.ClassName).toBe('Clip');
    expect(exported.props.id).toBe('my-clip');
    expect(Object.keys(exported.incidents)).toEqual(['newMPInc', 'newMPClip']);

    expect(exported.incidents.newMPInc.id).toBe('newMPInc');
    expect(exported.incidents.newMPInc.position).toBe(0);
    expect(exported.incidents.newMPInc.leaf.plugin_npm_name).toBe('@kissmybutton/test-plugin');
    expect(exported.incidents.newMPInc.leaf.ClassName).toEqual('MPInc');
    expect(exported.incidents.newMPInc.leaf.attrs).toEqual({
        animatedAttrs: {
            test: 1000
        }
    });
    expect(exported.incidents.newMPInc.leaf.props).toEqual({
        selector: '.my-class',
        duration: 1000,
        id: 'newMPInc'
    });

    expect(exported.incidents.newMPClip.id).toBe('newMPClip');
    expect(exported.incidents.newMPClip.position).toBe(0);
    expect(exported.incidents.newMPClip.leaf.plugin_npm_name).toBe('@kissmybutton/self-contained-incidents');
    expect(exported.incidents.newMPClip.leaf.ClassName).toEqual('MPClip');
    expect(exported.incidents.newMPClip.leaf.attrs).toEqual({});
    expect(exported.incidents.newMPClip.leaf.props).toEqual({
        selector: '.class-1',
        id: 'newMPClip'
    });

    expect(Object.keys(exported.incidents.newMPClip.leaf.incidents)).toEqual(['newSubMPInc']);

    expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.id).toBe('newSubMPInc');
    expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.position).toBe(1000);
    expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.plugin_npm_name).toBe('@kissmybutton/test-plugin');
    expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.ClassName).toEqual('MPInc');
    expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.attrs).toEqual({
        animatedAttrs: {
            test2: 1000
        }
    });
    expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.props).toEqual({
        selector: '.sub-class',
        duration: 1000,
        id: 'newSubMPInc'
    });
})
