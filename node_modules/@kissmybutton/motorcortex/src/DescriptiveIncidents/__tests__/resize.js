const resizeState_1 = require('./states/resize_state_1');
const resizeState_2 = require('./states/resize_state_2');
const resizeState_3 = require('./states/resize_state_3');
const resizeState_4 = require('./states/resize_state_4');
const resizeState_5 = require('./states/resize_state_5');
const resizeState_6 = require('./states/resize_state_6');
const resizeState_7 = require('./states/resize_state_7');
const resizeState_8 = require('./states/resize_state_8');
const resizeState_9 = require('./states/resize_state_9');

const resizeState_5_sub = require('./states/resize_state_5-sub');
const resizeState_6_sub = require('./states/resize_state_6-sub');
const resizeState_7_sub = require('./states/resize_state_7-sub');
const resizeState_9_sub = require('./states/resize_state_9-sub');

const TesterClass = require('../../../tester/Tester');
const Tester = new TesterClass();

/******************* DESCRIPTIVE INCIDENT ********************/
const DI = require('../DescriptiveIncident');
const DG = require('../DescriptiveGroup');
const DC = require('../DescriptiveClip');
let myClip;

const di = new DI({
    animatedAttrs: { alpha: 2 }
}, {
    duration: 1000,
    id: 'desc-inc-1',
    selector: '.my-class'
});

const dg = new DG({ id: 'desc-group-1' });
const dg2 = new DG({ id: 'desc-group-2' });

const di2 = new DI({
    animatedAttrs: {
        alpha: 2
    }
}, {
    selector: '.my-class',
    duration: 3000,
    id: 'desc-inc-2'
});


// CONSTRUCT THE CLIP AS INCIDENT AND PUT AN INCIDENT TO IT ON MS 1000
const casi = new DC({
    html: `
            <div id="my-root-div-2">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.clip-host',
    id: 'casi'
});

const casiIncident = new DI({
    animatedAttrs: {
        alpha: 3
    }
}, {
    id: 'casi-incident',
    selector: '.my-class',
    duration: 2000
});

casi.addIncident(casiIncident, 1000);
// END OF CONSTRUCT THE CLIP AS INCIDENT AND PUT AN INCIDENT TO IT ON MS 1000


test('Resize a Descriptive Incident outside of a Clip should return true and alter its duration', () => {
    const res = di.resize(2000);
    expect(res).toEqual({
        result: true
    });

    expect(di.duration).toBe(2000);
});

test(`Try to resize a DescriptiveIncident outside of a Clip by providing the exact same duration should return true but
    should also not be processed`, () => {
    const res = di.resize(2000);

    expect(res.result).toBe(true);
    expect(res.meta.unprocessed).toBe(true);

    expect(di.duration).toBe(2000);
});

test('Try to resize a DescriptiveIncident outside of a Clip by providing negative (or zero) size', () => {
    const res = di.resize(-1);

    expect(res.result).toBe(false);
    expect(res.reason).toBe('Size must always be > 0');
});


// /******************* DESCRIPTIVE GROUP ********************/

test('Resize a Descriptive tree outside of a Clip including one Descriptive Incident', () => {
    dg.addIncident(di, 1000);
    const res = dg.resize(1500);
    expect(res.result).toBe(true);

    const realTreeTest = Tester.testTree(resizeState_1.descriptiveTree, dg);
    expect(realTreeTest).toHaveNoErros();
});

test('Resize a full Descriptive tree outside of a Clip', () => {
    dg2.addIncident(di2, 800);
    dg.addIncident(dg2, 3000);

    const res = dg.resize(3400);
    expect(res.result).toBe(true);

    const realTreeTest = Tester.testTree(resizeState_2.descriptiveTree, dg);
    expect(realTreeTest).toHaveNoErros();
});

test('Resize a Descriptive Incident affecting the duration of its parents, outside of a Clip', () => {
    const res = di2.resize(5000);
    expect(res.result).toBe(true);

    const realTreeTest = Tester.testTree(resizeState_3.descriptiveTree, dg);
    expect(realTreeTest).toHaveNoErros();
});

test('Resize a Group within a real Clip', () => {
    document.body.innerHTML =
        `<div id="clip-container"></div>`;

    myClip = new DC({
        html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
                <div id="element-3" class="class-1" data-motorcortex2-id="class-1"></div>
                <div class="clip-host" data-motorcortex2-id="clip-host-1"></div>
                <div class="clip-host" data-motorcortex2-id="clip-host-2"></div>
            </div>`,
        css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
        host: document.querySelector('#clip-container'),
        id: 'my-clip'
    });


    myClip.addIncident(dg, 1000);
    const res = dg.resize(3450);
    expect(res.result).toBe(true);

    const lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    const descTreeTest = Tester.testTree(resizeState_4.descriptiveTree, myClip);
    const realTreeTest = Tester.testTree(resizeState_4.realTree, myClip.realClip);
    const lanesTest = Tester.testLanes(resizeState_4.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
});

test('Resize an Incident in a way that it conflicts. The resize should be rejected', () => {
    const res = di.resize(4000);
    expect(res.result).toBe(false);
    expect(res.errors.length).toBe(2);
    expect(res.errors[0].type).toBe('anauthorised overlapping animations on the same element');
    expect(res.errors[1].type).toBe('anauthorised overlapping animations on the same element');

    const lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    const descTreeTest = Tester.testTree(resizeState_4.descriptiveTree, myClip);
    const realTreeTest = Tester.testTree(resizeState_4.realTree, myClip.realClip);
    const lanesTest = Tester.testLanes(resizeState_4.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
});


test('Resize a Clip which contains Clips as Inicdents', () => {
    const res = myClip.addIncident(casi, 1000);
    expect(res.result).toBe(true);

    // ROOT CLIP TESTS
    const lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    let descTreeTest = Tester.testTree(resizeState_5.descriptiveTree, myClip);
    let realTreeTest = Tester.testTree(resizeState_5.realTree, myClip.realClip);
    let lanesTest = Tester.testLanes(resizeState_5.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    // SUBCLIP TESTS
    const s_lh = casi.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    let sub_descTreeTest = Tester.testTree(resizeState_5_sub.descriptiveTree, casi);
    let sub_realTreeTest = Tester.testTree(resizeState_5_sub.realTree, casi.realClip);
    let sub_lanesTest = Tester.testLanes(resizeState_5_sub.lanes, s_lh.lanes, s_lh.incidentsById);
    expect(sub_descTreeTest).toHaveNoErros();
    expect(sub_realTreeTest).toHaveNoErros();
    expect(sub_lanesTest).toHaveNoErros();

    // RESIZE
    const res2 = myClip.resize(890);
    expect(res2.result).toBe(true);

    // ROOT CLIP TESTS AFTER RESIZE
    descTreeTest = Tester.testTree(resizeState_6.descriptiveTree, myClip);
    realTreeTest = Tester.testTree(resizeState_6.realTree, myClip.realClip);
    lanesTest = Tester.testLanes(resizeState_6.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    // SUBCLIP TESTS
    sub_descTreeTest = Tester.testTree(resizeState_6_sub.descriptiveTree, casi);
    sub_realTreeTest = Tester.testTree(resizeState_6_sub.realTree, casi.realClip);
    sub_lanesTest = Tester.testLanes(resizeState_6_sub.lanes, s_lh.lanes, s_lh.incidentsById);
    expect(sub_descTreeTest).toHaveNoErros();
    expect(sub_realTreeTest).toHaveNoErros();
    expect(sub_lanesTest).toHaveNoErros();
});

test(`Resize directly a Clip as Incident belonging to a hosted clip. Expect to pass`, () => {
    const res = casi.resize(1200);
    expect(res.result).toBe(true);

    // ROOT CLIP TESTS
    const lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    const descTreeTest = Tester.testTree(resizeState_7.descriptiveTree, myClip);
    const realTreeTest = Tester.testTree(resizeState_7.realTree, myClip.realClip);
    const lanesTest = Tester.testLanes(resizeState_7.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    // SUBCLIP TESTS
    const s_lh = casi.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    const sub_descTreeTest = Tester.testTree(resizeState_7_sub.descriptiveTree, casi);
    const sub_realTreeTest = Tester.testTree(resizeState_7_sub.realTree, casi.realClip);
    const sub_lanesTest = Tester.testLanes(resizeState_7_sub.lanes, s_lh.lanes, s_lh.incidentsById);
    expect(sub_descTreeTest).toHaveNoErros();
    expect(sub_realTreeTest).toHaveNoErros();
    expect(sub_lanesTest).toHaveNoErros();
});

test(`Resize a Group containing a Clip as Incident. Expect the resize to pass`, () => {
    myClip.removeIncident('casi');
    dg.addIncident(casi, 0);

    // ROOT CLIP TESTS
    const lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    let descTreeTest = Tester.testTree(resizeState_8.descriptiveTree, myClip);
    let realTreeTest = Tester.testTree(resizeState_8.realTree, myClip.realClip);
    let lanesTest = Tester.testLanes(resizeState_8.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    // SUBCLIP TESTS
    const s_lh = casi.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
    let sub_descTreeTest = Tester.testTree(resizeState_7_sub.descriptiveTree, casi);
    let sub_realTreeTest = Tester.testTree(resizeState_7_sub.realTree, casi.realClip);
    let sub_lanesTest = Tester.testLanes(resizeState_7_sub.lanes, s_lh.lanes, s_lh.incidentsById);
    expect(sub_descTreeTest).toHaveNoErros();
    expect(sub_realTreeTest).toHaveNoErros();
    expect(sub_lanesTest).toHaveNoErros();

    // RESIZE
    const res = dg.resize(2400);
    expect(res.result).toBe(true);

    // ROOT CLIP TESTS AFTER RESIZE
    descTreeTest = Tester.testTree(resizeState_9.descriptiveTree, myClip);
    realTreeTest = Tester.testTree(resizeState_9.realTree, myClip.realClip);
    lanesTest = Tester.testLanes(resizeState_9.lanes, lh.lanes, lh.incidentsById);
    expect(descTreeTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    // SUBCLIP TESTS AFTER RESIZE
    sub_descTreeTest = Tester.testTree(resizeState_9_sub.descriptiveTree, casi);
    sub_realTreeTest = Tester.testTree(resizeState_9_sub.realTree, casi.realClip);
    sub_lanesTest = Tester.testLanes(resizeState_9_sub.lanes, s_lh.lanes, s_lh.incidentsById);
    expect(sub_descTreeTest).toHaveNoErros();
    expect(sub_realTreeTest).toHaveNoErros();
    expect(sub_lanesTest).toHaveNoErros();
});
