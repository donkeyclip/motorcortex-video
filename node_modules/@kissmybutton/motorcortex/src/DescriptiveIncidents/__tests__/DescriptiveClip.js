import TesterClass from '../../../tester/Tester';
import { API, loadPlugin } from '../../main';
import DC from '../DescriptiveClip';
import DG from '../DescriptiveGroup';
import { descriptiveTree as descriptiveTree10, lanes as lanes10, realTree as realTree10 } from './states/dc10';
import { descriptiveTree as descriptiveTree11, lanes as lanes11, realTree as realTree11 } from './states/dc11';
import { descriptiveTree as descriptiveTree12, lanes as lanes12, realTree as realTree12 } from './states/dc12';
import { descriptiveTree as descriptiveTree13, lanes as lanes13, realTree as realTree13 } from './states/dc13';
import { descriptiveTree as descriptiveTree14, lanes as lanes14, realTree as realTree14 } from './states/dc14';
import { descriptiveTree as descriptiveTree15, lanes as lanes15, realTree as realTree15 } from './states/dc15';
import { descriptiveTree as descriptiveTree16, lanes as lanes16, realTree as realTree16 } from './states/dc16';
import { descriptiveTree as descriptiveTree17, lanes as lanes17, realTree as realTree17 } from './states/dc17';
import { descriptiveTree as descriptiveTree18, lanes as lanes18, realTree as realTree18 } from './states/dc18';
import { descriptiveTree as descriptiveTree19, lanes as lanes19, realTree as realTree19 } from './states/dc19';
import { descriptiveTree as descriptiveTree1, lanes as lanes1, realTree as realTree1 } from './states/dc2';
import { descriptiveTree as descriptiveTree20, lanes as lanes20, realTree as realTree20 } from './states/dc20';
import { descriptiveTree as descriptiveTree3, lanes as lanes3, realTree as realTree3 } from './states/dc3';
import { descriptiveTree as descriptiveTree4, lanes as lanes4, realTree as realTree4 } from './states/dc4';
import { descriptiveTree as descriptiveTree5, lanes as lanes5, realTree as realTree5 } from './states/dc5';
import { descriptiveTree as descriptiveTree7, lanes as lanes7, realTree as realTree7 } from './states/dc7';
import { descriptiveTree as descriptiveTree8, lanes as lanes8, realTree as realTree8 } from './states/dc8';
import { descriptiveTree as descriptiveTree9, lanes as lanes9, realTree as realTree9 } from './states/dc9';

const Tester = new TesterClass();

const dg = new DG({ id: 'test-group-1' });

/** ************************* PLUGIN DEFINITION ************************ */
/** ******************************************************************* */
class MyPluginIncident extends API.MonoIncident {
  onGetContext() {
    // console.log('got context');
  }

  onProgress(fraction) {
    // eslint-disable-line no-unused-vars
    const { initialValue } = this;
    const { targetValue } = this;
    const value = initialValue + (targetValue - initialValue) * fraction;
    // console.log(`initialValue of ${this.id}: ${initialValue}`);
    // console.log(`setting value to ${value} for ms = ${ms}`);
    this.element.setAttribute(this.attributeKey, value);
  }

  getScratchValue() {
    // eslint-disable-line no-unused-vars
    if (this.attributeKey === 'alpha') {
      return 1;
    }

    return 0;
  }
}

/** ************************* PLUGIN LOADING ************************** */
/** ******************************************************************* */
const testPlugin0 = {
  npm_name: '@kissmybutton/test-plugin-0',
  name: 'Test Plugin 0',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc'
    }
  ]
};

const TestPlugin0 = loadPlugin(testPlugin0);
const DI = TestPlugin0.MPInc;

const myGroup = new DG({ id: 'my-group' });
let myClip;
let clone;
let cfdHost;

test('DC1. creating a real clip', () => {
  document.body.innerHTML = `<div id="clip-container"></div>
        <div id="clip-clone-container"></div>
        <div id="clip-from-definition-container"></div>`;

  cfdHost = document.getElementById('clip-from-definition-container');

  myClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });

  clone = myClip.paste(document.getElementById('clip-clone-container'));
  const res = myClip.addIncident(myGroup, 200);

  expect(res).toEqual({
    result: true
  });
});

const testIncident2 = new DI(
  {
    attribute: 'value',
    animatedAttrs: {
      alpha: 2,
      beta: 3
    }
  },
  {
    selector: '#element-1',
    duration: 2000,
    id: 'test-incident-2'
  }
);

const testIncident3 = new DI(
  {
    attribute: 'value',
    animatedAttrs: {
      alpha: 3
    }
  },
  {
    selector: '#element-1',
    duration: 1000,
    id: 'test-incident-3'
  }
);

const testIncident4 = new DI(
  {
    attribute: 'value',
    animatedAttrs: {
      alpha: 3
    }
  },
  {
    selector: '#element-2',
    duration: 1000,
    id: 'test-incident-4'
  }
);

const testIncident5 = new DI(
  {
    attribute: 'value',
    animatedAttrs: {
      alpha: 5,
      beta: 5
    }
  },
  {
    selector: '.my-class',
    duration: 200,
    delay: 300,
    hiatus: 500,
    id: 'test-incident-5'
  }
);

// PLUGIN DEFINITION
class MyPluginGroup extends API.Group {
  buildTree() {
    for (let i = 0; i < this.attrs.number; i++) {
      const di = new DI(
        {
          animatedAttrs: {
            alpha: i % 2 === 0 ? 2 : 0
          }
        },
        {
          duration: 100,
          id: `${this.id}_${i}`
        }
      );
      this.addIncident(di, i * 100);
    }
  }
}

const testPlugin = {
  npm_name: '@kissmybutton/test-plugin',
  name: 'Test Plugin',
  incidents: [
    {
      exportable: MyPluginGroup,
      name: 'MyPluginGroup'
    }
  ]
};

const TestPlugin = loadPlugin(testPlugin);

const plugin_dg = new TestPlugin.MyPluginGroup(
  {
    number: 4
  },
  {
    selector: '#element-1',
    id: 'my-plugin-group'
  }
);
// END OF PLUGIN DEFINITION

test('DC2. add a tree consisting of DescriptiveGroups and DescriptiveIncidents on the real tree of the Clip', () => {
  const di = new DI(
    {
      attribute: 'value',
      animatedAttrs: {
        alpha: 1.1,
        beta: 2.2
      }
    },
    {
      selector: '.my-class',
      duration: 2000,
      id: 'test-incident-1'
    }
  );

  dg.addIncident(di, 1000);
  const res = myClip.addIncident(dg, 1000);

  const testRes = Tester.testTree(descriptiveTree1, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes1, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree1, myClip.realClip);

  expect(res).toEqual({
    result: true
  });

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);

  const cfd_testRes = Tester.testTree(descriptiveTree1, ClipFromDefinition);

  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes1, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree1, ClipFromDefinition.realClip);

  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC3. add a conflicting tree consisting of DescriptiveGroups and DescriptiveIncidents on the real tree of the Clip', () => {
  const testRes = Tester.testTree(descriptiveTree1, myClip);
  const realTreeTest = Tester.testTree(realTree1, myClip.realClip);

  expect(testRes.length).toEqual(0);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes1, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test(`DC3. add a tree consisting of DescriptiveIncidents on the real tree of the Clip
    that will inherit the initial values from the previous Incidents on the lanes`, () => {
  const res = myClip.addIncident(testIncident2, 5000);

  const testRes = Tester.testTree(descriptiveTree3, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes3, lh.lanes, lh.incidentsById);
  // const realTreeTest = Tester.testTree(dc3.realTree, myClip.realClip);

  expect(res).toEqual({
    result: true
  });

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);

  const cfd_testRes = Tester.testTree(descriptiveTree3, ClipFromDefinition);

  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes3, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree3, ClipFromDefinition.realClip);

  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test(`DC4. add a tree consisting of DescriptiveIncidents on the real tree of the Clip
    that will inherit the initial values from the previous Incidents on the lanes and
    affect the initial values of the following`, () => {
  const res = myClip.addIncident(testIncident3, 4000);

  const testRes = Tester.testTree(descriptiveTree4, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes4, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree4, myClip.realClip);
  expect(res).toEqual({
    result: true
  });

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree4, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes4, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree4, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test(`DC5. add a conflicting Incident on a DescriptiveGroup of the Descriptive Tree that already belongs
to a real tree`, () => {
  const di = new DI(
    {
      attribute: 'value',
      animatedAttrs: {
        alpha: 3
      }
    },
    {
      selector: '#element-2',
      duration: 1000,
      id: 'test-incident-4'
    }
  );

  const res = dg.addIncident(di, 2000);
  expect(res.result).toEqual(false);

  const testRes = Tester.testTree(descriptiveTree4, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes4, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree4, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test(`DC5.1, edit the duration of an Incident in a way that is conflicting. The edit should be rejected
and the state should remain the same`, () => {
  const res = testIncident3.editProperties({
    selector: '#element-1',
    duration: 2000,
    id: 'test-incident-3'
  });

  expect(res.result).toBe(false);
  expect(res.errors[0].type).toBe('unauthorised, overlapping incidents on the same element');

  const testRes = Tester.testTree(descriptiveTree4, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes4, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree4, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test(`DC6. add a non-conflicting Incident on a DescriptiveGroup of the Descriptive Tree that already belongs
to a real tree`, () => {
  const res = dg.addIncident(testIncident4, 3000);
  expect(res.result).toEqual(true);

  const testRes = Tester.testTree(descriptiveTree5, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes5, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree5, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree5, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes5, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree5, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test(`DC6.1, edit the selector of an Incident in a way that is conflicting. The edit should be rejected
and the state should remain the same`, () => {
  const res = testIncident4.editProperties({
    selector: '#element-1',
    duration: 1000,
    id: 'test-incident-4'
  });

  expect(res.result).toBe(false);
  expect(res.errors[0].type).toBe('unauthorised, overlapping incidents on the same element');

  const testRes = Tester.testTree(descriptiveTree5, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes5, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree5, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('DC7. edit the position of an Incident', () => {
  const res = dg.moveIncident(testIncident4, 5000);

  expect(res).toEqual({
    result: true
  });

  const testRes = Tester.testTree(descriptiveTree7, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes7, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree7, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree7, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes7, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree7, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC8. try to make a conflicting edit the position of an Incident', () => {
  const res = dg.moveIncident('test-incident-4', 1000);
  expect(res.result).toBe(false);

  const testRes = Tester.testTree(descriptiveTree7, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes7, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree7, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('DC8. try to edit the position of an Incident providing a negative', () => {
  const res = dg.moveIncident('test-incident-4', -1);
  expect(res.result).toBe(false);

  const testRes = Tester.testTree(descriptiveTree7, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes7, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree7, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('DC9. move an Incident by changing its relative position with other Incidents of the lane', () => {
  const res = dg.moveIncident('test-incident-1', 7000);
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree8, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes8, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree8, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree8, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes8, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree8, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC10. remove an Incident from the tree', () => {
  const res = dg.removeIncident(testIncident4);
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree9, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes9, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree9, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree9, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes9, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree9, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC11. remove an Incident that is the first on lane', () => {
  const res = myClip.removeIncident('test-incident-3');
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree10, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes10, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree10, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree10, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes10, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree10, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC12. edit the attributes of an Incident in a way that is accepted', () => {
  const res = testIncident2.editAttributes({
    attribute: 'value',
    animatedAttrs: {
      gamma: 2
    }
  });
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree11, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes11, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree11, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree11, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes11, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree11, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC13. edit the properties of an Incident in a way that is accepted', () => {
  const res = testIncident2.editProperties({
    selector: '#element-1',
    duration: 6000,
    id: 'test-incident-2'
  });
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree12, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes12, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree12, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree12, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes12, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree12, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test(`DC14. Edit the attributes of a Descriptive Group exposed by a plugin. Expect the
edit not to pass due to conflicts`, () => {
  const res = myClip.addIncident(plugin_dg, 4000);
  expect(res.result).toBe(true);

  let testRes = Tester.testTree(descriptiveTree13, myClip);

  let lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  let lanesTest = Tester.testLanes(lanes13, lh.lanes, lh.incidentsById);
  let realTreeTest = Tester.testTree(realTree13, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const editRes = plugin_dg.editAttributes({ number: 44 });
  expect(editRes.result).toBe(false);

  testRes = Tester.testTree(descriptiveTree13, myClip);

  lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  lanesTest = Tester.testLanes(lanes13, lh.lanes, lh.incidentsById);
  realTreeTest = Tester.testTree(realTree13, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree13, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes13, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree13, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test(`DC15. Edit the attributes of a Descriptive Group exposed by a plugin. Expect the
edit to pass`, () => {
  const res = plugin_dg.editAttributes({ number: 3 });
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree14, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes14, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree14, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree14, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes14, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree14, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC16. Edit an Incident adding to it initial values. The addition should pass', () => {
  const res = testIncident2.editAttributes({
    attribute: 'value',
    animatedAttrs: {
      gamma: 2
    },
    initialValues: {
      gamma: 3
    }
  });
  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree15, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes15, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree15, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree15, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes15, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree15, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC17. an Incident with delay, hiatus and repeats should have derived duration', () => {
  myClip.moveIncident(myGroup, 0);
  myGroup.addIncident(testIncident5, 0);

  const testRes = Tester.testTree(descriptiveTree16, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes16, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree16, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree16, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes16, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree16, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC18. edit delay on Incident in a non-allowed way', () => {
  const res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 3400,
    hiatus: 500,
    id: 'test-incident-5'
  });

  expect(res.result).toBe(false);

  const testRes = Tester.testTree(descriptiveTree16, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes16, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree16, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('DC19. edit delay on Incident in an allowed way', () => {
  const res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 500,
    id: 'test-incident-5'
  });

  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree17, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes17, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree17, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree17, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes17, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree17, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC20. edit hiatus on Incident (allowed)', () => {
  const res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 400,
    id: 'test-incident-5'
  });

  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree18, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes18, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree18, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree18, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes18, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree18, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC21. edit repeats on Incident (not allowed)', () => {
  const res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 400,
    repeats: 12,
    id: 'test-incident-5'
  });

  expect(res.result).toBe(false);

  const testRes = Tester.testTree(descriptiveTree18, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes18, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree18, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('DC22. edit repeats on Incident (allowed)', () => {
  const res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 400,
    repeats: 3,
    id: 'test-incident-5'
  });

  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree19, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes19, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree19, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree19, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes19, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree19, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC23. resize Incident with delay, hiatus & repeats (not allowed)', () => {
  const res = testIncident5.resize(4800);

  expect(res.result).toBe(false);

  const testRes = Tester.testTree(descriptiveTree19, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes19, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree19, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('DC23. resize Incident with delay, hiatus & repeats (allowed)', () => {
  const res = testIncident5.resize(1200);

  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree20, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes20, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree20, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree20, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes20, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree20, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC24. resize a group containing an Incident with delay, hiatus & repeats', () => {
  const res = myGroup.resize(2400);

  expect(res.result).toBe(true);

  const testRes = Tester.testTree(descriptiveTree19, myClip);

  const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const lanesTest = Tester.testLanes(lanes19, lh.lanes, lh.incidentsById);
  const realTreeTest = Tester.testTree(realTree19, myClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();

  const definition = myClip.exportLiveDefinition();
  definition.props.host = cfdHost;
  const ClipFromDefinition = API.clipFromDefinition(definition);
  const cfd_testRes = Tester.testTree(descriptiveTree19, ClipFromDefinition);
  const cfd_lh = ClipFromDefinition.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  const cfd_lanesTest = Tester.testLanes(lanes19, cfd_lh.lanes, cfd_lh.incidentsById);
  const cfd_realTreeTest = Tester.testTree(realTree19, ClipFromDefinition.realClip);
  expect(cfd_testRes).toHaveNoErros();
  expect(cfd_lanesTest).toHaveNoErros();
  expect(cfd_realTreeTest).toHaveNoErros();
});

test('DC25. Clone Clip', () => {
  clone.onProgress(4150 / 11000, 4150);

  // console.log(ccopyContext);
  // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);
  const ccopyContext = myClip.realClip.instantiatedCopiesContexts[clone.id];
  expect(parseInt(ccopyContext.getElementByMCID('my-class-1').getAttribute('alpha'))).toBe(1);
});
