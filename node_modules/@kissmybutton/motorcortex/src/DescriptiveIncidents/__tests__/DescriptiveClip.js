const DC = require('../DescriptiveClip');
const DG = require('../DescriptiveGroup');
const TesterClass = require('../../../tester/Tester');
const Tester = new TesterClass();
const dc2 = require('./states/dc2');
const dc3 = require('./states/dc3');
const dc4 = require('./states/dc4');
const dc5 = require('./states/dc5');
const dc7 = require('./states/dc7');
const dc8 = require('./states/dc8');
const dc9 = require('./states/dc9');
const dc10 = require('./states/dc10');
const dc11 = require('./states/dc11');
const dc12 = require('./states/dc12');
const dc13 = require('./states/dc13');
const dc14 = require('./states/dc14');
const dc15 = require('./states/dc15');
const dc16 = require('./states/dc16');
const dc17 = require('./states/dc17');
const dc18 = require('./states/dc18');
const dc19 = require('./states/dc19');
const dc20 = require('./states/dc20');
const MC = require('../../main');

const dg = new DG({ id: 'test-group-1' });

/*************************** PLUGIN DEFINITION *************************/
/**********************************************************************/
class MyPluginIncident extends MC.API.MonoIncident {
    onGetContext() {
        // console.log('got context');
    }

    onProgress(fraction, ms) { // eslint-disable-line no-unused-vars
        const initialValue = this.initialValue;
        const targetValue = this.targetValue;
        const value = initialValue + (targetValue - initialValue) * fraction;
        // console.log(`initialValue of ${this.id}: ${initialValue}`);
        // console.log(`setting value to ${value} for ms = ${ms}`);
        this.element.setAttribute(this.attributeKey, value);
    }

    getScratchValue() { // eslint-disable-line no-unused-vars
        if (this.attributeKey === "alpha") {
            return 1;
        }
        else {
            return 0;
        }
    }
}

/*************************** PLUGIN LOADING ***************************/
/**********************************************************************/
const testPlugin0 = {
    npm_name: '@kissmybutton/test-plugin-0',
    name: 'Test Plugin 0',
    incidents: [{
        exportable: MyPluginIncident,
        name: 'MPInc'
    }]
};

const TestPlugin0 = MC.loadPlugin(testPlugin0);
const DI = TestPlugin0.MPInc;

const myGroup = new DG({ id: 'my-group' });
let myClip, clone;

test('DC1. creating a real clip', () => {
    document.body.innerHTML =
        `<div id="clip-container"></div>
        <div id="clip-clone-container"></div>`;

    myClip = new DC({
        html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
        css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
        host: document.querySelector('#clip-container'),
        id: 'my-clip'
    });

    clone = myClip.paste(document.getElementById('clip-clone-container'));
    const res = myClip.addIncident(myGroup, 200);

    expect(res).toEqual({
        result: true
    });
});

const testIncident2 = new DI({
    attribute: 'value',
    animatedAttrs: {
        alpha: 2,
        beta: 3
    }
}, {
    selector: '#element-1',
    duration: 2000,
    id: 'test-incident-2'
});

const testIncident3 = new DI({
    attribute: 'value',
    animatedAttrs: {
        alpha: 3
    }
}, {
    selector: '#element-1',
    duration: 1000,
    id: 'test-incident-3'
});

const testIncident4 = new DI({
    attribute: 'value',
    animatedAttrs: {
        alpha: 3
    }
}, {
    selector: '#element-2',
    duration: 1000,
    id: 'test-incident-4'
});

const testIncident5 = new DI({
    attribute: 'value',
    animatedAttrs: {
        alpha: 5,
        beta: 5
    }
}, {
    selector: '.my-class',
    duration: 200,
    delay: 300,
    hiatus: 500,
    id: 'test-incident-5'
});

// PLUGIN DEFINITION
class MyPluginGroup extends MC.API.Group {
    buildTree() {
        for (let i = 0; i < this.attrs.number; i++) {
            const di = new DI({
                animatedAttrs: {
                    alpha: i % 2 === 0 ? 2 : 0
                }
            }, {
                duration: 100,
                id: this.id + '_' + i
            });
            this.addIncident(di, i * 100);
        }
    }
}

const testPlugin = {
    npm_name: '@kissmybutton/test-plugin',
    name: 'Test Plugin',
    incidents: [{
        exportable: MyPluginGroup,
        name: 'MyPluginGroup'
    }]
};

const TestPlugin = MC.loadPlugin(testPlugin);

const plugin_dg = new TestPlugin.MyPluginGroup({
    number: 4
}, {
    selector: "#element-1",
    id: 'my-plugin-group'
});
// END OF PLUGIN DEFINITION

test('DC2. add a tree consisting of DescriptiveGroups and DescriptiveIncidents on the real tree of the Clip', () => {
    const di = new DI({
        attribute: 'value',
        animatedAttrs: {
            alpha: 1.1,
            beta: 2.2
        }
    }, {
        selector: '.my-class',
        duration: 2000,
        id: 'test-incident-1'
    });

    dg.addIncident(di, 1000);
    const res = myClip.addIncident(dg, 1000);

    const testRes = Tester.testTree(dc2.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc2.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc2.realTree, myClip.realClip);

    expect(res).toEqual({
        result: true
    });

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC3. add a conflicting tree consisting of DescriptiveGroups and DescriptiveIncidents on the real tree of the Clip', () => {
    const testRes = Tester.testTree(dc2.descriptiveTree, myClip);
    const realTreeTest = Tester.testTree(dc2.realTree, myClip.realClip);

    expect(testRes.length).toEqual(0);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc2.lanes, lh.lanes, lh.incidentsById);
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC3. add a tree consisting of DescriptiveIncidents on the real tree of the Clip
    that will inherit the initial values from the previous Incidents on the lanes`, () => {
    const res = myClip.addIncident(testIncident2, 5000);

    const testRes = Tester.testTree(dc3.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc3.lanes, lh.lanes, lh.incidentsById);
    // const realTreeTest = Tester.testTree(dc3.realTree, myClip.realClip);

    expect(res).toEqual({
        result: true
    });

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
});


test(`DC4. add a tree consisting of DescriptiveIncidents on the real tree of the Clip
    that will inherit the initial values from the previous Incidents on the lanes and
    affect the initial values of the following`, () => {
    const res = myClip.addIncident(testIncident3, 4000);

    const testRes = Tester.testTree(dc4.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc4.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc4.realTree, myClip.realClip);
    expect(res).toEqual({
        result: true
    });

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC5. add a conflicting Incident on a DescriptiveGroup of the Descriptive Tree that already belongs
to a real tree`, () => {
    const di = new DI({
        attribute: 'value',
        animatedAttrs: {
            alpha: 3
        }
    }, {
        selector: '#element-2',
        duration: 1000,
        id: 'test-incident-4'
    });

    const res = dg.addIncident(di, 2000);
    expect(res.result).toEqual(false);

    const testRes = Tester.testTree(dc4.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc4.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc4.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC5.1, edit the duration of an Incident in a way that is conflicting. The edit should be rejected
and the state should remain the same`, () => {
    const res = testIncident3.editProperties({
        selector: '#element-1',
        duration: 2000,
        id: 'test-incident-3'
    });

    expect(res.result).toBe(false);
    expect(res.errors[0].type).toBe('unauthorised, overlapping incidents on the same element');

    const testRes = Tester.testTree(dc4.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc4.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc4.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC6. add a non-conflicting Incident on a DescriptiveGroup of the Descriptive Tree that already belongs
to a real tree`, () => {
    const res = dg.addIncident(testIncident4, 3000);
    expect(res.result).toEqual(true);

    const testRes = Tester.testTree(dc5.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc5.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc5.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC6.1, edit the selector of an Incident in a way that is conflicting. The edit should be rejected
and the state should remain the same`, () => {
    const res = testIncident4.editProperties({
        selector: '#element-1',
        duration: 1000,
        id: 'test-incident-4'
    });

    expect(res.result).toBe(false);
    expect(res.errors[0].type).toBe('unauthorised, overlapping incidents on the same element');

    const testRes = Tester.testTree(dc5.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc5.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc5.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC7. edit the position of an Incident', () => {
    const res = dg.moveIncident(testIncident4, 5000);

    expect(res).toEqual({
        result: true
    });

    const testRes = Tester.testTree(dc7.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc7.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc7.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC8. try to make a conflicting edit the position of an Incident', () => {
    const res = dg.moveIncident('test-incident-4', 1000);
    expect(res.result).toBe(false);

    const testRes = Tester.testTree(dc7.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc7.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc7.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});


test('DC8. try to edit the position of an Incident providing a negative', () => {
    const res = dg.moveIncident('test-incident-4', -1);
    expect(res.result).toBe(false);

    const testRes = Tester.testTree(dc7.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc7.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc7.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC9. move an Incident by changing its relative position with other Incidents of the lane', () => {
    const res = dg.moveIncident('test-incident-1', 7000);
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc8.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc8.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc8.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC10. remove an Incident from the tree', () => {
    const res = dg.removeIncident(testIncident4);
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc9.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc9.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc9.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC11. remove an Incident that is the first on lane', () => {
    const res = myClip.removeIncident('test-incident-3');
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc10.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc10.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc10.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC12. edit the attributes of an Incident in a way that is accepted', () => {
    const res = testIncident2.editAttributes({
        attribute: 'value',
        animatedAttrs: {
            gamma: 2
        }
    });
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc11.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc11.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc11.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC13. edit the properties of an Incident in a way that is accepted', () => {
    const res = testIncident2.editProperties({
        selector: '#element-1',
        duration: 6000,
        id: 'test-incident-2'
    });
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc12.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc12.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc12.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC14. Edit the attributes of a Descriptive Group exposed by a plugin. Expect the
edit not to pass due to conflicts`, () => {
    const res = myClip.addIncident(plugin_dg, 4000);
    expect(res.result).toBe(true);

    let testRes = Tester.testTree(dc13.descriptiveTree, myClip);

    let lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    let lanesTest = Tester.testLanes(dc13.lanes, lh.lanes, lh.incidentsById);
    let realTreeTest = Tester.testTree(dc13.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();

    const editRes = plugin_dg.editAttributes({ number: 44 });
    expect(editRes.result).toBe(false);

    testRes = Tester.testTree(dc13.descriptiveTree, myClip);

    lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    lanesTest = Tester.testLanes(dc13.lanes, lh.lanes, lh.incidentsById);
    realTreeTest = Tester.testTree(dc13.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});


test(`DC15. Edit the attributes of a Descriptive Group exposed by a plugin. Expect the
edit to pass`, () => {
    const res = plugin_dg.editAttributes({ number: 3 });
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc14.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc14.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc14.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC16. Edit an Incident adding to it initial values. The addition should pass`, () => {
    const res = testIncident2.editAttributes({
        attribute: 'value',
        animatedAttrs: {
            gamma: 2
        },
        initialValues: {
            gamma: 3
        }
    });
    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc15.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc15.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc15.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC17. an Incident with delay, hiatus and repeats should have derived duration`, () => {
    myClip.moveIncident(myGroup, 0);
    myGroup.addIncident(testIncident5, 0);

    const testRes = Tester.testTree(dc16.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc16.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc16.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC18. edit delay on Incident in a non-allowed way`, () => {
    const res = testIncident5.editProperties({
        selector: '.my-class',
        duration: 200,
        delay: 3400,
        hiatus: 500,
        id: 'test-incident-5'
    });

    expect(res.result).toBe(false);

    const testRes = Tester.testTree(dc16.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc16.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc16.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC19. edit delay on Incident in an allowed way`, () => {
    const res = testIncident5.editProperties({
        selector: '.my-class',
        duration: 200,
        delay: 200,
        hiatus: 500,
        id: 'test-incident-5'
    });

    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc17.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc17.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc17.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC20. edit hiatus on Incident (allowed)`, () => {
    const res = testIncident5.editProperties({
        selector: '.my-class',
        duration: 200,
        delay: 200,
        hiatus: 400,
        id: 'test-incident-5'
    });

    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc18.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc18.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc18.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test('DC21. edit repeats on Incident (not allowed)', () => {
    const res = testIncident5.editProperties({
        selector: '.my-class',
        duration: 200,
        delay: 200,
        hiatus: 400,
        repeats: 12,
        id: 'test-incident-5'
    });

    expect(res.result).toBe(false);

    const testRes = Tester.testTree(dc18.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc18.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc18.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC22. edit repeats on Incident (allowed)`, () => {
    const res = testIncident5.editProperties({
        selector: '.my-class',
        duration: 200,
        delay: 200,
        hiatus: 400,
        repeats: 3,
        id: 'test-incident-5'
    });

    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc19.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc19.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc19.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC23. resize Incident with delay, hiatus & repeats (not allowed)`, () => {
    const res = testIncident5.resize(4800);

    expect(res.result).toBe(false);

    const testRes = Tester.testTree(dc19.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc19.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc19.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC23. resize Incident with delay, hiatus & repeats (allowed)`, () => {
    const res = testIncident5.resize(1200);

    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc20.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc20.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc20.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC24. resize a group containing an Incident with delay, hiatus & repeats`, () => {
    const res = myGroup.resize(2400);

    expect(res.result).toBe(true);

    const testRes = Tester.testTree(dc19.descriptiveTree, myClip);

    const lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
    const lanesTest = Tester.testLanes(dc19.lanes, lh.lanes, lh.incidentsById);
    const realTreeTest = Tester.testTree(dc19.realTree, myClip.realClip);

    expect(testRes).toHaveNoErros();
    expect(lanesTest).toHaveNoErros();
    expect(realTreeTest).toHaveNoErros();
});

test(`DC25. Clone Clip`, () => {
    clone.onProgress(4150 / 11000, 4150);

    // console.log(ccopyContext);
    // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);
    const ccopyContext = myClip.realClip.instantiatedCopiesContexts[clone.id];
    expect(parseInt(ccopyContext.getElementByMCID('my-class-1').getAttribute('alpha'))).toBe(1);
});
