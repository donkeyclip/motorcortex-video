import TesterClass from '../../../tester/Tester';
import { API } from '../../main';
import DC from '../DescriptiveClip';
import DG from '../DescriptiveGroup';
import DI from '../DescriptiveIncident';
import { clipsLane, descriptiveTree, realTree } from './states/dcasi1';

const Tester = new TesterClass();

let myRootClip;
let myCAsI;
let myHostedClip;

const myGroup = new DG({ id: 'my-group' });

test('CAsI1. Add a DescriptiveClip with an Incident to a hosted DescriptiveClip', () => {
  myRootClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.clip-container',
    id: 'my-root-clip'
  });

  myCAsI = new DC({
    html: `
            <div id="my-root-div">
                <div id="casi_element-1" class="casi_my-class" data-motorcortex2-id="casi_my-class-1"></div>
                <div id="casi_element-2" class="casi_my-class" data-motorcortex2-id="casi_my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.my-class',
    id: 'casi'
  });

  const di = new DI(
    {
      attribute: 'value',
      animatedAttrs: {
        alpha: 1.1,
        beta: 2.2
      }
    },
    {
      selector: '.casi_my-class',
      duration: 2000,
      id: 'test-incident-1'
    }
  );

  myGroup.addIncident(di, 1000);
  const res = myRootClip.addIncident(myCAsI, 500);
  expect(res.result).toEqual(true);

  myCAsI.addIncident(myGroup, 1000);

  const testRes = Tester.testTree(descriptiveTree, myRootClip);

  const clipLane = myRootClip.realClip.instantiatedChannels['@kissmybutton/self-contained-incidents'].incidents;
  const clipLanesTest = Tester.testClipLanes(clipsLane, clipLane);
  const realTreeTest = Tester.testTree(realTree, myRootClip.realClip);

  // console.log(myRootClip.realClip.children.casi.leaf.children['casi_my-class-1'].leaf.contexts);

  expect(testRes).toHaveNoErros();
  expect(clipLanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('Add a two-levels CAsI into a hosted clip', () => {
  document.body.innerHTML = `
        <div id="my-root-clip"></div>
        <div id="my-copy-clip"></div>
    `;
  const host = document.getElementById('my-root-clip');

  myHostedClip = new DC({
    html: `<div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-1"></div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'my-hosted-clip'
  });

  const res = myHostedClip.addIncident(myRootClip, 0);
  expect(res.result).toBe(true);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children[
        'test-incident-1_casi_my-class-1'
      ].leaf.children['test-incident-1_casi_my-class-1_alpha'].leaf.contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children[
        'test-incident-1_casi_my-class-2'
      ].leaf.children['test-incident-1_casi_my-class-2_alpha'].leaf.contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children[
        'test-incident-1_casi_my-class-1'
      ].leaf.children['test-incident-1_casi_my-class-1_beta'].leaf.contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children[
        'test-incident-1_casi_my-class-2'
      ].leaf.children['test-incident-1_casi_my-class-2_beta'].leaf.contexts
    ).length
  ).toBe(5);

  const liveDefinition = myHostedClip.exportLiveDefinition();
  liveDefinition.props.host = document.getElementById('my-copy-clip');
  const ClipFromDef = API.clipFromDefinition(liveDefinition);
  expect(
    Object.keys(
      ClipFromDef.children['my-root-clip'].leaf.children.casi.leaf.realClip.children['my-group'].leaf.children[
        'test-incident-1'
      ].leaf.children['test-incident-1_casi_my-class-1'].leaf.children['test-incident-1_casi_my-class-1_alpha'].leaf
        .contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      ClipFromDef.children['my-root-clip'].leaf.children.casi.leaf.realClip.children['my-group'].leaf.children[
        'test-incident-1'
      ].leaf.children['test-incident-1_casi_my-class-2'].leaf.children['test-incident-1_casi_my-class-2_alpha'].leaf
        .contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      ClipFromDef.children['my-root-clip'].leaf.children.casi.leaf.realClip.children['my-group'].leaf.children[
        'test-incident-1'
      ].leaf.children['test-incident-1_casi_my-class-1'].leaf.children['test-incident-1_casi_my-class-1_beta'].leaf
        .contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      ClipFromDef.children['my-root-clip'].leaf.children.casi.leaf.realClip.children['my-group'].leaf.children[
        'test-incident-1'
      ].leaf.children['test-incident-1_casi_my-class-2'].leaf.children['test-incident-1_casi_my-class-2_beta'].leaf
        .contexts
    ).length
  ).toBe(5);
});

test('Add an Incident to an existing multi-level tree', () => {
  const di = new DI(
    {
      attribute: 'value',
      animatedAttrs: {
        alpha: 5,
        beta: 6
      }
    },
    {
      selector: '.casi_my-class',
      duration: 2000,
      id: 'test-incident-2'
    }
  );

  const res = myGroup.addIncident(di, 4000);

  expect(res.result).toBe(true);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children[
        'test-incident-2_casi_my-class-1'
      ].leaf.children['test-incident-2_casi_my-class-1_alpha'].leaf.contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children[
        'test-incident-2_casi_my-class-2'
      ].leaf.children['test-incident-2_casi_my-class-2_alpha'].leaf.contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children[
        'test-incident-2_casi_my-class-1'
      ].leaf.children['test-incident-2_casi_my-class-1_beta'].leaf.contexts
    ).length
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children[
        'test-incident-2_casi_my-class-2'
      ].leaf.children['test-incident-2_casi_my-class-2_beta'].leaf.contexts
    ).length
  ).toBe(5);
});

test('Edit the position of a CAsI', () => {
  const res = myHostedClip.moveIncident('my-root-clip', 1000);
  expect(res.result).toBe(true);
});

test('Export and import definition', () => {
  // console.log(JSON.stringify(myHostedClip.exportDefinition()));
});
