import { _DIRECTIONS } from '../../Tree/_CONST';
import { _TARGETTYPES } from '../_CONST';
import createValidator from '../../_coreUtils/customValidations';
const v = createValidator();
import helper from '../../_coreUtils/Helper';


function editAttributes(payload) {
  payload.descriptor.value = function editAttributesFunct(newAttrs) {
    if(this.attrsValidationRules){
      const validationRulesToUse = JSON.parse(JSON.stringify(this.attrsValidationRules));
      if (Object.prototype.hasOwnProperty.call(this.attrsValidationRules, 'animatedAttrs')) {
        // make all initialValues optional and store it on the validationRulesToUse
        validationRulesToUse.initialValues = helper.buildInitialValuesValidationRules(validationRulesToUse.animatedAttrs);
      }

      const validationResult = v.validate(newAttrs, validationRulesToUse);
      if (validationResult.length > 0) {
        return {
          result: false,
          errors: validationResult
        }
      }
    }

    const checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _TARGETTYPES._DECISIONAUTHORITY, {
      selfExecute: true,
      direction: _DIRECTIONS._UP
    });
    if (checkIfBelongsToClip.response === true) {
      // if the Group belongs on a Clip
      return this.manageEditAttrProps(newAttrs, 'attrs');
    }

    this.attrs = newAttrs;
    return {
      result: true
    };
  };
}

export default editAttributes;