import { _DIRECTIONS } from '../../Tree/_CONST';
import { _TARGETTYPES } from '../_CONST';

/**
 * resize method resizes the Incident by maintaining proportions between delay, duraiton and hiatus.
 * also, the new duration will be the full new duration of the Incident taking in considration
 * all delay, duration and hiatus along with repeats
 * */
function resize(payload) {
  payload.descriptor.value = function resizeFunct(newSize, options = { check: true }) {
    if (newSize === this.duration) {
      return {
        result: true,
        meta: {
          unprocessed: true
        }
      };
    }

    if (newSize <= 0) {
      return {
        result: false,
        reason: 'Size must always be > 0'
      };
    }

    if (options.check && this.hasParent) {
      const mcCheck = this.putMessageOnPipe(
        'checkResize',
        { id: this.id, newSize, fraction: newSize / this.duration },
        _TARGETTYPES._DECISIONAUTHORITY,
        { selfExecute: false, direction: _DIRECTIONS._UP }
      );

      if (!mcCheck.response.result) {
        return mcCheck.response;
      }
    }

    this.setNewDuration(newSize);

    return {
      result: true
    };
  };
}

export default resize;
