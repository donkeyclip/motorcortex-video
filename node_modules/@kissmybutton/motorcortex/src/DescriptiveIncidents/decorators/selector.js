function selector(payload) {
  payload.descriptor.value = function selectorFunct() {
    if (this.inheritedSelector === null) {
      // if the Incident has no parent selector inherited
      if (!Object.prototype.hasOwnProperty.call(this.props, 'selector')) {
        // and does not have a selector neither
        return null; // then its selector is null
      }

      return this.props.selector; // else, if it has a selector that's its final selector
    }
    // else if there is an inherited selector
    if (!Object.prototype.hasOwnProperty.call(this.props, 'selector')) {
      // and does not have a selector of its own
      return this.inheritedSelector; // then its selector is equal to the inherited selector
    }
    // else, if it both has an inherited and an own selector
    if (this.props.selector.charAt(0) === '&') {
      return this.inheritedSelector + this.props.selector.substring(1);
    }

    return `${this.inheritedSelector} ${this.props.selector}`;
  };
}

export default selector;
