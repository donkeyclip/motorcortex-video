expect.extend({
    toHaveNoErros(result) {
        const pass = (result.length == 0);
        if (pass) {
            return {
                message: () => (`expected ${result} to have 0 length`),
                pass: true,
            };
        }
        else {
            console.log(result);
            return {
                message: () => (`Error on lanes test`),
                pass: false,
            };
        }
    },
});

/**
 * mocks for testing
 **/
const MockNode = class {
    constructor() {
        this.status = 'stopped';
        this.connection = null;
        this.executionHistory = [];
    }

    clearLog() {
        this.executionHistory = [];
    }

    exportLog() {
        return this.executionHistory;
    }

    connect(mockNode) {
        this.connection = mockNode;
    }

    disconnect(mockNode) {
        this.connection = null;
    }

    start(placeholder, ms) {
        this.status = 'playing';
        this.executionHistory.push({
            event: 'start',
            ms: ms
        })
    }

    stop() {
        this.status = 'stopped';
        this.executionHistory.push({
            event: 'stop'
        })
    }
}

window.AudioContext = jest.fn().mockImplementation(() => {
    return {
        createGain() { return new MockNode(); },
        createStereoPanner() { return new MockNode() },
        createBiquadFilter() { return new MockNode() },
        decodeAudioData(arraybuffer, callback) { callback({}) },
        createBufferSource() { return new MockNode() },
        destination: 'destination'
    }
});
