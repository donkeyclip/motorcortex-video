"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Validator = require("fastest-validator");
/** @classdesc Helper maintains a number of helpful functions in a single point  */


var conf = require('../_configuration/generalConf'); // audio context initialisation


window.AudioContext = window.AudioContext || window.webkitAudioContext;
var audioContext = new window.AudioContext();

var Helper =
/*#__PURE__*/
function () {
  function Helper(configuration) {
    _classCallCheck(this, Helper);

    var logLevel = conf.logLevel;

    if (configuration) {
      if (Object.prototype.hasOwnProperty.call(configuration, "logLevel")) {
        logLevel = configuration.logLevel;
      }
    }

    this.lanesMCIDattrsSeperator = '___';

    for (var i = 0; i < conf.logTypes.length; i++) {
      var logType = conf.logTypes[i];

      if (logLevel >= logType.level) {
        if (conf.testMode === true) {
          this[logType.key] = window.console.log.bind(window.console, "MotorCortex - ".concat(logType.key, ": "));
        } else {
          this[logType.key] = window.console.log.bind(window.console, "MotorCortex - %c%s", logType.style);
        }
      } else this[logType.key] = function () {};
    }

    if (logLevel >= 3) {
      this.log = window.console.log.bind(window.console, "MotorCortex - ");
    } else this.log = function () {};
  }

  _createClass(Helper, [{
    key: "getAudioContext",
    value: function getAudioContext() {
      return audioContext;
    }
  }, {
    key: "renderTemplate",
    value: function renderTemplate(templateString, templateVars) {
      return new Function("return `" + templateString + "`;").call(templateVars);
    }
  }, {
    key: "validateProps",
    value: function validateProps(props, rules, constructor) {
      var v = new Validator();
      var validationResult = v.validate(props, rules);

      if (validationResult.length > 0) {
        var errorMessage = "Error on plugin's \"".concat(constructor.plugin_npm_name, "\" \"").concat(constructor.ClassName, "\" instantiation. Errors (op props):");

        for (var i = 0; i < validationResult.length; i++) {
          errorMessage += "\n - ".concat(validationResult[i].message, ". ").concat(validationResult[i].actual, " provided");
        }

        console.error(errorMessage);
        return {
          result: false,
          errors: validationResult
        };
      }

      return {
        result: true
      };
    }
    /**
     * @returns {string} in the form "1bc45f78-ab23-jl59"
     */

  }, {
    key: "getAnId",
    value: function getAnId() {
      var underscore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var specialChar = '-';

      if (underscore) {
        specialChar = '_';
      }

      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      return s4() + s4() + specialChar + s4() + specialChar + s4();
    }
  }, {
    key: "getLaneKey",
    value: function getLaneKey(mcid, attribute) {
      return mcid + this.lanesMCIDattrsSeperator + attribute;
    }
  }, {
    key: "getLaneDataFromLaneKey",
    value: function getLaneDataFromLaneKey(laneKey) {
      var ar = laneKey.split(this.lanesMCIDattrsSeperator);
      return {
        mcid: ar[0],
        attribute: ar[1]
      };
    }
  }, {
    key: "getMCIDandAttrOutOfLaneKey",
    value: function getMCIDandAttrOutOfLaneKey(laneKey) {
      var laneArray = laneKey.split(this.lanesMCIDattrsSeperator);
      return {
        mcid: laneArray[0],
        attribute: laneArray[1]
      };
    }
  }, {
    key: "getElementByMCID",
    value: function getElementByMCID(context, mcid) {
      return context.rootElement.querySelectorAll('[' + conf.elements_data_attribute_name + '="' + mcid + '"]')[0];
    }
    /**
    subdivision might be rounding the number to its:
    - units (subdivision = 1)
    - tenths (subdivision = 10)
    - hundreds (subdivision = 100)
    - thousands (subdivision = 1000)
     @param {string} int
     @param {subdivision} int
     @returns {int} the rounded number
    */

  }, {
    key: "roundNumberTo",
    value: function roundNumberTo(number, subdivision) {
      return Math.round(number / subdivision) * subdivision;
    }
  }, {
    key: "isInteger",
    value: function isInteger(number) {
      if (number === parseInt(number, 10)) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "isString",
    value: function isString(test) {
      if (typeof test === 'string' || test instanceof String) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "isObject",
    value: function isObject(test) {
      return _typeof(test) === "object";
    }
  }, {
    key: "isArray",
    value: function isArray(test) {
      return Array.isArray(test);
    }
  }, {
    key: "isFunction",
    value: function isFunction(functionToCheck) {
      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
    }
    /**
     * systole / diastole of the projections
     * @returns {array} - collection of objects with keys: {id, start, end, startDelta}
     **/

  }, {
    key: "systoleDiastoleProjections",
    value: function systoleDiastoleProjections(projections, durationFraction, anchorPoint) {
      var alteredProjections = [];

      for (var i = 0; i < projections.length; i++) {
        var projectedIncident = projections[i];
        var msInResizedPortion = projectedIncident.parentMillisecond - anchorPoint;

        if (durationFraction != 1) {
          alteredProjections.push({
            id: projectedIncident.incident.id,
            start: msInResizedPortion * durationFraction + anchorPoint,
            end: msInResizedPortion * durationFraction + anchorPoint + projectedIncident.incident.duration * durationFraction,
            startDelta: msInResizedPortion * durationFraction + anchorPoint - projectedIncident.millisecond
          });
        }
      }

      return alteredProjections;
    }
  }, {
    key: "jsUcfirst",
    value: function jsUcfirst(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }]);

  return Helper;
}();

module.exports = Helper;