"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Helper = require('../_coreUtils/Helper');

var helper = new Helper();
/**
 * @param {object} ingredients -
 * {
 *      id
 *      attrs
 *      props
 *      Incident
 *      plugin_npm_name
 *      Channel
 *      context (optional)
 *      mcid (optional)
 *      dnaExtras
 * }
 **/

module.exports = function (ingredients) {
  if (!Object.prototype.hasOwnProperty.call(ingredients, "dnaExtras")) {
    ingredients.dnaExtras = {};
  }

  var incident = new ingredients.Incident(ingredients.attrs, _objectSpread({}, ingredients.props, {
    id: ingredients.id || helper.getAnId()
  }), _objectSpread({}, ingredients.dnaExtras, {
    context: ingredients.context,
    mcid: ingredients.mcid
  }));
  incident.mc_plugin_npm_name = ingredients.plugin_npm_name;
  incident.plugin_channel_class = ingredients.Channel;
  incident.DescriptiveIncident = ingredients.DescriptiveIncident;
  return incident;
};