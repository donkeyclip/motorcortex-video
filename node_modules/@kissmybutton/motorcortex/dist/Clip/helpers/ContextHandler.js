"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conf = require('../../_configuration/generalConf');

var Helper = require('../../_coreUtils/Helper');

var helper = new Helper();

var ContextHandler =
/*#__PURE__*/
function () {
  function ContextHandler() {
    _classCallCheck(this, ContextHandler);

    this.customEntities = {};
  }

  _createClass(ContextHandler, [{
    key: "getElementByMCID",
    value: function getElementByMCID(mcid) {
      if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {
        return this.customEntities[mcid];
      } else if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {
        return this.elementsByMCID[mcid];
      } else {
        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));
        this.elementsByMCID[mcid] = element;
        return element;
      }
    }
  }, {
    key: "getElements",
    value: function getElements(selector) {
      if (selector.charAt(0) === "!") {
        selector = selector.substr(1);

        if (selector.charAt(0) === "#") {
          return [this.customEntities[selector.substr(1)]];
        } else if (selector.charAt(0) === ".") {
          var toReturn = [];

          for (var key in this.customEntities) {
            var entity = this.customEntities[key];

            if (entity.classes.indexOf(selector.substr(1)) > -1) {
              toReturn.push(entity);
            }
          }

          return toReturn;
        }
      }

      return Array.from(this.context.rootElement.querySelectorAll(selector));
    }
  }, {
    key: "getMCID",
    value: function getMCID(element) {
      if (element.customEntity === true) {
        return element.id;
      }

      return element.getAttribute(conf.elements_data_attribute_name);
    }
  }, {
    key: "setMCID",
    value: function setMCID(element, mcid) {
      element.setAttribute(conf.elements_data_attribute_name, mcid);
    }
  }, {
    key: "getElementSelectorByMCID",
    value: function getElementSelectorByMCID(mcid) {
      if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {
        return "!#".concat(mcid);
      }

      return '[' + conf.elements_data_attribute_name + '="' + mcid + '"]';
    }
  }, {
    key: "setCustomEntity",
    value: function setCustomEntity(id, entity) {
      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      if (Object.prototype.hasOwnProperty.call(this.customEntities, id)) {
        helper.error("Clip ".concat(this.id, " already has custom Entity with id: ").concat(id));
        return false;
      }

      this.customEntities[id] = {
        id: id,
        entity: entity,
        classes: classes,
        customEntity: true
      };
      return true;
    }
  }]);

  return ContextHandler;
}();

module.exports = ContextHandler;