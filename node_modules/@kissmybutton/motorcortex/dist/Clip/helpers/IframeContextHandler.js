"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/*
iframe[seamless]{
    background-color: transparent;
    border: 0px none transparent;
    padding: 0px;
    overflow: hidden;
}

might need more work for IE. See here: https://stackoverflow.com/a/29209248
*/
var Helper = require('../../_coreUtils/Helper');

var helper = new Helper();

var ContextHandler = require('./ContextHandler');

var IframeContextHandler =
/*#__PURE__*/
function (_ContextHandler) {
  _inherits(IframeContextHandler, _ContextHandler);

  /**
   * @param {object} props - an object that should contain all of the following keys:
   * - html (the html template to render)
   * - css (the css template of the isolated tree)
   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
   * - host (an Element object that will host the isolated tree)
   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)
   */
  function IframeContextHandler() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, IframeContextHandler);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(IframeContextHandler).call(this));

    if (!helper.isObject(props)) {
      helper.error("ContextHandler expects an object on its constructor. ".concat(_typeof(props), " passed"));
      return _possibleConstructorReturn(_this, false);
    }

    if (!Object.prototype.hasOwnProperty.call(props, 'html')) {
      helper.error("ContextHandler expects the html key on its constructor properties which is missing");
      return _possibleConstructorReturn(_this, false);
    }

    if (!Object.prototype.hasOwnProperty.call(props, 'css')) {
      helper.error("ContextHandler expects the css key on its constructor properties which is missing");
      return _possibleConstructorReturn(_this, false);
    }

    if (!Object.prototype.hasOwnProperty.call(props, 'initParams')) {
      helper.info("ContextHandler got null initParams");
    }

    if (!Object.prototype.hasOwnProperty.call(props, 'host')) {
      helper.error("ContextHandler expects the host key on its constructor properties which is missing");
      return _possibleConstructorReturn(_this, false);
    }

    _this.isDOM = true;
    var ownerDocument = props.host.ownerDocument;

    if (!ownerDocument.getElementById("@kissmybutton/motorcortex/iframeContextHandler/css")) {
      var seamlessCSS = "\n            iframe[seamless]{\n                background-color: transparent;\n                border: 0px none transparent;\n                padding: 0px;\n                overflow: hidden;\n            }\n            ";
      var iframesCSS = ownerDocument.createElement('style');
      iframesCSS.id = "@kissmybutton/motorcortex/iframeContextHandler/css";
      iframesCSS.type = 'text/css';
      var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];

      if (iframesCSS.styleSheet) {
        iframesCSS.styleSheet.cssText = seamlessCSS;
      } else {
        iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));
      }

      Head.appendChild(iframesCSS);
    } // Create an iframe:


    var iframe = ownerDocument.createElement('iframe');
    props.host.appendChild(iframe);
    iframe.setAttribute("seamless", "seamless");

    if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {
      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {
        iframe.setAttribute('width', props.containerParams.width);
      }

      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {
        iframe.setAttribute('height', props.containerParams.height);
      }
    } // Initialise the iframe


    iframe.src = ''; // Put it in the document (but hidden):

    var iframeDocument = iframe.contentWindow || iframe.contentDocument;

    if (iframeDocument.document) {
      iframeDocument = iframeDocument.document;
    }

    iframeDocument.write(helper.renderTemplate(props.html, {
      params: props.initParams
    }));
    var bodyFixCSS = "\n        body{\n            padding:0;\n            margin:0;\n        }\n        ";
    var styleTag = iframeDocument.createElement('style');
    styleTag.type = 'text/css';

    if (styleTag.styleSheet) {
      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {
        params: props.initParams
      }) + bodyFixCSS;
    } else {
      styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));
    }

    var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];
    head.appendChild(styleTag);

    if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {
      for (var i = 0; i < props.fonts.length; i++) {
        var theFont = props.fonts[i];

        if (theFont.type === "google-font") {
          var fontTag = iframeDocument.createElement('link');
          fontTag.setAttribute('rel', 'stylesheet');
          fontTag.setAttribute('href', theFont.src);
          head.appendChild(fontTag);
        }
      }
    }

    _this.rootElement = iframe;
    iframeDocument.close();
    _this.context = {
      document: iframeDocument,
      window: iframe.contentWindow || iframe,
      clipContainer: iframe,
      rootElement: iframeDocument.body,
      unmount: function unmount() {
        props.host.removeChild(iframe);
      },
      getElements: _this.getElements.bind(_assertThisInitialized(_this)),
      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),
      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),
      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),
      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),
      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))
    };
    _this.elementsByMCID = {};
    return _this;
  }

  return IframeContextHandler;
}(ContextHandler);

module.exports = IframeContextHandler;