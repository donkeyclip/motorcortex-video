"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MonoIncident = require('../BaseClasses/MonoIncident');

var Helper = require('../_coreUtils/Helper');

var helper = new Helper();

var ClipCopy =
/*#__PURE__*/
function (_MonoIncident) {
  _inherits(ClipCopy, _MonoIncident);

  function ClipCopy(attrs, props, dna) {
    var _this;

    _classCallCheck(this, ClipCopy);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClipCopy).call(this, attrs, props, dna));
    _this.runTimeInfo = {
      currentMillisecond: 0
    };
    return _this;
  }

  _createClass(ClipCopy, [{
    key: "lastWish",
    value: function lastWish() {
      this.ownClip.ownContext.unmount();
    }
  }, {
    key: "onGetContext",
    value: function onGetContext() {
      // In order to render itself on the given element first it needs the props (including html and css)
      // from the real Clip it copies
      var constructionArgs = this.DescriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip

      var host = helper.getElementByMCID(this.context, this.mcid);

      var hostedProps = _objectSpread({}, constructionArgs.props, {
        selector: undefined,
        host: host
      }); // we create a clip because Clips on creation render and thus have their own context
      // this.dna.descriptiveIncident.constructor.Incident keeps a reference to the non-audio real Clip
      // Class. No audio is involved on this process


      this.ownClip = new this.DescriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps);
      this.ownClip.DescriptiveIncident = this.DescriptiveIncident;
      this.ownClip.contextLoaded = this.contextLoaded.bind(this); // console.log(this.ownClip);
      // flushes the realClip with its ownClip's context

      this.DescriptiveIncident.realClip.addContext({
        clipId: this.id,
        context: this.ownClip.ownContext
      }, true); // even though we have created an own clip, we have made no checks at all neither
      // we added the incidents of the real clip to it. That is becuase playing and moving
      // this clip copy means directly moving the real clip on the context of the own clip.
      // So the only thing we need here is the context and nothing more.

      this.contextReady = true;
    }
  }, {
    key: "contextLoaded",
    value: function contextLoaded() {
      this.contextReady = true;
      this.unblock();
    }
  }, {
    key: "onProgress",
    value: function onProgress(fraction, milliseconds) {
      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (this.ownClip.ownContext.loading === true) {
        this.setBlock();
        return;
      }

      for (var key in this.DescriptiveIncident.realClip.instantiatedChannels) {
        var channel = this.DescriptiveIncident.realClip.instantiatedChannels[key];
        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);
      }

      this.runTimeInfo.currentMillisecond = milliseconds;
      this.ownClip.onAfterProgress(fraction, milliseconds);
    }
  }, {
    key: "duration",
    get: function get() {
      return this.DescriptiveIncident.realClip.duration;
    },
    set: function set(milliseconds) {
      this.DescriptiveIncident.realClip._resize(milliseconds / this.realClip.duration);
    }
  }]);

  return ClipCopy;
}(MonoIncident);

module.exports = ClipCopy;