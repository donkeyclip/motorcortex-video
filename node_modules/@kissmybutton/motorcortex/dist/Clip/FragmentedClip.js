"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLFragmentContextHandler = require('./helpers/HTMLFragmentContextHandler');

var ExtendableClip = require('./ExtendableClip');

var FragmentedClip =
/*#__PURE__*/
function (_ExtendableClip) {
  _inherits(FragmentedClip, _ExtendableClip);

  function FragmentedClip() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, FragmentedClip);

    var attrsToPass, propsToUse;
    /*
    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is
    the new way of initialising a Group (only props).
    */

    if (oldProps === null) {
      attrsToPass = {};
      propsToUse = props;
    } else {
      // else, in case the user has passed two arguments then both should be used
      attrsToPass = props;
      propsToUse = oldProps;
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FragmentedClip).call(this, attrsToPass, propsToUse));
    var contextHanlder = new HTMLFragmentContextHandler(_objectSpread({}, propsToUse, {
      html: Object.prototype.hasOwnProperty.call(propsToUse, "html") ? propsToUse.html : _this.html,
      css: Object.prototype.hasOwnProperty.call(propsToUse, "css") ? propsToUse.css : _this.css,
      fonts: Object.prototype.hasOwnProperty.call(propsToUse, "fonts") ? propsToUse.fonts : _this.fonts
    }));
    _this.ownContext = _objectSpread({}, contextHanlder.context, {
      isHostedClip: false
    });
    _this.iframe = contextHanlder.iframeElement;
    _this.forceExportIncidents = true;

    _this.onDOMCLipInitialise(); // as soon as a Fragmented Clip is been intialised that means the Descriptive
    // Clip has a selector and not a host. Thus is not a hosted clip
    // this.isHostedClip = false;


    return _this;
  }

  _createClass(FragmentedClip, [{
    key: "exportConstructionArguments",
    value: function exportConstructionArguments() {
      // TODO also export CSS and fonts taking in account the potential existance
      // of them on the get methods
      // console.log(this.ownContext.rootElement.innerHTML);
      return {
        attrs: this.attrs,
        props: _objectSpread({}, this.props, {
          html: this.ownContext.rootElement.innerHTML
        })
      };
    }
  }, {
    key: "onDOMCLipInitialise",
    value: function onDOMCLipInitialise() {// implement here
    }
  }, {
    key: "rootElement",
    get: function get() {
      return this.ownContext.clipContainer;
    }
  }]);

  return FragmentedClip;
}(ExtendableClip);

module.exports = FragmentedClip;