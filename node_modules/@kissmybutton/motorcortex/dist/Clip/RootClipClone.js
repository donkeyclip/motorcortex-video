"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Helper = require('../_coreUtils/Helper');

var helper = new Helper();
/*
dna: {
    host
    descriptiveIncident
}
*/

var ClipClone =
/*#__PURE__*/
function () {
  function ClipClone(dna) {
    _classCallCheck(this, ClipClone);

    this.runTimeInfo = {
      currentMillisecond: 0,
      state: 'transitional'
    };
    this.id = helper.getAnId();
    this.realClip = dna.descriptiveIncident.realClip; // In order to render itself on the given element first it needs the props (including html and css)
    // from the real Clip it copies

    var constructionArgs = dna.descriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip

    var hostedProps = _objectSpread({}, constructionArgs.props, {
      selector: undefined,
      host: dna.host,
      id: this.id
    }); // we create a clip because Clips on creation render and thus have their own context


    this.ownClip = new dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps); // flushes the realClip with its ownClip's context

    dna.descriptiveIncident.realClip.addContext({
      clipId: this.id,
      context: this.ownClip.ownContext,
      synchronize: dna.synchronize,
      runTimeInfo: this.runTimeInfo
    }, true);
  }

  _createClass(ClipClone, [{
    key: "onProgress",
    value: function onProgress(fraction, milliseconds) {
      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      for (var key in this.realClip.instantiatedChannels) {
        var channel = this.realClip.instantiatedChannels[key];
        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, true);
      }

      this.runTimeInfo.currentMillisecond = milliseconds;
    }
  }]);

  return ClipClone;
}();

module.exports = ClipClone;