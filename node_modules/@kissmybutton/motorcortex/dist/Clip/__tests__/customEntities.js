"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MC = require('../../main');
/*************************** PLUGIN DEFINITION *************************/

/**********************************************************************/


var MyPluginClip =
/*#__PURE__*/
function (_MC$API$DOMClip) {
  _inherits(MyPluginClip, _MC$API$DOMClip);

  function MyPluginClip() {
    _classCallCheck(this, MyPluginClip);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginClip).apply(this, arguments));
  }

  _createClass(MyPluginClip, [{
    key: "onAfterRender",
    value: function onAfterRender() {
      this.setCustomEntity('myEntity', {
        alpha: 1,
        beta: 2
      }, ['class1', 'class2']);
      this.setCustomEntity('myEntity', {
        alpha: 1,
        beta: 2
      }, ['class1', 'class2']);
      this.setCustomEntity('myEntity2', {
        alpha: 2,
        beta: 3
      }, ['class1', 'class2']);
    }
  }]);

  return MyPluginClip;
}(MC.API.DOMClip);
/*************************** PLUGIN LOADING ***************************/

/**********************************************************************/


var testPlugin0 = {
  npm_name: '@kissmybutton/test-plugin-0',
  name: 'Test Plugin 0',
  Clip: MyPluginClip
};
var MyTestPlugin = MC.loadPlugin(testPlugin0);
var myHostedClip;
test("CE1. Test custom entities set and getElements select", function () {
  document.body.innerHTML = "<div id=\"my-root-clip\"></div>";
  var host = document.getElementById('my-root-clip');
  myHostedClip = new MyTestPlugin.Clip({
    html: "<div>\n            <div class=\"clip-container\" data-motorcortex2-id=\"myRootClip-1\"></div>\n            <div class=\"clip-container\" data-motorcortex2-id=\"myRootClip-2\"></div>\n        </div>",
    css: "",
    host: host,
    id: 'my-hosted-clip'
  });
  expect(myHostedClip.realClip.context.getElements("!#myEntity")).toEqual([{
    id: 'myEntity',
    entity: {
      alpha: 1,
      beta: 2
    },
    classes: ['class1', 'class2'],
    customEntity: true
  }]);
  expect(myHostedClip.realClip.context.getElements("!.class1")).toEqual([{
    id: 'myEntity',
    entity: {
      alpha: 1,
      beta: 2
    },
    classes: ['class1', 'class2'],
    customEntity: true
  }, {
    id: 'myEntity2',
    entity: {
      alpha: 2,
      beta: 3
    },
    classes: ['class1', 'class2'],
    customEntity: true
  }]);
});
test("CE2. Test getMCID of custom Entities", function () {
  expect(myHostedClip.realClip.context.getMCID({
    id: 'myEntity',
    entity: {
      alpha: 1,
      beta: 2
    },
    classes: ['class1', 'class2'],
    customEntity: true
  })).toBe('myEntity');
});
test("CE3. Get custom entitie's selector", function () {
  expect(myHostedClip.realClip.context.getElementSelectorByMCID('myEntity')).toBe('!#myEntity');
});