"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }

function _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [["method"], ["field"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === "own") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === "static" || placement === "prototype")) { var receiver = placement === "static" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === "field") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { "static": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError("Duplicated element (" + element.key + ")"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError("Duplicated element (" + elements[j].key + ")"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === "field") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, "finisher", "An element descriptor"); this.disallowProperty(elementObject, "extras", "An element descriptor"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== "method" && kind !== "field") { throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== "static" && placement !== "prototype" && placement !== "own") { throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, "elements", "An element descriptor"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== "field") { this.disallowProperty(elementObject, "initializer", "A method descriptor"); } else { this.disallowProperty(descriptor, "get", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "set", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "value", "The property descriptor of a field descriptor"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, "finisher"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: "class", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== "class") { throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"'); } this.disallowProperty(obj, "key", "A class descriptor"); this.disallowProperty(obj, "placement", "A class descriptor"); this.disallowProperty(obj, "descriptor", "A class descriptor"); this.disallowProperty(obj, "initializer", "A class descriptor"); this.disallowProperty(obj, "extras", "A class descriptor"); var finisher = _optionalCallableProperty(obj, "finisher"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== "function") { throw new TypeError("Finishers must return a constructor."); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + " can't have a ." + name + " property."); } } }; return api; }

function _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === "method") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === "get") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === "set") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === "field") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === "field" ? "field" : "method", key: key, placement: def["static"] ? "static" : def.kind === "field" ? "own" : "prototype", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === "field") element.initializer = def.value; return element; }

function _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }

function _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === "method" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === "method" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated."); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ")."); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }

function _hasDecorators(element) { return element.decorators && element.decorators.length; }

function _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }

function _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== "function") { throw new TypeError("Expected '" + name + "' to be a function"); } return value; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Leaf = require('./Leaf');

var _CONST = require('./_CONST');

var _COPY = require('./_copy');

var systoleDiastole = require('./decorators/systoleDiastole');

var Node = _decorate(null, function (_initialize, _Leaf) {
  var Node =
  /*#__PURE__*/
  function (_Leaf2) {
    _inherits(Node, _Leaf2);

    function Node() {
      var _this;

      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Node);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));

      _initialize(_assertThisInitialized(_this));

      _this.isNode = true;
      /**
        The object holds the Incidents of the Scene on the format:
        {
            <id>: {
                  id // the id of the Incident object
                  leaf // the incident object
                  position // the position of the incident
            },
            ...
        }
         */

      _this.children = {};
      _this.calculatedDuration = 0;
      return _this;
    }

    return Node;
  }(_Leaf);

  return {
    F: Node,
    d: [{
      kind: "get",
      key: "duration",
      value: function duration() {
        return this.calculatedDuration;
      }
    }, {
      kind: "set",
      key: "duration",
      value: function duration(newDuration) {
        var durationFraction = newDuration / this.duration;

        if (this.props) {
          if (Object.prototype.hasOwnProperty.call(this.props, "duration")) {
            this.props.duration = newDuration;
          }
        }

        this.calculatedDuration = newDuration;

        for (var childKey in this.children) {
          var child = this.children[childKey];
          this.editPosition(child.id, child.position * durationFraction, true);
          child.leaf.systoleDiastole(durationFraction);
        }
      }
    }, {
      kind: "method",
      key: "setNewDuration",
      value: function setNewDuration(newDuration) {
        this.duration = newDuration;
        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {
          selfExecute: false,
          direction: _CONST._DIRECTIONS._UP
        });
      }
    }, {
      kind: "method",
      key: "_calculateDuration",
      value: function _calculateDuration() {
        var duration = 0;

        for (var childKey in this.children) {
          var child = this.children[childKey];

          if (child.position + child.leaf.duration > duration) {
            duration = child.position + child.leaf.duration;
          }
        }

        if (duration === this.calculatedDuration) {
          return false;
        }

        if (this.props) {
          if (Object.prototype.hasOwnProperty.call(this.props, "duration")) {
            this.props.duration = duration;
          }
        }

        this.calculatedDuration = duration;
        return true;
      }
    }, {
      kind: "method",
      decorators: [systoleDiastole],
      key: "systoleDiastole",
      value: function systoleDiastole() {}
    }, {
      kind: "method",
      key: "handleRecalcDuration",
      value: function handleRecalcDuration(target, payload) {
        // eslint-disable-line no-unused-vars
        if (this._calculateDuration()) {
          return this.putMessageOnPipe('recalcDuration', {}, 'Groups', {
            selfExecute: false,
            direction: _CONST._DIRECTIONS._UP
          });
        }

        return true;
      }
    }, {
      kind: "method",
      key: "getLeafById",
      value: function getLeafById(id) {
        var onlyDirectChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (Object.prototype.hasOwnProperty.call(this.children, id)) {
          return this.children[id].leaf;
        } else if (onlyDirectChild === false) {
          for (var child in this.children) {
            var childLeaf = this.children[child].leaf;

            if (childLeaf.isNode) {
              var leaf = childLeaf.getLeafById(id);

              if (leaf != null) {
                return leaf;
              }
            }
          }
        } else {
          return null;
        }

        return null;
      }
    }, {
      kind: "method",
      key: "getLeafPosition",
      value: function getLeafPosition(id) {
        return this.children[id].position;
      }
    }, {
      kind: "method",
      key: "checkAddition",
      value: function checkAddition(leaf, position) {
        if (leaf.hasParent) {
          return {
            result: false,
            reason: _COPY._LEAFALREADYASSIGNED
          };
        }

        if (position < 0) {
          return {
            result: false,
            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED
          };
        }

        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "addChild",
      value: function addChild(leaf, position) {
        // this hasParent check occurs here as an extra security check so it
        // gets executed regardless if the user wants to perform checks or not
        if (leaf.hasParent) {
          return {
            result: false,
            reason: _COPY._LEAFALREADYASSIGNED
          };
        }

        this.children[leaf.id] = {
          id: leaf.id,
          leaf: leaf,
          position: position
        };
        leaf.attachToNode(this);
        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {
          selfExecute: true,
          direction: _CONST._DIRECTIONS._UP
        });
        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "checkRemoveChild",
      value: function checkRemoveChild(id) {
        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {
          return {
            result: false,
            reason: _COPY._LEAFNOTFOUND
          };
        }

        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "removeChild",
      value: function removeChild(id) {
        this.children[id].leaf.detachFromParent();
        delete this.children[id];
        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {
          selfExecute: true,
          direction: _CONST._DIRECTIONS._UP
        });
        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "checkEditPosition",
      value: function checkEditPosition(id, position) {
        if (position < 0) {
          return {
            result: false,
            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED
          };
        }

        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {
          return {
            result: false,
            reason: _COPY._LEAFNOTFOUND
          };
        }

        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "editPosition",
      value: function editPosition(id, position) {
        var bypassRecalcDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (Object.prototype.hasOwnProperty.call(this.children, id)) {
          this.children[id].position = position;

          if (bypassRecalcDuration === false) {
            this.putMessageOnPipe('recalcDuration', {}, 'Groups', {
              selfExecute: true,
              direction: _CONST._DIRECTIONS._UP
            });
          }

          return {
            result: true
          };
        }
      }
      /**
      The expected result of this method depends on the direction of the message
      The direction might either be _UP or _DOWN.
      In the case of _UP the expected result is identical as on Leaf:
      {
          response: an object the structure of which depends on the name of the message
              and maybe even on the payload
          responder: a direct reference to the lead that actually responded
      }
      In the case of _DOWN though, where multiple Leafs might be eligible in the tree
      for handling the message the result is on the form:
      [
          {
              response: an object the structure of which depends on the name of the message
                  and maybe even on the payload
              responder: a direct reference to the lead that actually responded
              positionDelta: the position delta of the responder compared to the requester
          }
      ]
      */

    }, {
      kind: "method",
      key: "putMessageOnPipe",
      value: function putMessageOnPipe(name, payload, target) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        // default direction: _DOWN
        if (!Object.prototype.hasOwnProperty.call(options, 'direction')) {
          options.direction = _CONST._DIRECTIONS._DOWN;
        } // default positionDelta = 0


        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, 'positionDelta')) {
          options.positionDelta = 0;
        }

        if (options.direction === _CONST._DIRECTIONS._UP) {
          // if the direction is up
          return _get(_getPrototypeOf(Node.prototype), "putMessageOnPipe", this).call(this, name, payload, target, options); // act exactly as any other Leaf
        } else {
          var result = _get(_getPrototypeOf(Node.prototype), "putMessageOnPipe", this).call(this, name, payload, target, options);

          if (result.length > 0) {
            return result;
          }

          for (var child in this.children) {
            var leaf = this.children[child].leaf;

            var newOptions = _objectSpread({}, options, {
              selfExecute: true,
              positionDelta: options.positionDelta + this.children[child].position
            });

            result = result.concat(leaf.putMessageOnPipe(name, payload, target, newOptions));
          }

          return result;
        }
      }
    }]
  };
}, Leaf);

module.exports = Node;