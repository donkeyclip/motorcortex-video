"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _CONST = require('../_CONST');

var Leaf = require('../Leaf');

var Node = require('../Node');

var plainLeaf = new Leaf({
  id: 'plain-leaf'
});
var node = new Node();

var HandlerLeaf =
/*#__PURE__*/
function (_Leaf) {
  _inherits(HandlerLeaf, _Leaf);

  function HandlerLeaf() {
    _classCallCheck(this, HandlerLeaf);

    return _possibleConstructorReturn(this, _getPrototypeOf(HandlerLeaf).apply(this, arguments));
  }

  _createClass(HandlerLeaf, [{
    key: "handleTestMessage",
    value: function handleTestMessage(target, payload) {
      if (payload === 1 && target === 'foo-target') {
        return true;
      } else {
        return this.bypass();
      }
    }
  }]);

  return HandlerLeaf;
}(Leaf);

var handlerLeaf = new HandlerLeaf({
  duration: 1000
});
test('should generate an id if it is not provided on the props', function () {
  expect(handlerLeaf.id).toHaveLength(18);
});
test('should return the failed payload for _UP messages when it does not belong to a tree and selfExecute=true', function () {
  expect(plainLeaf.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._UP
  })).toEqual({
    response: false,
    responder: null
  });
});
test('should return an empty payload for _DOWN messages when it does not belong to a tree and selfExecute=true', function () {
  expect(plainLeaf.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  })).toEqual([]);
});
test('should return the failed payload for _UP messages when it does not belong to a tree and selfExecute=false', function () {
  expect(plainLeaf.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._UP
  })).toEqual({
    response: false,
    responder: null
  });
});
test('should return an empty array for _DOWN messages when it does not belong to a tree and selfExecute=false', function () {
  expect(plainLeaf.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  })).toEqual([]);
});
test('should return true for _UP messages for a message it (conditionally) handles and selfExecute=true', function () {
  var res = handlerLeaf.putMessageOnPipe('testMessage', 1, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._UP
  });
  expect(res.responder).toEqual(handlerLeaf);
  expect(res.response).toBe(true);
});
test('should return the failed payload for _UP messages for a message that it (conditionally) does not hanlde and selfExecute=true', function () {
  var res = handlerLeaf.putMessageOnPipe('testMessage', 0, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._UP
  });
  expect(res).toEqual({
    response: false,
    responder: null
  });
});
test('should return a response array for _DOWN messages for a message it (conditionally) handles and selfExecute=true', function () {
  var res = handlerLeaf.putMessageOnPipe('testMessage', 1, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  });
  expect(res).toHaveLength(1);
  expect(res[0].responder).toEqual(handlerLeaf);
  expect(res[0].response).toBe(true);
});
test('should return an empty array for _DOWN messages for a message that it (conditionally) does not hanlde and selfExecute=true', function () {
  var res = handlerLeaf.putMessageOnPipe('testMessage', 0, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  });
  expect(res).toEqual([]);
});
test('should return the failed payload for _UP messages for a message that it (conditionally) hanldes when selfExecute=false', function () {
  var res = handlerLeaf.putMessageOnPipe('testMessage', 1, 'foo-target', {
    selfExecute: false,
    direction: _CONST._DIRECTIONS._UP
  });
  expect(res).toEqual({
    response: false,
    responder: null
  });
});
test('should return an empty array for _DOWN messages for a message that it (conditionally) hanldes but selfExecute=false', function () {
  var res = handlerLeaf.putMessageOnPipe('testMessage', 1, 'foo-target', {
    selfExecute: false,
    direction: _CONST._DIRECTIONS._DOWN
  });
  expect(res).toEqual([]);
});
test('should assign its parent when added to a Node', function () {
  node.addChild(plainLeaf, 2000);
  expect(plainLeaf.parentNode).toBe(node);
  expect(plainLeaf.hasParent).toBe(true);
});
test('should release its parent when removed from a Node', function () {
  node.removeChild(plainLeaf.id);
  expect(plainLeaf.parentNode).toBe(null);
  expect(plainLeaf.hasParent).toBe(false);
});