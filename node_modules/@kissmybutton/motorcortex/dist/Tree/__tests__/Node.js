"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _CONST = require('../_CONST');

var _COPY = require('../_copy');

var Leaf = require('../Leaf');

var Node = require('../Node');

var TestNode =
/*#__PURE__*/
function (_Node) {
  _inherits(TestNode, _Node);

  function TestNode() {
    _classCallCheck(this, TestNode);

    return _possibleConstructorReturn(this, _getPrototypeOf(TestNode).apply(this, arguments));
  }

  _createClass(TestNode, [{
    key: "handleRootRequest",
    value: function handleRootRequest(target, payload) {
      // eslint-disable-line no-unused-vars
      if (target === _CONST._TARGETTYPES._ROOTOFTREE) {
        return this.id;
      }
    }
  }]);

  return TestNode;
}(Node);

var testNode = new TestNode({
  id: 'test-node'
});
var node = new Node();
var plainNode = new Node({
  id: 'plain-node'
});
var plainNodeTwo = new Node({
  id: 'plain-node-two'
});

var TestLeaf =
/*#__PURE__*/
function (_Leaf) {
  _inherits(TestLeaf, _Leaf);

  function TestLeaf() {
    _classCallCheck(this, TestLeaf);

    return _possibleConstructorReturn(this, _getPrototypeOf(TestLeaf).apply(this, arguments));
  }

  _createClass(TestLeaf, [{
    key: "handleGather",
    value: function handleGather(target, payload) {
      // eslint-disable-line no-unused-vars
      if (this.isEligible !== true) {
        return this.bypass();
      }

      return this.id;
    }
  }]);

  return TestLeaf;
}(Leaf);

var _leafA = new TestLeaf({
  id: '_leafA'
});

_leafA.isEligible = true;

var _leafB = new TestLeaf({
  id: '_leafB'
});

_leafB.isEligible = true;
var leafA = new TestLeaf({
  id: 'leafA'
});
var leafB = new TestLeaf({
  id: 'leafB'
});
/*************************** ID ASSIGNMENT *************************************/

test('should generate an id if it is not provided on the props', function () {
  expect(node.id).toHaveLength(18);
});
/*********************** NULL TARGET WHILE BEING FREE *******************************/

test('should return the failed payload for _UP messages when it does not belong to a tree and selfExecute=true', function () {
  expect(plainNode.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._UP
  })).toEqual({
    response: false,
    responder: null
  });
});
test('should return an empty payload for _DOWN messages when it does not belong to a tree and selfExecute=true', function () {
  expect(plainNode.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  })).toEqual([]);
});
test('should return the failed payload for _UP messages when it does not belong to a tree and selfExecute=false', function () {
  expect(plainNode.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._UP
  })).toEqual({
    response: false,
    responder: null
  });
});
test('should return an empty array for _DOWN messages when it does not belong to a tree and selfExecute=false', function () {
  expect(plainNode.putMessageOnPipe('foo', {}, 'foo-target', {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  })).toEqual([]);
});
/************************** ADDING LEAFS TO NODES ****************************/

test('check addition should pass', function () {
  expect(node.checkAddition(plainNode, 2000)).toEqual({
    result: true
  });
});
test('should assign its parent when added to a Node. Also, parent should add the leaf in its children', function () {
  node.addChild(plainNode, 2000);
  expect(node.children[plainNode.id].leaf).toBe(plainNode);
  expect(node.children[plainNode.id]).toEqual({
    id: plainNode.id,
    leaf: plainNode,
    position: 2000
  });
});
test('check addition should not pass because leaf already belongs to parent', function () {
  expect(node.checkAddition(plainNode, 2000)).toEqual({
    result: false,
    reason: _COPY._LEAFALREADYASSIGNED
  });
});
test('check addition should not pass because of a negative position', function () {
  plainNodeTwo.id = 'plain-node-two';
  expect(node.checkAddition(plainNodeTwo, -200)).toEqual({
    result: false,
    reason: _COPY._NEGATIVEPOSITIONNOTALLOWED
  });
});
/************************** _DOWN MESSAGE ****************************************/

test('Gather responses from eligible Leafs', function () {
  plainNode.addChild(leafA, 1000);
  plainNode.addChild(leafB, 2000);
  plainNode.addChild(_leafA, 3000);
  plainNode.addChild(_leafB, 4000);
  var res = node.putMessageOnPipe('gather', {}, {}, {
    selfExecute: true,
    direction: _CONST._DIRECTIONS._DOWN
  });
  expect(res).toEqual([{
    response: '_leafA',
    responder: _leafA,
    positionDelta: 5000
  }, {
    response: '_leafB',
    responder: _leafB,
    positionDelta: 6000
  }]);
});
/************************* UP MESSAGE TARGETING ROOT ****************************/

test('should not get back an answer as the root is not eligible to handle the root request', function () {
  var res = leafA.putMessageOnPipe('rootRequest', {}, _CONST._TARGETTYPES._ROOTOFTREE, {
    selfExecute: false,
    direction: _CONST._DIRECTIONS._UP
  });
  expect(res).toEqual({
    response: false,
    responder: null
  });
});
test('should get back an answer as the root is now eligible to handle the root request', function () {
  testNode.addChild(node, 2000);
  var res = leafA.putMessageOnPipe('rootRequest', {}, _CONST._TARGETTYPES._ROOTOFTREE, {
    selfExecute: false,
    direction: _CONST._DIRECTIONS._UP
  });
  expect(res).toEqual({
    response: 'test-node',
    responder: testNode
  });
});
/************************** GET LEAF BY ID ***************************************/

test('should return the leaf by ID', function () {
  var res = testNode.getLeafById('_leafA');
  expect(res).toEqual(_leafA);
});
/************************** REMOVING LEAFS FROM NODES ****************************/

test('should return error when trying to remove a Leaf that does not exist', function () {
  expect(node.checkRemoveChild('not-existing-id')).toEqual({
    result: false,
    reason: _COPY._LEAFNOTFOUND
  });
});
test('should release its parent when removed from a Node. Also, parent should remove the leaf from its children', function () {
  node.removeChild(plainNode.id);
  expect(plainNode.parentNode).toBe(null);
  expect(plainNode.hasParent).toBe(false);
});
/*********************** EDIT POSITION *******************************/

test('should not allow position edit when negative position is provided', function () {
  var res = plainNode.checkEditPosition('leafA', -150);
  expect(res).toEqual({
    result: false,
    reason: _COPY._NEGATIVEPOSITIONNOTALLOWED
  });
});
test('trying to edit position on an non-existing id should return error', function () {
  var res = plainNode.checkEditPosition('non-existing', 150);
  expect(res).toEqual({
    result: false,
    reason: _COPY._LEAFNOTFOUND
  });
});
test('succesfull editing position', function () {
  var check = plainNode.checkEditPosition('leafB', 5000);
  var res = plainNode.editPosition('leafB', 5000);
  expect(check).toEqual({
    result: true
  });
  expect(res).toEqual({
    result: true
  });
  expect(plainNode.children.leafB).toEqual({
    id: 'leafB',
    leaf: leafB,
    position: 5000
  });
});