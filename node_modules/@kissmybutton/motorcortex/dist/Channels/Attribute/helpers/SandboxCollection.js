"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The goal of this class is to get an original array, provide all the functionality
 * of the Collection class but by keeping the originalArray clean as it was provided.
 */
var SandboxCollection =
/*#__PURE__*/
function () {
  function SandboxCollection(originalArray) {
    _classCallCheck(this, SandboxCollection);

    this.originalArray = originalArray;
    this.extraArray = {};
    this.addedKeys = [];
    this.removedKeys = [];
  }

  _createClass(SandboxCollection, [{
    key: "_hasOwnProperty",
    value: function _hasOwnProperty(key) {
      return Object.prototype.hasOwnProperty.call(this.originalArray, key) || Object.prototype.hasOwnProperty.call(this.extraArray, key);
    }
  }, {
    key: "_get",
    value: function _get(key) {
      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {
        return this.extraArray[key];
      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {
        return undefined;
      } else {
        this.extraArray[key] = Object.assign({}, this.originalArray[key]);
        return this.extraArray[key];
      }
    }
  }, {
    key: "_set",
    value: function _set(key, value) {
      this.extraArray[key] = value;

      if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {
        this.addedKeys.push(key);
      }

      var indexOnRemovedKeys = this.removedKeys.indexOf(key);

      if (indexOnRemovedKeys > -1) {
        this.removedKeys.splice(indexOnRemovedKeys, 1);
      }
    }
  }, {
    key: "_keys",
    value: function _keys() {
      var allKeys = Object.keys(this.originalArray).concat(this.addedKeys);

      for (var i = 0; i < this.removedKeys.length; i++) {
        var indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);
        allKeys.splice(indexOnArray, 1);
      }

      return allKeys;
    }
  }, {
    key: "_delete",
    value: function _delete(key) {
      var indexOnAddedKeys = this.addedKeys.indexOf(key);

      if (indexOnAddedKeys > -1) {
        this.addedKeys.splice(indexOnAddedKeys);
        return delete this.extraArray[key];
      } else {
        return this.removedKeys.push(key);
      }
    }
  }, {
    key: "_export",
    value: function _export() {
      for (var key in this.extraArray) {
        this.originalArray[key] = this.extraArray[key];
      }

      for (var i = 0; i < this.removedKeys.length; i++) {
        delete this.originalArray[this.removedKeys[i]];
      }

      return this.originalArray;
    }
  }]);

  return SandboxCollection;
}();

module.exports = SandboxCollection;