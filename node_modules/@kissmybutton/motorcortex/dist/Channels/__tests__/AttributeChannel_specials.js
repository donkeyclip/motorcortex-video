"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DI = require('../../DescriptiveIncidents/DescriptiveIncident');

var DC = require('../../DescriptiveIncidents/DescriptiveClip');

var MC = require('../../main'); // STATES LOADING


var state1 = require('./states/state1');

var state2 = require('./states/state2');

var state3 = require('./states/state3');

var state4 = require('./states/state4');

var state5 = require('./states/state5');

var state6 = require('./states/state6');

var state7 = require('./states/state7'); // TESTER LOADING


var TesterClass = require('../../../tester/Tester');

var Tester = new TesterClass(); // PLAIN INCIDENTS DEFINITION

var di1 = new DI({
  animatedAttrs: {
    alpha: 1
  }
}, {
  duration: 1000,
  id: 'di1',
  selector: '.my-class'
});
var di2 = new DI({
  animatedAttrs: {
    alpha: 2
  }
}, {
  selector: '.my-class',
  duration: 1000,
  id: 'di2'
});
var di3 = new DI({
  animatedAttrs: {
    alpha: 3
  }
}, {
  selector: '.my-class',
  duration: 1000,
  id: 'di3'
}); // PLUGIN WITH COMPO ATTRIBUTES DEFINITION

var MyPluginIncident =
/*#__PURE__*/
function (_MC$API$MonoIncident) {
  _inherits(MyPluginIncident, _MC$API$MonoIncident);

  function MyPluginIncident() {
    _classCallCheck(this, MyPluginIncident);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
  }

  _createClass(MyPluginIncident, [{
    key: "onGetContext",
    value: function onGetContext() {// console.log('got context');
    }
  }, {
    key: "onProgress",
    value: function onProgress(t) {// eslint-disable-line no-unused-vars
      // console.log('progressing ' + t);
    }
  }, {
    key: "getScratchValue",
    value: function getScratchValue() {
      return {
        gamma: 0,
        delta: 0,
        epsilon: 0
      };
    }
  }]);

  return MyPluginIncident;
}(MC.API.MonoIncident); // An Incident that takes scratch values from the CSS


var MyPluginIncident2 =
/*#__PURE__*/
function (_MC$API$MonoIncident2) {
  _inherits(MyPluginIncident2, _MC$API$MonoIncident2);

  function MyPluginIncident2() {
    _classCallCheck(this, MyPluginIncident2);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident2).apply(this, arguments));
  }

  _createClass(MyPluginIncident2, [{
    key: "onGetContext",
    value: function onGetContext() {// console.log('got context');
    }
  }, {
    key: "onProgress",
    value: function onProgress(t) {// eslint-disable-line no-unused-vars
      // console.log('progressing ' + t);
    }
  }, {
    key: "getScratchValue",
    value: function getScratchValue() {
      return {
        opacity: this.context.window.getComputedStyle(this.element).getPropertyValue('opacity'),
        left: this.context.window.getComputedStyle(this.element).getPropertyValue('left'),
        width: this.element.getAttribute('data-width')
      };
    }
  }]);

  return MyPluginIncident2;
}(MC.API.MonoIncident);

var testPlugin = {
  npm_name: '@kissmybutton/test-plugin',
  name: 'Test Plugin',
  incidents: [{
    exportable: MyPluginIncident,
    name: 'MPInc'
  }, {
    exportable: MyPluginIncident2,
    name: 'MPInc2'
  }],
  compositeAttributes: {
    compo: ["gamma", "delta", "epsilon"],
    compo2: ['opacity', 'left', 'width']
  }
};
var TestPlugin = MC.loadPlugin(testPlugin);
var cdi0 = new TestPlugin.MPInc({
  animatedAttrs: {
    compo: {
      epsilon: 1
    }
  }
}, {
  selector: '.my-class',
  duration: 1000,
  id: 'cdi0'
});
var cdi1 = new TestPlugin.MPInc({
  animatedAttrs: {
    compo: {
      gamma: 1
    }
  }
}, {
  selector: '.my-class',
  duration: 1000,
  id: 'cdi1'
});
var cdi2 = new TestPlugin.MPInc({
  animatedAttrs: {
    compo: {
      delta: 2
    }
  }
}, {
  selector: '.my-class',
  duration: 1000,
  id: 'cdi2'
});
var cdi3 = new TestPlugin.MPInc({
  animatedAttrs: {
    compo: {
      gamma: 3,
      delta: 3
    }
  }
}, {
  selector: '.my-class',
  duration: 1000,
  id: 'cdi3'
}); // CLIPS

var myClip, myRootClip, myCASI; // TESTS

test('Move an Incident from the second index of a lane to the first (0)', function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  var myClip0 = new DC({
    html: "\n                        <div id=\"my-root-div\">\n                            <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                        </div>",
    css: "",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  myClip0.addIncident(di1, 1000);
  myClip0.addIncident(di2, 3000);
  myClip0.addIncident(di3, 5000); // first check that the state of the clip as expected

  var lh = myClip0.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var descTreeTest = Tester.testTree(state1.descriptiveTree, myClip0);
  var realTreeTest = Tester.testTree(state1.realTree, myClip0.realClip);
  var lanesTest = Tester.testLanes(state1.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros(); // move the second incident to the first index

  var res = myClip0.moveIncident('di2', 0);
  expect(res.result).toBe(true);
  descTreeTest = Tester.testTree(state2.descriptiveTree, myClip0);
  realTreeTest = Tester.testTree(state2.realTree, myClip0.realClip);
  lanesTest = Tester.testLanes(state2.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('Add three incidents with composite attributes and check their initial values', function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  myClip = new DC({
    html: "\n                        <div id=\"my-root-div\">\n                            <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                        </div>",
    css: "",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  myClip.addIncident(cdi1, 1000);
  myClip.addIncident(cdi2, 3000);
  myClip.addIncident(cdi3, 5000); // first check that the state of the clip as expected

  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler;
  var descTreeTest = Tester.testTree(state3.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(state3.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(state3.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('move the last combo-attribute item to the zero index. Expect combo attributes of the lane to adapt the change', function () {
  // then move the last item to the zero index and check
  var res = myClip.moveIncident('cdi3', 0);
  expect(res.result).toBe(true); // and check that the state of the clip as expected

  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler;
  var descTreeTest = Tester.testTree(state4.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(state4.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(state4.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('move the second combo-attribute incident to the last position. Expect combo attributes of the lane to adapt the change', function () {
  var res = myClip.moveIncident('cdi1', 5000);
  expect(res.result).toBe(true); // and check that the state of the clip as expected

  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler;
  var descTreeTest = Tester.testTree(state5.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(state5.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(state5.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('move the first combo-attribute incident to the last position. Expect combo attributes of the lane to adapt the change', function () {
  // then move the first incident to the last position and check
  var res = myClip.moveIncident('cdi3', 6000);
  expect(res.result).toBe(true); // and check that the state of the clip as expected

  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler;
  var descTreeTest = Tester.testTree(state6.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(state6.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(state6.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('add a new combo-attribute Incident in the first index. Expect combo attributes of the lane to adapt the change', function () {
  // then add a new Incident in the first index and check
  var res = myClip.addIncident(cdi0, 0);
  expect(res.result).toBe(true); // and check that the state of the clip as expected

  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler;
  var descTreeTest = Tester.testTree(state7.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(state7.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(state7.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('remove the first combo-attribute Incident. Expect combo attributes of the lane to adapt the change', function () {
  // then remove the first Incident and check
  var res = myClip.removeIncident('cdi0');
  expect(res.result).toBe(true); // and check that the state of the clip as expected

  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler;
  var descTreeTest = Tester.testTree(state6.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(state6.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(state6.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test("check fragmented clips scratch values on combo attributes are dynamically recalculated\n    on CASI Copy instantiation when the CASI enters the Clip", function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  myRootClip = new DC({
    html: "\n                        <div id=\"my-root-div\">\n                            <div class=\"casi-container\"></div>\n                            <div class=\"casi-container\"></div>\n                        </div>",
    css: "",
    host: document.querySelector('#clip-container'),
    id: 'my-root-clip'
  });
  myCASI = new DC({
    html: "\n            <div>\n                <div class=\"incident-target\" data-width=\"100px\" data-motorcortex2-id=\"width100\"></div>\n                <div class=\"incident-target\" data-width=\"40px\" data-motorcortex2-id=\"width40\"></div>\n            </div>",
    css: ".incident-target{\n                            opacity: 0;\n                            left: 50px\n                        }",
    selector: '.casi-container',
    id: 'my-root-clip'
  });
  var casiInc1 = new TestPlugin.MPInc2({
    animatedAttrs: {
      compo2: {
        opacity: 1,
        left: '100px'
      }
    }
  }, {
    selector: '.incident-target',
    duration: 1000,
    id: 'casiInc1'
  });
  var casiInc2 = new TestPlugin.MPInc2({
    animatedAttrs: {
      compo2: {
        opacity: 0.5,
        left: '75px'
      }
    }
  }, {
    selector: '.incident-target',
    duration: 1000,
    id: 'casiInc2'
  });
  myCASI.addIncident(casiInc1, 0);
  myCASI.addIncident(casiInc2, 1000);
  myRootClip.addIncident(myCASI, 0); // expect that all CASI Incidents have properly reset their start and end values
  // according to the scratch values gathered from the instantiated (real) clips
  // of the CASI

  var myCASIincidentsById = myCASI.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler.incidentsById;

  var myCASIpluginCAIncidentsKeys = myCASIincidentsById._keys();

  for (var i = 0; i < myCASIpluginCAIncidentsKeys.length; i++) {
    var cai = myCASIincidentsById._get(myCASIpluginCAIncidentsKeys[i]);

    if (cai.constructionIngredients.props.id === 'casiInc1') {
      // first in lane
      for (var contextKey in cai.contexts) {
        // for each context
        if (myCASIpluginCAIncidentsKeys[i] === "casiInc1_width100_compo2") {
          expect(cai.contexts[contextKey].initialValue).toEqual({
            opacity: "0",
            left: '50px',
            width: '100px'
          });
          expect(cai.contexts[contextKey].targetValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '100px'
          });
        } else if (myCASIpluginCAIncidentsKeys[i] === "casiInc1_width40_compo2") {
          expect(cai.contexts[contextKey].initialValue).toEqual({
            opacity: "0",
            left: '50px',
            width: '40px'
          });
          expect(cai.contexts[contextKey].targetValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '40px'
          });
        }
      }
    } else {
      // second in lane
      for (var _contextKey in cai.contexts) {
        // for each context
        if (myCASIpluginCAIncidentsKeys[i] === "casiInc2_width100_compo2") {
          expect(cai.contexts[_contextKey].initialValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '100px'
          });
          expect(cai.contexts[_contextKey].targetValue).toEqual({
            opacity: 0.5,
            left: '75px',
            width: '100px'
          });
        } else if (myCASIpluginCAIncidentsKeys[i] === "casiInc2_width40_compo2") {
          expect(cai.contexts[_contextKey].initialValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '40px'
          });
          expect(cai.contexts[_contextKey].targetValue).toEqual({
            opacity: 0.5,
            left: '75px',
            width: '40px'
          });
        }
      }
    }
  }
});
test("check fragmented clips scratch values on combo attributes are dynamically recalculated\n    on CASI Copy instantiation when the CASI already on a Clip accepts Incidents", function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  myRootClip = new DC({
    html: "\n            <div id=\"my-root-div\">\n                <div class=\"casi-container\"></div>\n                <div class=\"casi-container\"></div>\n            </div>",
    css: "",
    host: document.querySelector('#clip-container'),
    id: 'my-root-clip'
  });
  myCASI = new DC({
    html: "\n            <div>\n                <div class=\"incident-target\" data-width=\"100px\" data-motorcortex2-id=\"width100\"></div>\n                <div class=\"incident-target\" data-width=\"40px\" data-motorcortex2-id=\"width40\"></div>\n            </div>",
    css: ".incident-target{\n                opacity: 0;\n                left: 50px\n            }",
    selector: '.casi-container',
    id: 'my-root-clip'
  });
  myRootClip.addIncident(myCASI, 0);
  var casiInc1 = new TestPlugin.MPInc2({
    animatedAttrs: {
      compo2: {
        opacity: 1,
        left: '100px'
      }
    }
  }, {
    selector: '.incident-target',
    duration: 1000,
    id: 'casiInc1'
  });
  var casiInc2 = new TestPlugin.MPInc2({
    animatedAttrs: {
      compo2: {
        opacity: 0.5,
        left: '75px'
      }
    }
  }, {
    selector: '.incident-target',
    duration: 1000,
    id: 'casiInc2'
  });
  myCASI.addIncident(casiInc1, 0);
  myCASI.addIncident(casiInc2, 1000); // expect that all CASI Incidents have properly reset their start and end values
  // according to the scratch values gathered from the instantiated (real) clips
  // of the CASI

  var myCASIincidentsById = myCASI.realClip.instantiatedChannels['@kissmybutton/test-plugin'].LanesHandler.incidentsById;

  var myCASIpluginCAIncidentsKeys = myCASIincidentsById._keys();

  for (var i = 0; i < myCASIpluginCAIncidentsKeys.length; i++) {
    var cai = myCASIincidentsById._get(myCASIpluginCAIncidentsKeys[i]);

    if (cai.constructionIngredients.props.id === 'casiInc1') {
      // first in lane
      for (var contextKey in cai.contexts) {
        // for each context
        if (myCASIpluginCAIncidentsKeys[i] === "casiInc1_width100_compo2") {
          expect(cai.contexts[contextKey].initialValue).toEqual({
            opacity: "0",
            left: '50px',
            width: '100px'
          });
          expect(cai.contexts[contextKey].targetValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '100px'
          });
        } else if (myCASIpluginCAIncidentsKeys[i] === "casiInc1_width40_compo2") {
          expect(cai.contexts[contextKey].initialValue).toEqual({
            opacity: "0",
            left: '50px',
            width: '40px'
          });
          expect(cai.contexts[contextKey].targetValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '40px'
          });
        }
      }
    } else {
      // second in lane
      for (var _contextKey2 in cai.contexts) {
        // for each context
        if (myCASIpluginCAIncidentsKeys[i] === "casiInc2_width100_compo2") {
          expect(cai.contexts[_contextKey2].initialValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '100px'
          });
          expect(cai.contexts[_contextKey2].targetValue).toEqual({
            opacity: 0.5,
            left: '75px',
            width: '100px'
          });
        } else if (myCASIpluginCAIncidentsKeys[i] === "casiInc2_width40_compo2") {
          expect(cai.contexts[_contextKey2].initialValue).toEqual({
            opacity: 1,
            left: '100px',
            width: '40px'
          });
          expect(cai.contexts[_contextKey2].targetValue).toEqual({
            opacity: 0.5,
            left: '75px',
            width: '40px'
          });
        }
      }
    }
  }
});