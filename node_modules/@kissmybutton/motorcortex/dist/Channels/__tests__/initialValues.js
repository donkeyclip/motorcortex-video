"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MotorCortex = require('../../main');

var myClip;

var TesterClass = require('../../../tester/Tester');

var Tester = new TesterClass();

var iv_state1 = require('./states/iv_state1');

var iv_state2 = require('./states/iv_state2');

var iv_state3 = require('./states/iv_state3');

var iv_state4 = require('./states/iv_state4');

var iv_state5 = require('./states/iv_state5');

var iv_state6 = require('./states/iv_state6');

var iv_state7 = require('./states/iv_state7');

var iv_state8a = require('./states/iv_state8a');

var iv_state8 = require('./states/iv_state8');

var iv_state9 = require('./states/iv_state9');

var iv_state10 = require('./states/iv_state10');

var iv_state11 = require('./states/iv_state11');

var iv_state12 = require('./states/iv_state12');
/*************************** PLUGIN DEFINITION *************************/

/**********************************************************************/


var MyPluginIncident =
/*#__PURE__*/
function (_MotorCortex$API$Mono) {
  _inherits(MyPluginIncident, _MotorCortex$API$Mono);

  function MyPluginIncident() {
    _classCallCheck(this, MyPluginIncident);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
  }

  _createClass(MyPluginIncident, [{
    key: "onGetContext",
    value: function onGetContext() {// console.log('got context');
    }
  }, {
    key: "onProgress",
    value: function onProgress(fraction, ms) {
      // eslint-disable-line no-unused-vars
      var initialValue = this.initialValue;
      var targetValue = this.targetValue;
      var value = initialValue + (targetValue - initialValue) * fraction; // console.log(`initialValue of ${this.id}: ${initialValue}`);
      // console.log(`setting value to ${value} for ms = ${ms}`);

      this.element.setAttribute(this.attributeKey, value);
    }
  }, {
    key: "getScratchValue",
    value: function getScratchValue() {
      // eslint-disable-line no-unused-vars
      if (this.attributeKey === "alpha") {
        return 1;
      } else if (this.attributeKey === "beta") {
        return 2.5;
      } else if (this.attributeKey === "compo") {
        return {
          gamma: 3,
          delta: 4,
          epsilon: 5
        };
      } else {
        return 0;
      }
    }
  }]);

  return MyPluginIncident;
}(MotorCortex.API.MonoIncident);
/*************************** PLUGIN LOADING ***************************/

/**********************************************************************/


var testPlugin0 = {
  npm_name: '@kissmybutton/test-plugin-0',
  name: 'Test Plugin 0',
  incidents: [{
    exportable: MyPluginIncident,
    name: 'MPInc'
  }],
  compositeAttributes: {
    compo: ["gamma", "delta", "epsilon"]
  }
};
var TestPlugin = MotorCortex.loadPlugin(testPlugin0);
/******************************** INCIDENTS ***************************/

/**********************************************************************/

var incident1, cincident1, incident2, cincident2, incident3, cincident3, incident4, cincident4;
test("IV1. Check Incident with initial values on some of its plain attributes", function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  myClip = new MotorCortex.Clip({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  incident1 = new TestPlugin.MPInc({
    animatedAttrs: {
      alpha: 2,
      beta: 2
    },
    initialValues: {
      alpha: 3
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'incident1'
  });
  var res = myClip.addIncident(incident1, 3000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state1.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV2. Check Incident with initial values on some keys of a combo attribute", function () {
  cincident1 = new TestPlugin.MPInc({
    animatedAttrs: {
      compo: {
        gamma: 7,
        delta: 8
      }
    },
    initialValues: {
      compo: {
        gamma: 0,
        epsilon: 1
      }
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'cincident1'
  });
  var res = myClip.addIncident(cincident1, 3000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state2.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV3. check adding an Incident before an Incident with initialValues (plain)", function () {
  incident2 = new TestPlugin.MPInc({
    animatedAttrs: {
      alpha: 20,
      beta: 20
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'incident2'
  });
  var res = myClip.addIncident(incident2, 2000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state3.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV4. check adding an Incident before an Incident with initialValues (combo)", function () {
  cincident2 = new TestPlugin.MPInc({
    animatedAttrs: {
      compo: {
        gamma: 10,
        delta: 11,
        epsilon: 12
      }
    },
    initialValues: {
      compo: {
        delta: 9,
        epsilon: 10
      }
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'cincident2'
  });
  var res = myClip.addIncident(cincident2, 2000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state4.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV5. Check deleting an Incident with no intial values, being on zero index and followed by Incident with initial values (plain attributes)", function () {
  var res = myClip.removeIncident(incident2);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state5.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV6. Check deleting an Incident with initial values being on zero index and followed by Incident with initial values (combo attributes)", function () {
  var res = myClip.removeIncident(cincident2);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state6.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV7. Check moving an Incident with no intial values to the zero index, before an Incident with initial values (plain attributes)", function () {
  var res0 = myClip.addIncident(incident2, 4000);
  expect(res0.result).toBe(true);
  var res = myClip.moveIncident(incident2, 1000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state7.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV8. Check moving an Incident with no intial values to the zero index, before an Incident with initial values (combo attributes)", function () {
  var res0 = myClip.addIncident(cincident2, 4000);
  expect(res0.result).toBe(true);
  var lha = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTesta = Tester.testLanes(iv_state8a.lanes, lha.lanes, lha.incidentsById);
  expect(lanesTesta).toHaveNoErros();
  var res = myClip.moveIncident(cincident2, 1000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state8.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV9. Check moving an Incident followed by Incident with initial values from 0 index to the middle of the lane (plain attributes)", function () {
  incident3 = new TestPlugin.MPInc({
    animatedAttrs: {
      alpha: 30,
      beta: 30
    },
    initialValues: {
      beta: 15
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'incident3'
  });
  var res0 = myClip.addIncident(incident3, 5000);
  expect(res0.result).toBe(true);
  var res = myClip.moveIncident(incident2, 4000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state9.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV10. Check moving an Incident followed by Incident with initial values from 0 index to the middle of the lane (combo attributes)", function () {
  cincident3 = new TestPlugin.MPInc({
    animatedAttrs: {
      compo: {
        gamma: 30
      }
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'cincident3'
  });
  var res0 = myClip.addIncident(cincident3, 5000);
  expect(res0.result).toBe(true);
  var res = myClip.moveIncident(cincident2, 4000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state10.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("IV12. Check moving an Incident of a lane of 4 Incidents from index 2 to index 1  (plain attributes)", function () {
  incident4 = new TestPlugin.MPInc({
    animatedAttrs: {
      alpha: 40,
      beta: 40
    },
    initialValues: {
      alpha: 39
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'incident4'
  });
  var res0 = myClip.addIncident(incident4, 0);
  expect(res0.result).toBe(true);
  var res = myClip.moveIncident(incident2, 1000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state11.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
test("Check moving an Incident of a lane of 4 Incidents from index 2 to index 1  (combo attributes)", function () {
  cincident4 = new TestPlugin.MPInc({
    animatedAttrs: {
      compo: {
        gamma: 40
      }
    },
    initialValues: {
      compo: {
        epsilon: 39
      }
    }
  }, {
    selector: '#element-1',
    duration: 1000,
    id: 'cincident4'
  });
  var res0 = myClip.addIncident(cincident4, 0);
  expect(res0.result).toBe(true);
  var res = myClip.moveIncident(cincident2, 1000);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(iv_state12.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});