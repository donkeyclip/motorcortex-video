"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DC = require('../DescriptiveClip');

var DG = require('../DescriptiveGroup');

var TesterClass = require('../../../tester/Tester');

var Tester = new TesterClass();

var dc2 = require('./states/dc2');

var dc3 = require('./states/dc3');

var dc4 = require('./states/dc4');

var dc5 = require('./states/dc5');

var dc7 = require('./states/dc7');

var dc8 = require('./states/dc8');

var dc9 = require('./states/dc9');

var dc10 = require('./states/dc10');

var dc11 = require('./states/dc11');

var dc12 = require('./states/dc12');

var dc13 = require('./states/dc13');

var dc14 = require('./states/dc14');

var dc15 = require('./states/dc15');

var dc16 = require('./states/dc16');

var dc17 = require('./states/dc17');

var dc18 = require('./states/dc18');

var dc19 = require('./states/dc19');

var dc20 = require('./states/dc20');

var MC = require('../../main');

var dg = new DG({
  id: 'test-group-1'
});
/*************************** PLUGIN DEFINITION *************************/

/**********************************************************************/

var MyPluginIncident =
/*#__PURE__*/
function (_MC$API$MonoIncident) {
  _inherits(MyPluginIncident, _MC$API$MonoIncident);

  function MyPluginIncident() {
    _classCallCheck(this, MyPluginIncident);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
  }

  _createClass(MyPluginIncident, [{
    key: "onGetContext",
    value: function onGetContext() {// console.log('got context');
    }
  }, {
    key: "onProgress",
    value: function onProgress(fraction, ms) {
      // eslint-disable-line no-unused-vars
      var initialValue = this.initialValue;
      var targetValue = this.targetValue;
      var value = initialValue + (targetValue - initialValue) * fraction; // console.log(`initialValue of ${this.id}: ${initialValue}`);
      // console.log(`setting value to ${value} for ms = ${ms}`);

      this.element.setAttribute(this.attributeKey, value);
    }
  }, {
    key: "getScratchValue",
    value: function getScratchValue() {
      // eslint-disable-line no-unused-vars
      if (this.attributeKey === "alpha") {
        return 1;
      } else {
        return 0;
      }
    }
  }]);

  return MyPluginIncident;
}(MC.API.MonoIncident);
/*************************** PLUGIN LOADING ***************************/

/**********************************************************************/


var testPlugin0 = {
  npm_name: '@kissmybutton/test-plugin-0',
  name: 'Test Plugin 0',
  incidents: [{
    exportable: MyPluginIncident,
    name: 'MPInc'
  }]
};
var TestPlugin0 = MC.loadPlugin(testPlugin0);
var DI = TestPlugin0.MPInc;
var myGroup = new DG({
  id: 'my-group'
});
var myClip, clone;
test('DC1. creating a real clip', function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>\n        <div id=\"clip-clone-container\"></div>";
  myClip = new DC({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  clone = myClip.paste(document.getElementById('clip-clone-container'));
  var res = myClip.addIncident(myGroup, 200);
  expect(res).toEqual({
    result: true
  });
});
var testIncident2 = new DI({
  attribute: 'value',
  animatedAttrs: {
    alpha: 2,
    beta: 3
  }
}, {
  selector: '#element-1',
  duration: 2000,
  id: 'test-incident-2'
});
var testIncident3 = new DI({
  attribute: 'value',
  animatedAttrs: {
    alpha: 3
  }
}, {
  selector: '#element-1',
  duration: 1000,
  id: 'test-incident-3'
});
var testIncident4 = new DI({
  attribute: 'value',
  animatedAttrs: {
    alpha: 3
  }
}, {
  selector: '#element-2',
  duration: 1000,
  id: 'test-incident-4'
});
var testIncident5 = new DI({
  attribute: 'value',
  animatedAttrs: {
    alpha: 5,
    beta: 5
  }
}, {
  selector: '.my-class',
  duration: 200,
  delay: 300,
  hiatus: 500,
  id: 'test-incident-5'
}); // PLUGIN DEFINITION

var MyPluginGroup =
/*#__PURE__*/
function (_MC$API$Group) {
  _inherits(MyPluginGroup, _MC$API$Group);

  function MyPluginGroup() {
    _classCallCheck(this, MyPluginGroup);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginGroup).apply(this, arguments));
  }

  _createClass(MyPluginGroup, [{
    key: "buildTree",
    value: function buildTree() {
      for (var i = 0; i < this.attrs.number; i++) {
        var di = new DI({
          animatedAttrs: {
            alpha: i % 2 === 0 ? 2 : 0
          }
        }, {
          duration: 100,
          id: this.id + '_' + i
        });
        this.addIncident(di, i * 100);
      }
    }
  }]);

  return MyPluginGroup;
}(MC.API.Group);

var testPlugin = {
  npm_name: '@kissmybutton/test-plugin',
  name: 'Test Plugin',
  incidents: [{
    exportable: MyPluginGroup,
    name: 'MyPluginGroup'
  }]
};
var TestPlugin = MC.loadPlugin(testPlugin);
var plugin_dg = new TestPlugin.MyPluginGroup({
  number: 4
}, {
  selector: "#element-1",
  id: 'my-plugin-group'
}); // END OF PLUGIN DEFINITION

test('DC2. add a tree consisting of DescriptiveGroups and DescriptiveIncidents on the real tree of the Clip', function () {
  var di = new DI({
    attribute: 'value',
    animatedAttrs: {
      alpha: 1.1,
      beta: 2.2
    }
  }, {
    selector: '.my-class',
    duration: 2000,
    id: 'test-incident-1'
  });
  dg.addIncident(di, 1000);
  var res = myClip.addIncident(dg, 1000);
  var testRes = Tester.testTree(dc2.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc2.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc2.realTree, myClip.realClip);
  expect(res).toEqual({
    result: true
  });
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC3. add a conflicting tree consisting of DescriptiveGroups and DescriptiveIncidents on the real tree of the Clip', function () {
  var testRes = Tester.testTree(dc2.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(dc2.realTree, myClip.realClip);
  expect(testRes.length).toEqual(0);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc2.lanes, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC3. add a tree consisting of DescriptiveIncidents on the real tree of the Clip\n    that will inherit the initial values from the previous Incidents on the lanes", function () {
  var res = myClip.addIncident(testIncident2, 5000);
  var testRes = Tester.testTree(dc3.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc3.lanes, lh.lanes, lh.incidentsById); // const realTreeTest = Tester.testTree(dc3.realTree, myClip.realClip);

  expect(res).toEqual({
    result: true
  });
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test("DC4. add a tree consisting of DescriptiveIncidents on the real tree of the Clip\n    that will inherit the initial values from the previous Incidents on the lanes and\n    affect the initial values of the following", function () {
  var res = myClip.addIncident(testIncident3, 4000);
  var testRes = Tester.testTree(dc4.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc4.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc4.realTree, myClip.realClip);
  expect(res).toEqual({
    result: true
  });
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC5. add a conflicting Incident on a DescriptiveGroup of the Descriptive Tree that already belongs\nto a real tree", function () {
  var di = new DI({
    attribute: 'value',
    animatedAttrs: {
      alpha: 3
    }
  }, {
    selector: '#element-2',
    duration: 1000,
    id: 'test-incident-4'
  });
  var res = dg.addIncident(di, 2000);
  expect(res.result).toEqual(false);
  var testRes = Tester.testTree(dc4.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc4.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc4.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC5.1, edit the duration of an Incident in a way that is conflicting. The edit should be rejected\nand the state should remain the same", function () {
  var res = testIncident3.editProperties({
    selector: '#element-1',
    duration: 2000,
    id: 'test-incident-3'
  });
  expect(res.result).toBe(false);
  expect(res.errors[0].type).toBe('unauthorised, overlapping incidents on the same element');
  var testRes = Tester.testTree(dc4.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc4.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc4.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC6. add a non-conflicting Incident on a DescriptiveGroup of the Descriptive Tree that already belongs\nto a real tree", function () {
  var res = dg.addIncident(testIncident4, 3000);
  expect(res.result).toEqual(true);
  var testRes = Tester.testTree(dc5.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc5.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc5.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC6.1, edit the selector of an Incident in a way that is conflicting. The edit should be rejected\nand the state should remain the same", function () {
  var res = testIncident4.editProperties({
    selector: '#element-1',
    duration: 1000,
    id: 'test-incident-4'
  });
  expect(res.result).toBe(false);
  expect(res.errors[0].type).toBe('unauthorised, overlapping incidents on the same element');
  var testRes = Tester.testTree(dc5.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc5.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc5.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC7. edit the position of an Incident', function () {
  var res = dg.moveIncident(testIncident4, 5000);
  expect(res).toEqual({
    result: true
  });
  var testRes = Tester.testTree(dc7.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc7.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc7.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC8. try to make a conflicting edit the position of an Incident', function () {
  var res = dg.moveIncident('test-incident-4', 1000);
  expect(res.result).toBe(false);
  var testRes = Tester.testTree(dc7.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc7.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc7.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC8. try to edit the position of an Incident providing a negative', function () {
  var res = dg.moveIncident('test-incident-4', -1);
  expect(res.result).toBe(false);
  var testRes = Tester.testTree(dc7.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc7.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc7.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC9. move an Incident by changing its relative position with other Incidents of the lane', function () {
  var res = dg.moveIncident('test-incident-1', 7000);
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc8.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc8.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc8.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC10. remove an Incident from the tree', function () {
  var res = dg.removeIncident(testIncident4);
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc9.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc9.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc9.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC11. remove an Incident that is the first on lane', function () {
  var res = myClip.removeIncident('test-incident-3');
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc10.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc10.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc10.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC12. edit the attributes of an Incident in a way that is accepted', function () {
  var res = testIncident2.editAttributes({
    attribute: 'value',
    animatedAttrs: {
      gamma: 2
    }
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc11.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc11.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc11.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC13. edit the properties of an Incident in a way that is accepted', function () {
  var res = testIncident2.editProperties({
    selector: '#element-1',
    duration: 6000,
    id: 'test-incident-2'
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc12.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc12.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc12.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC14. Edit the attributes of a Descriptive Group exposed by a plugin. Expect the\nedit not to pass due to conflicts", function () {
  var res = myClip.addIncident(plugin_dg, 4000);
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc13.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc13.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc13.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  var editRes = plugin_dg.editAttributes({
    number: 44
  });
  expect(editRes.result).toBe(false);
  testRes = Tester.testTree(dc13.descriptiveTree, myClip);
  lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  lanesTest = Tester.testLanes(dc13.lanes, lh.lanes, lh.incidentsById);
  realTreeTest = Tester.testTree(dc13.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC15. Edit the attributes of a Descriptive Group exposed by a plugin. Expect the\nedit to pass", function () {
  var res = plugin_dg.editAttributes({
    number: 3
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc14.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc14.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc14.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC16. Edit an Incident adding to it initial values. The addition should pass", function () {
  var res = testIncident2.editAttributes({
    attribute: 'value',
    animatedAttrs: {
      gamma: 2
    },
    initialValues: {
      gamma: 3
    }
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc15.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc15.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc15.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC17. an Incident with delay, hiatus and repeats should have derived duration", function () {
  myClip.moveIncident(myGroup, 0);
  myGroup.addIncident(testIncident5, 0);
  var testRes = Tester.testTree(dc16.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc16.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc16.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC18. edit delay on Incident in a non-allowed way", function () {
  var res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 3400,
    hiatus: 500,
    id: 'test-incident-5'
  });
  expect(res.result).toBe(false);
  var testRes = Tester.testTree(dc16.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc16.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc16.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC19. edit delay on Incident in an allowed way", function () {
  var res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 500,
    id: 'test-incident-5'
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc17.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc17.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc17.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC20. edit hiatus on Incident (allowed)", function () {
  var res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 400,
    id: 'test-incident-5'
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc18.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc18.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc18.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('DC21. edit repeats on Incident (not allowed)', function () {
  var res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 400,
    repeats: 12,
    id: 'test-incident-5'
  });
  expect(res.result).toBe(false);
  var testRes = Tester.testTree(dc18.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc18.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc18.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC22. edit repeats on Incident (allowed)", function () {
  var res = testIncident5.editProperties({
    selector: '.my-class',
    duration: 200,
    delay: 200,
    hiatus: 400,
    repeats: 3,
    id: 'test-incident-5'
  });
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc19.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc19.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc19.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC23. resize Incident with delay, hiatus & repeats (not allowed)", function () {
  var res = testIncident5.resize(4800);
  expect(res.result).toBe(false);
  var testRes = Tester.testTree(dc19.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc19.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc19.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC23. resize Incident with delay, hiatus & repeats (allowed)", function () {
  var res = testIncident5.resize(1200);
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc20.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc20.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc20.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC24. resize a group containing an Incident with delay, hiatus & repeats", function () {
  var res = myGroup.resize(2400);
  expect(res.result).toBe(true);
  var testRes = Tester.testTree(dc19.descriptiveTree, myClip);
  var lh = myClip.realClip.instantiatedChannels['@kissmybutton/test-plugin-0'].LanesHandler;
  var lanesTest = Tester.testLanes(dc19.lanes, lh.lanes, lh.incidentsById);
  var realTreeTest = Tester.testTree(dc19.realTree, myClip.realClip);
  expect(testRes).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test("DC25. Clone Clip", function () {
  clone.onProgress(4150 / 11000, 4150); // console.log(ccopyContext);
  // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);

  var ccopyContext = myClip.realClip.instantiatedCopiesContexts[clone.id];
  expect(parseInt(ccopyContext.getElementByMCID('my-class-1').getAttribute('alpha'))).toBe(1);
});