"use strict";

var DC = require('../DescriptiveClip');

var DG = require('../DescriptiveGroup');

var DI = require('../DescriptiveIncident');

var TesterClass = require('../../../tester/Tester');

var Tester = new TesterClass();

var dcasi = require('./states/dcasi1');

var myRootClip;
var myCAsI;
var myHostedClip;
var myGroup = new DG({
  id: 'my-group'
});
test('CAsI1. Add a DescriptiveClip with an Incident to a hosted DescriptiveClip', function () {
  myRootClip = new DC({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    selector: '.clip-container',
    id: 'my-root-clip'
  });
  myCAsI = new DC({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"casi_element-1\" class=\"casi_my-class\" data-motorcortex2-id=\"casi_my-class-1\"></div>\n                <div id=\"casi_element-2\" class=\"casi_my-class\" data-motorcortex2-id=\"casi_my-class-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    selector: '.my-class',
    id: 'casi'
  });
  var di = new DI({
    attribute: 'value',
    animatedAttrs: {
      alpha: 1.1,
      beta: 2.2
    }
  }, {
    selector: '.casi_my-class',
    duration: 2000,
    id: 'test-incident-1'
  });
  myGroup.addIncident(di, 1000);
  var res = myRootClip.addIncident(myCAsI, 500);
  expect(res.result).toEqual(true);
  myCAsI.addIncident(myGroup, 1000);
  var testRes = Tester.testTree(dcasi.descriptiveTree, myRootClip);
  var clipLane = myRootClip.realClip.instantiatedChannels['@kissmybutton/self-contained-incidents'].incidents;
  var clipLanesTest = Tester.testClipLanes(dcasi.clipsLane, clipLane);
  var realTreeTest = Tester.testTree(dcasi.realTree, myRootClip.realClip); // console.log(myRootClip.realClip.children.casi.leaf.children['casi_my-class-1'].leaf.contexts);

  expect(testRes).toHaveNoErros();
  expect(clipLanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});
test('Add a two-levels CAsI into a hosted clip', function () {
  document.body.innerHTML = "<div id=\"my-root-clip\"></div>";
  var host = document.getElementById('my-root-clip');
  myHostedClip = new DC({
    html: "<div>\n            <div class=\"clip-container\" data-motorcortex2-id=\"myRootClip-1\"></div>\n            <div class=\"clip-container\" data-motorcortex2-id=\"myRootClip-2\"></div>\n        </div>",
    css: "",
    host: host,
    id: 'my-hosted-clip'
  });
  var res = myHostedClip.addIncident(myRootClip, 0);
  expect(res.result).toBe(true);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children['test-incident-1_casi_my-class-1'].leaf.children['test-incident-1_casi_my-class-1_alpha'].leaf.contexts).length).toBe(5);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children['test-incident-1_casi_my-class-2'].leaf.children['test-incident-1_casi_my-class-2_alpha'].leaf.contexts).length).toBe(5);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children['test-incident-1_casi_my-class-1'].leaf.children['test-incident-1_casi_my-class-1_beta'].leaf.contexts).length).toBe(5);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-1'].leaf.children['test-incident-1_casi_my-class-2'].leaf.children['test-incident-1_casi_my-class-2_beta'].leaf.contexts).length).toBe(5);
});
test('Add an Incident to an existing multi-level tree', function () {
  var di = new DI({
    attribute: 'value',
    animatedAttrs: {
      alpha: 5,
      beta: 6
    }
  }, {
    selector: '.casi_my-class',
    duration: 2000,
    id: 'test-incident-2'
  });
  var res = myGroup.addIncident(di, 4000);
  expect(res.result).toBe(true);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children['test-incident-2_casi_my-class-1'].leaf.children['test-incident-2_casi_my-class-1_alpha'].leaf.contexts).length).toBe(5);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children['test-incident-2_casi_my-class-2'].leaf.children['test-incident-2_casi_my-class-2_alpha'].leaf.contexts).length).toBe(5);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children['test-incident-2_casi_my-class-1'].leaf.children['test-incident-2_casi_my-class-1_beta'].leaf.contexts).length).toBe(5);
  expect(Object.keys(myCAsI.realClip.children['my-group'].leaf.children['test-incident-2'].leaf.children['test-incident-2_casi_my-class-2'].leaf.children['test-incident-2_casi_my-class-2_beta'].leaf.contexts).length).toBe(5);
});
test('Edit the position of a CAsI', function () {
  var res = myHostedClip.moveIncident('my-root-clip', 1000);
  expect(res.result).toBe(true);
});
test('Export and import definition', function () {
  console.log(JSON.stringify(myHostedClip.exportDefinition()));
});