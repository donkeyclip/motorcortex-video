"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MC = require('../../main');

var DC = MC.Clip;
var TimeCapsule = MC.TimeCapsule;
var TC = new TimeCapsule();
var loggedValues = [];
var mss = [];
var clipsMss = [];
var clipsStates = [];
var myClip;
/*************************** PLUGIN DEFINITION *************************/

/**********************************************************************/

var MyPluginIncident =
/*#__PURE__*/
function (_MC$API$MonoIncident) {
  _inherits(MyPluginIncident, _MC$API$MonoIncident);

  function MyPluginIncident() {
    _classCallCheck(this, MyPluginIncident);

    return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
  }

  _createClass(MyPluginIncident, [{
    key: "onGetContext",
    value: function onGetContext() {// console.log('got context');
    }
  }, {
    key: "onProgress",
    value: function onProgress(fraction, ms) {
      // eslint-disable-line no-unused-vars
      var initialValue = this.initialValue;
      var targetValue = this.targetValue;
      var value = initialValue + (targetValue - initialValue) * fraction;
      loggedValues.push(parseInt(value));
      mss.push(ms);
      clipsMss.push(myClip.runTimeInfo.currentMillisecond);
    }
  }, {
    key: "getScratchValue",
    value: function getScratchValue() {
      // eslint-disable-line no-unused-vars
      return 0;
    }
  }]);

  return MyPluginIncident;
}(MC.API.MonoIncident);
/*************************** PLUGIN LOADING ***************************/

/**********************************************************************/


var testPlugin0 = {
  npm_name: '@kissmybutton/test-plugin-0',
  name: 'Test Plugin 0',
  incidents: [{
    exportable: MyPluginIncident,
    name: 'MPInc'
  }]
};
var TestPlugin0 = MC.loadPlugin(testPlugin0);
var DI = TestPlugin0.MPInc;
var di1 = new DI({
  animatedAttrs: {
    alpha: 10
  }
}, {
  id: 'test-incident-1',
  selector: '#element-1',
  duration: 1000
});
test('Test single execution with steps of 100ms', function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  myClip = new DC({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  myClip.addIncident(di1, 1000); // step 1 / emulated play() command

  myClip.play(true);
  loggedValues = [];

  for (var i = 0; i < 25; i++) {
    myClip.step(i * 100, true);
    clipsStates.push(myClip.runTimeInfo.state);
  }

  expect(clipsStates).toEqual(['playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'playing', 'idle', 'idle', 'idle', 'idle', 'idle']);
  expect(loggedValues).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
}); // test('Test pause / resume functionality', done => {
//     // step 1 / emulated play() command
//     myClip.play(true);
//     loggedValues = [];
//     clipsStates = [];
//     for (let i = 0; i < 5; i++) {
//         myClip.step(i * 300, true);
//         clipsStates.push(myClip.runTimeInfo.state);
//     }
//     myClip.pause();
//     // we pause on purpose many tines to make sure we don't break it
//     myClip.pause();
//     myClip.pause();
//     const delay = 270;
//     setTimeout(() => {
//         myClip.play(true);
//         for (let i = 5; i < 8; i++) {
//             myClip.step(i * 300 + delay, true);
//             clipsStates.push(myClip.runTimeInfo.state);
//         }
//         expect(clipsStates).toEqual(
//             ['playing', 'playing', 'playing', 'playing', 'playing',
//                 'playing', 'playing', 'idle'
//             ]
//         );
//         const expectation = [2, 5, 8, 10];
//         for (let i = 0; i < loggedValues.length; i++) {
//             expect(loggedValues[i]).toBeCloseTo(expectation[i], 1);
//         }
//         done();
//     }, delay);
// });