"use strict";

var resizeState_1 = require('./states/resize_state_1');

var resizeState_2 = require('./states/resize_state_2');

var resizeState_3 = require('./states/resize_state_3');

var resizeState_4 = require('./states/resize_state_4');

var resizeState_5 = require('./states/resize_state_5');

var resizeState_6 = require('./states/resize_state_6');

var resizeState_7 = require('./states/resize_state_7');

var resizeState_8 = require('./states/resize_state_8');

var resizeState_9 = require('./states/resize_state_9');

var resizeState_5_sub = require('./states/resize_state_5-sub');

var resizeState_6_sub = require('./states/resize_state_6-sub');

var resizeState_7_sub = require('./states/resize_state_7-sub');

var resizeState_9_sub = require('./states/resize_state_9-sub');

var TesterClass = require('../../../tester/Tester');

var Tester = new TesterClass();
/******************* DESCRIPTIVE INCIDENT ********************/

var DI = require('../DescriptiveIncident');

var DG = require('../DescriptiveGroup');

var DC = require('../DescriptiveClip');

var myClip;
var di = new DI({
  animatedAttrs: {
    alpha: 2
  }
}, {
  duration: 1000,
  id: 'desc-inc-1',
  selector: '.my-class'
});
var dg = new DG({
  id: 'desc-group-1'
});
var dg2 = new DG({
  id: 'desc-group-2'
});
var di2 = new DI({
  animatedAttrs: {
    alpha: 2
  }
}, {
  selector: '.my-class',
  duration: 3000,
  id: 'desc-inc-2'
}); // CONSTRUCT THE CLIP AS INCIDENT AND PUT AN INCIDENT TO IT ON MS 1000

var casi = new DC({
  html: "\n            <div id=\"my-root-div-2\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\"></div>\n            </div>",
  css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
  selector: '.clip-host',
  id: 'casi'
});
var casiIncident = new DI({
  animatedAttrs: {
    alpha: 3
  }
}, {
  id: 'casi-incident',
  selector: '.my-class',
  duration: 2000
});
casi.addIncident(casiIncident, 1000); // END OF CONSTRUCT THE CLIP AS INCIDENT AND PUT AN INCIDENT TO IT ON MS 1000

test('Resize a Descriptive Incident outside of a Clip should return true and alter its duration', function () {
  var res = di.resize(2000);
  expect(res).toEqual({
    result: true
  });
  expect(di.duration).toBe(2000);
});
test("Try to resize a DescriptiveIncident outside of a Clip by providing the exact same duration should return true but\n    should also not be processed", function () {
  var res = di.resize(2000);
  expect(res.result).toBe(true);
  expect(res.meta.unprocessed).toBe(true);
  expect(di.duration).toBe(2000);
});
test('Try to resize a DescriptiveIncident outside of a Clip by providing negative (or zero) size', function () {
  var res = di.resize(-1);
  expect(res.result).toBe(false);
  expect(res.reason).toBe('Size must always be > 0');
}); // /******************* DESCRIPTIVE GROUP ********************/

test('Resize a Descriptive tree outside of a Clip including one Descriptive Incident', function () {
  dg.addIncident(di, 1000);
  var res = dg.resize(1500);
  expect(res.result).toBe(true);
  var realTreeTest = Tester.testTree(resizeState_1.descriptiveTree, dg);
  expect(realTreeTest).toHaveNoErros();
});
test('Resize a full Descriptive tree outside of a Clip', function () {
  dg2.addIncident(di2, 800);
  dg.addIncident(dg2, 3000);
  var res = dg.resize(3400);
  expect(res.result).toBe(true);
  var realTreeTest = Tester.testTree(resizeState_2.descriptiveTree, dg);
  expect(realTreeTest).toHaveNoErros();
});
test('Resize a Descriptive Incident affecting the duration of its parents, outside of a Clip', function () {
  var res = di2.resize(5000);
  expect(res.result).toBe(true);
  var realTreeTest = Tester.testTree(resizeState_3.descriptiveTree, dg);
  expect(realTreeTest).toHaveNoErros();
});
test('Resize a Group within a real Clip', function () {
  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  myClip = new DC({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\"></div>\n                <div id=\"element-3\" class=\"class-1\" data-motorcortex2-id=\"class-1\"></div>\n                <div class=\"clip-host\" data-motorcortex2-id=\"clip-host-1\"></div>\n                <div class=\"clip-host\" data-motorcortex2-id=\"clip-host-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  myClip.addIncident(dg, 1000);
  var res = dg.resize(3450);
  expect(res.result).toBe(true);
  var lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var descTreeTest = Tester.testTree(resizeState_4.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(resizeState_4.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(resizeState_4.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('Resize an Incident in a way that it conflicts. The resize should be rejected', function () {
  var res = di.resize(4000);
  expect(res.result).toBe(false);
  expect(res.errors.length).toBe(2);
  expect(res.errors[0].type).toBe('anauthorised overlapping animations on the same element');
  expect(res.errors[1].type).toBe('anauthorised overlapping animations on the same element');
  var lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var descTreeTest = Tester.testTree(resizeState_4.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(resizeState_4.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(resizeState_4.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
test('Resize a Clip which contains Clips as Inicdents', function () {
  var res = myClip.addIncident(casi, 1000);
  expect(res.result).toBe(true); // ROOT CLIP TESTS

  var lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var descTreeTest = Tester.testTree(resizeState_5.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(resizeState_5.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(resizeState_5.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros(); // SUBCLIP TESTS

  var s_lh = casi.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var sub_descTreeTest = Tester.testTree(resizeState_5_sub.descriptiveTree, casi);
  var sub_realTreeTest = Tester.testTree(resizeState_5_sub.realTree, casi.realClip);
  var sub_lanesTest = Tester.testLanes(resizeState_5_sub.lanes, s_lh.lanes, s_lh.incidentsById);
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros(); // RESIZE

  var res2 = myClip.resize(890);
  expect(res2.result).toBe(true); // ROOT CLIP TESTS AFTER RESIZE

  descTreeTest = Tester.testTree(resizeState_6.descriptiveTree, myClip);
  realTreeTest = Tester.testTree(resizeState_6.realTree, myClip.realClip);
  lanesTest = Tester.testLanes(resizeState_6.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros(); // SUBCLIP TESTS

  sub_descTreeTest = Tester.testTree(resizeState_6_sub.descriptiveTree, casi);
  sub_realTreeTest = Tester.testTree(resizeState_6_sub.realTree, casi.realClip);
  sub_lanesTest = Tester.testLanes(resizeState_6_sub.lanes, s_lh.lanes, s_lh.incidentsById);
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();
});
test("Resize directly a Clip as Incident belonging to a hosted clip. Expect to pass", function () {
  var res = casi.resize(1200);
  expect(res.result).toBe(true); // ROOT CLIP TESTS

  var lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var descTreeTest = Tester.testTree(resizeState_7.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(resizeState_7.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(resizeState_7.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros(); // SUBCLIP TESTS

  var s_lh = casi.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var sub_descTreeTest = Tester.testTree(resizeState_7_sub.descriptiveTree, casi);
  var sub_realTreeTest = Tester.testTree(resizeState_7_sub.realTree, casi.realClip);
  var sub_lanesTest = Tester.testLanes(resizeState_7_sub.lanes, s_lh.lanes, s_lh.incidentsById);
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();
});
test("Resize a Group containing a Clip as Incident. Expect the resize to pass", function () {
  myClip.removeIncident('casi');
  dg.addIncident(casi, 0); // ROOT CLIP TESTS

  var lh = myClip.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var descTreeTest = Tester.testTree(resizeState_8.descriptiveTree, myClip);
  var realTreeTest = Tester.testTree(resizeState_8.realTree, myClip.realClip);
  var lanesTest = Tester.testLanes(resizeState_8.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros(); // SUBCLIP TESTS

  var s_lh = casi.realClip.instantiatedChannels['motor-cortex-js-attribute'].LanesHandler;
  var sub_descTreeTest = Tester.testTree(resizeState_7_sub.descriptiveTree, casi);
  var sub_realTreeTest = Tester.testTree(resizeState_7_sub.realTree, casi.realClip);
  var sub_lanesTest = Tester.testLanes(resizeState_7_sub.lanes, s_lh.lanes, s_lh.incidentsById);
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros(); // RESIZE

  var res = dg.resize(2400);
  expect(res.result).toBe(true); // ROOT CLIP TESTS AFTER RESIZE

  descTreeTest = Tester.testTree(resizeState_9.descriptiveTree, myClip);
  realTreeTest = Tester.testTree(resizeState_9.realTree, myClip.realClip);
  lanesTest = Tester.testLanes(resizeState_9.lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros(); // SUBCLIP TESTS AFTER RESIZE

  sub_descTreeTest = Tester.testTree(resizeState_9_sub.descriptiveTree, casi);
  sub_realTreeTest = Tester.testTree(resizeState_9_sub.realTree, casi.realClip);
  sub_lanesTest = Tester.testLanes(resizeState_9_sub.lanes, s_lh.lanes, s_lh.incidentsById);
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();
});