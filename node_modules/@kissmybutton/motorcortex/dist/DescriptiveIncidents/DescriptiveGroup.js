"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }

function _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [["method"], ["field"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === "own") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === "static" || placement === "prototype")) { var receiver = placement === "static" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === "field") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { "static": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError("Duplicated element (" + element.key + ")"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError("Duplicated element (" + elements[j].key + ")"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === "field") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, "finisher", "An element descriptor"); this.disallowProperty(elementObject, "extras", "An element descriptor"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== "method" && kind !== "field") { throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== "static" && placement !== "prototype" && placement !== "own") { throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, "elements", "An element descriptor"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== "field") { this.disallowProperty(elementObject, "initializer", "A method descriptor"); } else { this.disallowProperty(descriptor, "get", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "set", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "value", "The property descriptor of a field descriptor"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, "finisher"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: "class", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== "class") { throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"'); } this.disallowProperty(obj, "key", "A class descriptor"); this.disallowProperty(obj, "placement", "A class descriptor"); this.disallowProperty(obj, "descriptor", "A class descriptor"); this.disallowProperty(obj, "initializer", "A class descriptor"); this.disallowProperty(obj, "extras", "A class descriptor"); var finisher = _optionalCallableProperty(obj, "finisher"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== "function") { throw new TypeError("Finishers must return a constructor."); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + " can't have a ." + name + " property."); } } }; return api; }

function _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === "method") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === "get") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === "set") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === "field") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === "field" ? "field" : "method", key: key, placement: def["static"] ? "static" : def.kind === "field" ? "own" : "prototype", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === "field") element.initializer = def.value; return element; }

function _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }

function _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === "method" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === "method" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated."); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ")."); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }

function _hasDecorators(element) { return element.decorators && element.decorators.length; }

function _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }

function _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== "function") { throw new TypeError("Expected '" + name + "' to be a function"); } return value; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _CONST = require('./_CONST');

var _TREECONST = require('../Tree/_CONST');

var Node = require('../Tree/Node');

var resize = require('./decorators/resize');

var editAttributes = require('./decorators/editAttributes');

var editProperties = require('./decorators/editProperties');

var selectorGetter = require('./decorators/selector');

var Group = require('../BaseClasses/Group');

var Channel = require('../Channels/Channel');

var rules = require('../_configuration/propsValidationRules');

var Helper = require('../_coreUtils/Helper');

var helper = new Helper();

var DescriptiveGroup = _decorate(null, function (_initialize, _Node) {
  var DescriptiveGroup =
  /*#__PURE__*/
  function (_Node2) {
    _inherits(DescriptiveGroup, _Node2);

    function DescriptiveGroup() {
      var _this;

      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, DescriptiveGroup);

      if (props === null) {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, attrs));

        _initialize(_assertThisInitialized(_this));

        _this.attrs = {};
        _this.props = attrs;
      } else {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, props));

        _initialize(_assertThisInitialized(_this));

        _this.attrs = attrs;
        _this.props = props;
      }

      var propsValidation = helper.validateProps(_this.props, rules.groupPropsRule, _this.constructor);

      if (propsValidation.result === false) {
        return _possibleConstructorReturn(_this, propsValidation);
      }

      _this._inheritedSelector = null; // passiveAddition is a flag property indicating that any Incident to be
      // added to the Clip will be passive. It initialises with value = false
      // on DescriptiveGroup where it's originaly defined.
      // Here we change its value just before the buildTree method execution
      // so all Incidents added on it get the "passive" flag and don't get
      // exported on the exportDefinition method. Once the buildTree method
      // finishes we set it back to its original value (false)

      _this.passiveAddition = true;

      _this._buildTree();

      _this.passiveAddition = false;
      return _possibleConstructorReturn(_this);
    }

    return DescriptiveGroup;
  }(_Node);

  return {
    F: DescriptiveGroup,
    d: [{
      kind: "field",
      "static": true,
      key: "Incident",
      value: function value() {
        return Group;
      }
    }, {
      kind: "field",
      "static": true,
      key: "plugin_npm_name",
      value: function value() {
        return "motor-cortex-js";
      }
    }, {
      kind: "field",
      "static": true,
      key: "Channel",
      value: function value() {
        return Channel;
      }
    }, {
      kind: "field",
      "static": true,
      key: "ClassName",
      value: function value() {
        return "Group";
      }
    }, {
      kind: "method",
      decorators: [editAttributes],
      key: "editAttributes",
      value: function editAttributes() {}
    }, {
      kind: "method",
      decorators: [editProperties],
      key: "editProperties",
      value: function editProperties() {}
    }, {
      kind: "method",
      decorators: [resize],
      key: "resize",
      value: function resize() {}
    }, {
      kind: "method",
      decorators: [selectorGetter],
      key: "selector",
      value: function selector() {}
    }, {
      kind: "method",
      key: "_buildTree",
      value: function _buildTree() {
        this.buildTree();
      }
    }, {
      kind: "method",
      key: "_rebuildTree",
      value: function _rebuildTree() {
        // remove all direct passive incidents as they might be dependent on the edited attrs/props
        for (var id in this.children) {
          var theChild = this.children[id];

          if (theChild.leaf.passive === true) {
            this.removeIncident(theChild.id);
          }
        } // run buildTree again


        this.passiveAddition = true;
        this.buildTree();
        this.passiveAddition = false;
      }
    }, {
      kind: "method",
      key: "buildTree",
      value: function buildTree() {}
    }, {
      kind: "method",
      key: "manageEditAttrProps",
      value: function manageEditAttrProps(newAttrs, type) {
        // get a permanent reference to its parent node
        var parentNode = this.parentNode; // get the position of the Incident within its parent

        var position = parentNode.getLeafPosition(this.id); // keep a backup of the current attrs / props

        var oldAttrs = JSON.parse(JSON.stringify(this[type]));
        this[type] = newAttrs; // first detach the Incident from its parent

        parentNode.removeIncident(this.id); // remove all direct passive incidents as they might be dependent on the edited attrs/props

        this._rebuildTree(); // try to add the altered Group


        var res = parentNode.addIncident(this, position);

        if (res.result === false) {
          this[type] = oldAttrs;

          this._rebuildTree();

          parentNode.addIncident(this, position);
          return res;
        }

        return res;
      }
    }, {
      kind: "method",
      key: "detachFromParent",
      value: function detachFromParent() {
        _get(_getPrototypeOf(DescriptiveGroup.prototype), "detachFromParent", this).call(this);

        this.inheritedSelector = null;
      }
    }, {
      kind: "get",
      key: "inheritedSelector",
      value: function inheritedSelector() {
        return this._inheritedSelector;
      }
    }, {
      kind: "set",
      key: "inheritedSelector",
      value: function inheritedSelector(value) {
        this._inheritedSelector = value;

        for (var id in this.children) {
          var theChild = this.children[id].leaf;
          theChild.inheritedSelector = this.selector();
        }
      }
    }, {
      kind: "get",
      key: "selectorToPassToChildren",
      value: function selectorToPassToChildren() {
        return this.selector();
      }
      /**
       * The purpose of this method is to export a portable definition that can be
       * later used in order to rebuild the Inicdent at any time
       */

    }, {
      kind: "method",
      key: "exportDefinition",
      value: function exportDefinition() {
        var toReturn = {
          ClassName: this.constructor.ClassName,
          plugin_npm_name: this.constructor.plugin_npm_name,
          attrs: this.attrs,
          props: this.props,
          incidents: {}
        };

        for (var id in this.children) {
          var theChild = this.children[id];

          if (theChild.leaf.passive === true) {
            continue;
          }

          toReturn.incidents[id] = {
            id: theChild.id,
            position: theChild.position,
            leaf: theChild.leaf.exportDefinition()
          };
        }

        return toReturn;
      }
    }, {
      kind: "method",
      key: "addIncident",
      value: function addIncident(descriptiveIncident, position) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          check: true
        };
        descriptiveIncident.inheritedSelector = this.selectorToPassToChildren;

        if (options.check === true) {
          var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), "checkAddition", this).call(this, descriptiveIncident, position);

          if (initialCheck.result === false) {
            descriptiveIncident.inheritedSelector = null;
            return initialCheck;
          }
          /* Check for null or relative selector Incidents with no inherited selector */


          var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {
            selfExecute: true,
            direction: _TREECONST._DIRECTIONS._UP
          });

          if (checkIfBelongsToClip.response === true) {
            // if the Group belongs on a Clip
            var selectorsCheck = descriptiveIncident.putMessageOnPipe('checkForInvalidSelectors', {}, null, {
              selfExecute: true,
              direction: _TREECONST._DIRECTIONS._DOWN
            });

            if (selectorsCheck.length > 0) {
              var errors = [];

              for (var i = 0; i < selectorsCheck.length; i++) {
                errors.push(selectorsCheck[i].response);
              }

              return {
                result: false,
                errors: errors
              };
            }
          } // sends the check request to its root, either a headless root or a Descriptive Clip


          var mcCheck = this.putMessageOnPipe('checkAddition', {
            incident: descriptiveIncident,
            millisecond: position,
            parentGroupId: this.id
          }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {
            selfExecute: true,
            direction: _TREECONST._DIRECTIONS._UP
          });

          if (mcCheck.response.result === false) {
            descriptiveIncident.inheritedSelector = null;
            return mcCheck.response;
          }
        } // if the passiveAddition flag is true we set the passive flag of the Incident
        // to true before adding it to our Group


        if (this.passiveAddition === true) {
          descriptiveIncident.passive = true;
        }

        var res = this.addChild(descriptiveIncident, position);

        if (res.result === false) {
          descriptiveIncident.inheritedSelector = null;
        }

        return res;
      }
      /**
       * @param input - can either be object or id
       **/

    }, {
      kind: "method",
      key: "moveIncident",
      value: function moveIncident(input, position) {
        var id = input;

        if (_typeof(input) === "object") {
          id = input.id;
        }

        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), "checkEditPosition", this).call(this, id, position);

        if (initialCheck.result === false) {
          return initialCheck;
        }

        var originalPosition = this.getLeafPosition(id);
        var positionDelta = position - originalPosition;

        if (positionDelta === 0) {
          return {
            result: true
          };
        }

        var mcCheck = this.putMessageOnPipe('checkMove', {
          id: id,
          millisecond: position,
          positionDelta: positionDelta,
          parentGroupId: this.id
        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {
          selfExecute: true,
          direction: _TREECONST._DIRECTIONS._UP
        });

        if (mcCheck.response.result === false) {
          return mcCheck.response;
        }

        var res = this.editPosition(id, position);
        return res;
      }
    }, {
      kind: "method",
      key: "removeIncident",
      value: function removeIncident(input) {
        var id = input;

        if (_typeof(input) === "object") {
          id = input.id;
        }

        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), "checkRemoveChild", this).call(this, id);

        if (initialCheck.result === false) {
          return initialCheck;
        }

        var mcCheck = this.putMessageOnPipe('checkDeletion', {
          id: id,
          parentGroupId: this.id
        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {
          selfExecute: true,
          direction: _TREECONST._DIRECTIONS._UP
        });

        if (mcCheck.response.result === false) {
          return mcCheck.response;
        }

        var res = this.removeChild(id);
        return res;
      }
      /*************************** HANDLING METHODS *******************************/

    }, {
      kind: "method",
      key: "handleCheckForClip",
      value: function handleCheckForClip(target, payload) {
        // eslint-disable-line no-unused-vars
        if (this.hasParent) {
          return this.bypass();
        }

        return false;
      }
    }, {
      kind: "method",
      key: "handleCheckAddition",
      value: function handleCheckAddition(target, payload) {
        // eslint-disable-line no-unused-vars

        /*
        The DescriptiveGroup handles the checkAddition command which has the UP
        direction. If the DG has a parent it forwards the command to it. If not
        it just returns true, as it is a deadless tree
        */
        if (this.hasParent) {
          return this.bypass();
        }

        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "handleCheckMove",
      value: function handleCheckMove(target, payload) {
        // eslint-disable-line no-unused-vars
        if (this.hasParent) {
          return this.bypass();
        }

        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "handleCheckDeletion",
      value: function handleCheckDeletion(target, payload) {
        // eslint-disable-line no-unused-vars
        if (this.hasParent) {
          return this.bypass();
        }

        return {
          result: true
        };
      }
    }, {
      kind: "method",
      key: "handleCheckResize",
      value: function handleCheckResize(target, payload) {
        // eslint-disable-line no-unused-vars
        if (this.hasParent) {
          return this.bypass();
        }

        return {
          result: true
        };
      }
    }]
  };
}, Node);

module.exports = DescriptiveGroup;