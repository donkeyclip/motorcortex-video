"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MC = require('../main.js');

var TimeCapsule = new MC.TimeCapsule();
test('TimeCapsule journey', function () {
  /*************************** PLUGIN DEFINITION *************************/

  /**********************************************************************/
  var MyPluginIncident =
  /*#__PURE__*/
  function (_MC$API$MonoIncident) {
    _inherits(MyPluginIncident, _MC$API$MonoIncident);

    function MyPluginIncident() {
      _classCallCheck(this, MyPluginIncident);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
    }

    _createClass(MyPluginIncident, [{
      key: "onGetContext",
      value: function onGetContext() {// console.log('got context');
      }
    }, {
      key: "onProgress",
      value: function onProgress(fraction, ms) {
        // eslint-disable-line no-unused-vars
        var initialValue = this.initialValue;
        var targetValue = this.targetValue;
        var value = initialValue + (targetValue - initialValue) * fraction; // console.log(`initialValue of ${this.id}: ${initialValue}`);
        // console.log(`setting value to ${value} for ms = ${ms}`);

        this.element.setAttribute(this.attributeKey, value);
      }
    }, {
      key: "getScratchValue",
      value: function getScratchValue() {
        // eslint-disable-line no-unused-vars
        return 0;
      }
    }]);

    return MyPluginIncident;
  }(MC.API.MonoIncident);

  var MyPluginClip =
  /*#__PURE__*/
  function (_MC$API$Clip) {
    _inherits(MyPluginClip, _MC$API$Clip);

    function MyPluginClip() {
      _classCallCheck(this, MyPluginClip);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginClip).apply(this, arguments));
    }

    _createClass(MyPluginClip, [{
      key: "buildTree",
      value: function buildTree() {}
    }, {
      key: "html",
      get: function get() {
        return "\n            <div>\n                <div class=\"sub-class\" id=\"my-test-div\" data-motorcortex2-id=\"my-subclass-1\"></div>\n                <div class=\"sub-class\" id=\"my-test-div-2\" data-motorcortex2-id=\"my-subclass-2\"></div>\n            <div>";
      }
    }, {
      key: "css",
      get: function get() {
        return '';
      }
    }]);

    return MyPluginClip;
  }(MC.API.Clip);
  /*************************** PLUGIN LOADING ***************************/

  /**********************************************************************/


  var testPlugin = {
    npm_name: '@kissmybutton/test-plugin',
    name: 'Test Plugin',
    incidents: [{
      exportable: MyPluginIncident,
      name: 'MPInc'
    }, {
      exportable: MyPluginClip,
      name: 'MPClip'
    }]
  };
  var TestPlugin = MC.loadPlugin(testPlugin);
  /******************** INCIDENTS INSTANTIATION *************************/

  /**********************************************************************/

  var newMPInc = new TestPlugin.MPInc({
    animatedAttrs: {
      test: 1000
    }
  }, {
    selector: '.my-class',
    duration: 1000
  });
  var newMPInc2 = new TestPlugin.MPInc({
    animatedAttrs: {
      test: 0
    }
  }, {
    selector: '.my-class',
    duration: 500
  });
  var newSubMPInc = new TestPlugin.MPInc({
    animatedAttrs: {
      test: 1000
    }
  }, {
    selector: '.sub-class',
    duration: 1000
  });
  var newMPClip = new TestPlugin.MPClip({
    selector: '.class-1',
    id: 'my-new-MPClip'
  });
  /*********************** ROOT CLIP DEFINITION *************************/

  /**********************************************************************/

  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  var myClip = new MC.Clip({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" data-motorcortex2-id=\"my-class-1\" test=\"0\"></div>\n                <div id=\"element-2\" class=\"my-class\" data-motorcortex2-id=\"my-class-2\" test=\"0\"></div>\n                <div id=\"element-3\" class=\"class-1\" data-motorcortex2-id=\"class-1\"></div>\n                <div id=\"element-3-1\" class=\"class-1\" data-motorcortex2-id=\"class-1-2\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  myClip.addIncident(newMPInc, 0);
  myClip.addIncident(newMPClip, 0);
  myClip.addIncident(newMPInc2, 1200);
  newMPClip.addIncident(newSubMPInc, 1000);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-1').getAttribute('test'))).toBe(0);
  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-2').getAttribute('test'))).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(0);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(0);
  var ccopiesKeys = Object.keys(newMPClip.realClip.instantiatedCopiesContexts);

  for (var i = 0; i < ccopiesKeys.length; i++) {
    var ccopyContext = newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]]; // console.log(ccopyContext);
    // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);

    expect(parseInt(ccopyContext.getElementByMCID('my-subclass-1').getAttribute('test'))).toBe(0);
    expect(parseInt(ccopyContext.getElementByMCID('my-subclass-2').getAttribute('test'))).toBe(0);
  }
  /************************* ROOT CLIP PROGRESS *************************/

  /**********************************************************************/


  var journey = TimeCapsule.startJourney(myClip);
  journey.station(500);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-1').getAttribute('test'))).toBe(500);
  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-2').getAttribute('test'))).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);

  for (var _i = 0; _i < ccopiesKeys.length; _i++) {
    var _ccopyContext = newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[_i]]; // console.log(ccopyContext);
    // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);

    expect(parseInt(_ccopyContext.getElementByMCID('my-subclass-1').getAttribute('test'))).toBe(0);
    expect(parseInt(_ccopyContext.getElementByMCID('my-subclass-2').getAttribute('test'))).toBe(0);
  }
  /************************* ROOT CLIP PROGRESS *************************/

  /**********************************************************************/


  journey.station(1500);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-1').getAttribute('test'))).toBe(400);
  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-2').getAttribute('test'))).toBe(400);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1500);

  for (var _i2 = 0; _i2 < ccopiesKeys.length; _i2++) {
    var _ccopyContext2 = newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[_i2]]; // console.log(ccopyContext);
    // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);

    expect(parseInt(_ccopyContext2.getElementByMCID('my-subclass-1').getAttribute('test'))).toBe(500);
    expect(parseInt(_ccopyContext2.getElementByMCID('my-subclass-2').getAttribute('test'))).toBe(500);
  }
  /************************* ROOT CLIP PROGRESS *************************/

  /**********************************************************************/
  // console.log('-------------------- PROGRESSING BACKWARDS -----------------');


  journey.station(500);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-1').getAttribute('test'))).toBe(500);
  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-2').getAttribute('test'))).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);

  for (var _i3 = 0; _i3 < ccopiesKeys.length; _i3++) {
    var _ccopyContext3 = newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[_i3]]; // console.log(ccopiesKeys[i]);
    // console.log(ccopyContext.getElementByMCID('my-subclass-1').outerHTML);

    expect(parseInt(_ccopyContext3.getElementByMCID('my-subclass-1').getAttribute('test'))).toBe(0);
    expect(parseInt(_ccopyContext3.getElementByMCID('my-subclass-2').getAttribute('test'))).toBe(0);
  }
  /************************* ROOT CLIP PROGRESS *************************/

  /**********************************************************************/
  // console.log('-------------------- FULL INCIDENT JUMP -----------------');


  journey.station(1800);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-1').getAttribute('test'))).toBe(0);
  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-2').getAttribute('test'))).toBe(0);
  /************************* ROOT CLIP PROGRESS *************************/

  /**********************************************************************/
  // console.log('-------- FULL INCIDENT JUMP BACKWARDS ----------------');

  journey.station(1100);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-1').getAttribute('test'))).toBe(1000);
  expect(parseInt(myClip.realClip.context.getElementByMCID('my-class-2').getAttribute('test'))).toBe(1000);
  journey.destination();
  var journeyLog = journey.exportJourneyLog();
  expect(journeyLog).toEqual({
    startMillisecond: 0,
    startState: 'idle',
    stations: [500, 1500, 500, 1800, 1100]
  });
  expect(myClip.runTimeInfo.state).toBe('armed');
});