"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MC = require('../main.js');

test('Export definition', function () {
  /*********************** HELP PLUGIN DEFINITION *************************/

  /**********************************************************************/
  var MyHelpPluginIncident =
  /*#__PURE__*/
  function (_MC$API$MonoIncident) {
    _inherits(MyHelpPluginIncident, _MC$API$MonoIncident);

    function MyHelpPluginIncident() {
      _classCallCheck(this, MyHelpPluginIncident);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyHelpPluginIncident).apply(this, arguments));
    }

    _createClass(MyHelpPluginIncident, [{
      key: "onGetContext",
      value: function onGetContext() {// console.log('got context');
      }
    }, {
      key: "onProgress",
      value: function onProgress(fraction, ms) {
        // eslint-disable-line no-unused-vars
        var initialValue = this.initialValue;
        var targetValue = this.targetValue;
        var value = initialValue + (targetValue - initialValue) * fraction;
        this.element.setAttribute(this.attributeKey, value);
      }
    }, {
      key: "getScratchValue",
      value: function getScratchValue() {
        // eslint-disable-line no-unused-vars
        return 0;
      }
    }]);

    return MyHelpPluginIncident;
  }(MC.API.MonoIncident);

  var helpPlugin = {
    npm_name: '@kissmybutton/help-plugin',
    name: 'Help Plugin',
    incidents: [{
      exportable: MyHelpPluginIncident,
      name: 'MyHelpPluginIncident'
    }],
    compositeAttributes: {
      compo: ["test3", "test4"]
    }
  };
  var HelpPlugin = MC.loadPlugin(helpPlugin);
  /*************************** PLUGIN DEFINITION *************************/

  /**********************************************************************/

  var MyPluginIncident =
  /*#__PURE__*/
  function (_MC$API$MonoIncident2) {
    _inherits(MyPluginIncident, _MC$API$MonoIncident2);

    function MyPluginIncident() {
      _classCallCheck(this, MyPluginIncident);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
    }

    _createClass(MyPluginIncident, [{
      key: "onGetContext",
      value: function onGetContext() {// console.log('got context');
      }
    }, {
      key: "onProgress",
      value: function onProgress(fraction, ms) {
        // eslint-disable-line no-unused-vars
        var initialValue = this.initialValue;
        var targetValue = this.targetValue;
        var value = initialValue + (targetValue - initialValue) * fraction; // console.log(`initialValue of ${this.id}: ${initialValue}`);
        // console.log(`setting value to ${value} for ms = ${ms}`);

        this.element.setAttribute(this.attributeKey, value);
      }
    }, {
      key: "getScratchValue",
      value: function getScratchValue() {
        // eslint-disable-line no-unused-vars
        return 0;
      }
    }]);

    return MyPluginIncident;
  }(MC.API.MonoIncident);

  var MyPluginClip =
  /*#__PURE__*/
  function (_MC$API$Clip) {
    _inherits(MyPluginClip, _MC$API$Clip);

    function MyPluginClip() {
      _classCallCheck(this, MyPluginClip);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginClip).apply(this, arguments));
    }

    _createClass(MyPluginClip, [{
      key: "buildTree",
      value: function buildTree() {
        var passiveIncident_1 = new HelpPlugin.MyHelpPluginIncident({
          animatedAttrs: {
            test: 1000
          }
        }, {
          id: 'descriptive-incident-1',
          selector: '#my-test-div',
          duration: 1000
        });
        var passiveIncident_2 = new HelpPlugin.MyHelpPluginIncident({
          animatedAttrs: {
            test: 2000
          }
        }, {
          id: 'descriptive-incident-2',
          selector: '#my-test-div-2',
          duration: 1000
        });
        this.addIncident(passiveIncident_1, 1000); // den exei

        this.addIncident(passiveIncident_2, 2000); // exei
      }
    }, {
      key: "html",
      get: function get() {
        return "\n            <div>\n                <div class=\"sub-class\" id=\"my-test-div\"></div>\n                <div class=\"sub-class\" id=\"my-test-div-2\"></div>\n            <div>";
      }
    }, {
      key: "css",
      get: function get() {
        return '';
      }
    }]);

    return MyPluginClip;
  }(MC.API.Clip);
  /*************************** PLUGIN LOADING ***************************/

  /**********************************************************************/


  var testPlugin = {
    npm_name: '@kissmybutton/test-plugin',
    name: 'Test Plugin',
    incidents: [{
      exportable: MyPluginIncident,
      name: 'MPInc'
    }, {
      exportable: MyPluginClip,
      name: 'MPClip'
    }]
  };
  var TestPlugin = MC.loadPlugin(testPlugin);
  /******************** INCIDENTS INSTANTIATION *************************/

  /**********************************************************************/

  var newMPInc = new TestPlugin.MPInc({
    animatedAttrs: {
      test: 1000
    }
  }, {
    selector: '.my-class',
    duration: 1000,
    id: 'newMPInc'
  });
  var newSubMPInc = new TestPlugin.MPInc({
    animatedAttrs: {
      test2: 1000
    }
  }, {
    selector: '.sub-class',
    duration: 1000,
    id: 'newSubMPInc'
  });
  var newMPClip = new TestPlugin.MPClip({
    selector: '.class-1',
    id: 'newMPClip'
  });
  /*********************** ROOT CLIP DEFINITION *************************/

  /**********************************************************************/

  document.body.innerHTML = "<div id=\"clip-container\"></div>";
  var myClip = new MC.Clip({
    html: "\n            <div id=\"my-root-div\">\n                <div id=\"element-1\" class=\"my-class\" test=\"0\"></div>\n                <div id=\"element-2\" class=\"my-class\" test=\"0\"></div>\n                <div id=\"element-3\" class=\"class-1\"></div>\n                <div id=\"element-3-1\" class=\"class-1\"></div>\n            </div>",
    css: "\n            #my-root-div {\n                width: 800px;\n                height: 400px;\n            }\n            .my-class {\n                display: inline-block;\n                width: 50%;\n                height: 100%;\n            }\n        ",
    host: document.querySelector('#clip-container'),
    id: 'my-clip'
  });
  myClip.addIncident(newMPInc, 0);
  myClip.addIncident(newMPClip, 0);
  newMPClip.addIncident(newSubMPInc, 1000);
  /*************************** EXPECTATIONS *****************************/

  /**********************************************************************/

  var exported = myClip.exportDefinition();
  expect(exported.plugin_npm_name).toBe('@kissmybutton/self-contained-incidents');
  expect(exported.ClassName).toBe('Clip');
  expect(exported.props.id).toBe('my-clip');
  expect(Object.keys(exported.incidents)).toEqual(['newMPInc', 'newMPClip']);
  expect(exported.incidents.newMPInc.id).toBe('newMPInc');
  expect(exported.incidents.newMPInc.position).toBe(0);
  expect(exported.incidents.newMPInc.leaf.plugin_npm_name).toBe('@kissmybutton/test-plugin');
  expect(exported.incidents.newMPInc.leaf.ClassName).toEqual('MPInc');
  expect(exported.incidents.newMPInc.leaf.attrs).toEqual({
    animatedAttrs: {
      test: 1000
    }
  });
  expect(exported.incidents.newMPInc.leaf.props).toEqual({
    selector: '.my-class',
    duration: 1000,
    id: 'newMPInc'
  });
  expect(exported.incidents.newMPClip.id).toBe('newMPClip');
  expect(exported.incidents.newMPClip.position).toBe(0);
  expect(exported.incidents.newMPClip.leaf.plugin_npm_name).toBe('@kissmybutton/self-contained-incidents');
  expect(exported.incidents.newMPClip.leaf.ClassName).toEqual('MPClip');
  expect(exported.incidents.newMPClip.leaf.attrs).toEqual({});
  expect(exported.incidents.newMPClip.leaf.props).toEqual({
    selector: '.class-1',
    id: 'newMPClip'
  });
  expect(Object.keys(exported.incidents.newMPClip.leaf.incidents)).toEqual(['newSubMPInc']);
  expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.id).toBe('newSubMPInc');
  expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.position).toBe(1000);
  expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.plugin_npm_name).toBe('@kissmybutton/test-plugin');
  expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.ClassName).toEqual('MPInc');
  expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.attrs).toEqual({
    animatedAttrs: {
      test2: 1000
    }
  });
  expect(exported.incidents.newMPClip.leaf.incidents.newSubMPInc.leaf.props).toEqual({
    selector: '.sub-class',
    duration: 1000,
    id: 'newSubMPInc'
  });
});