"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MC = require('../main.js');

var DescriptiveIncident = require('../DescriptiveIncidents/DescriptiveIncident');

var DescriptiveClip = require('../DescriptiveIncidents/DescriptiveClip');

var AttributeChannel = require('../Channels/Attribute/AttributeChannel');

var ClipChannel = require('../Channels/Clip/ClipsChannel');

test('Plugin loading', function () {
  var MyPluginIncident =
  /*#__PURE__*/
  function (_MC$API$MonoIncident) {
    _inherits(MyPluginIncident, _MC$API$MonoIncident);

    function MyPluginIncident() {
      _classCallCheck(this, MyPluginIncident);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginIncident).apply(this, arguments));
    }

    _createClass(MyPluginIncident, [{
      key: "onGetContext",
      value: function onGetContext() {// console.log('got context');
      }
    }, {
      key: "onProgress",
      value: function onProgress(t) {// eslint-disable-line no-unused-vars
        // console.log('progressing ' + t);
      }
    }]);

    return MyPluginIncident;
  }(MC.API.MonoIncident);

  var MyPluginClip =
  /*#__PURE__*/
  function (_MC$API$Clip) {
    _inherits(MyPluginClip, _MC$API$Clip);

    function MyPluginClip() {
      _classCallCheck(this, MyPluginClip);

      return _possibleConstructorReturn(this, _getPrototypeOf(MyPluginClip).apply(this, arguments));
    }

    _createClass(MyPluginClip, [{
      key: "buildTree",
      value: function buildTree() {// console.log('building tree');
      }
    }]);

    return MyPluginClip;
  }(MC.API.Clip);

  var testPlugin = {
    npm_name: '@kissmybutton/test-plugin',
    name: 'Test Plugin',
    incidents: [{
      exportable: MyPluginIncident,
      name: 'MPInc'
    }, {
      exportable: MyPluginClip,
      name: 'MPClip'
    }]
  };
  var TestPlugin = MC.loadPlugin(testPlugin);
  var newMPInc = new TestPlugin.MPInc({
    animatedAttrs: {
      test: 0
    }
  }, {
    selector: '.test',
    duration: 1000
  });
  var newMPClip = new TestPlugin.MPClip({
    selector: '.test-host'
  });
  expect(newMPInc instanceof DescriptiveIncident).toBe(true);
  expect(newMPClip instanceof MC.Clip).toBe(true);
  expect(newMPInc.constructor.Incident).toBe(MyPluginIncident);
  expect(newMPInc.constructor.plugin_npm_name).toBe('@kissmybutton/test-plugin');
  expect(newMPInc.constructor.Channel).toBe(AttributeChannel);
  expect(newMPInc.constructor.plugin).toBe('Test Plugin');
  expect(newMPClip.constructor.Incident).toBe(DescriptiveClip.Incident);
  expect(newMPClip.constructor.plugin_npm_name).toBe("@kissmybutton/self-contained-incidents");
  expect(newMPClip.constructor.Channel).toBe(ClipChannel);
  expect(newMPClip.constructor.plugin).toBe('Test Plugin');
});