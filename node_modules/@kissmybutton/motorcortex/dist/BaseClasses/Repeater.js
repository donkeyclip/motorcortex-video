"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Group = require('./Group');

var incidentFromIngredients = require('../IncidentFromDefinition/incidentFromIngredients');

var _CONST = require('../_configuration/_CONST');

var _TREECONST = require('../Tree/_CONST');

var Repeater =
/*#__PURE__*/
function (_Group) {
  _inherits(Repeater, _Group);

  function Repeater(descriptiveGroup, contextData) {
    var _this;

    _classCallCheck(this, Repeater);

    // we make sure the Repeater takes the same id as the Descriptive Incident
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Repeater).call(this, {}, {
      id: descriptiveGroup.id
    }));

    _this.setUp(descriptiveGroup, contextData);

    return _this;
  }

  _createClass(Repeater, [{
    key: "setUp",
    value: function setUp(descriptiveGroup, contextData) {
      var incidentFromDescription = require('../IncidentFromDefinition/incidentFromDescription'); // delay, repeats and hiatus formula


      for (var i = 0; i < descriptiveGroup.repeats; i++) {
        var gap = descriptiveGroup.delay + descriptiveGroup.hiatus;

        if (i === 0) {
          gap = descriptiveGroup.delay;
        }

        var id = "".concat(descriptiveGroup.id).concat(_CONST.repeatPrefix).concat(i);
        var repeatGroup = incidentFromIngredients({
          id: id,
          attrs: descriptiveGroup.attrs,
          props: _objectSpread({}, descriptiveGroup.props, {
            id: id
          }),
          Incident: descriptiveGroup.constructor.Incident,
          plugin_npm_name: descriptiveGroup.constructor.plugin_npm_name,
          Channel: descriptiveGroup.constructor.Channel,
          DescriptiveIncident: descriptiveGroup
        });

        for (var incId in descriptiveGroup.children) {
          var childIncident = incidentFromDescription(descriptiveGroup.children[incId].leaf, contextData);

          if (childIncident === null) {
            continue;
          }

          repeatGroup.addChild(childIncident, descriptiveGroup.children[incId].position);
        }

        this.addChild(repeatGroup, gap);
      }
    }
  }, {
    key: "handleAddIncident",
    value: function handleAddIncident(target, payload) {
      /* when the Repeater gets the handleAddIncident command two things might be happening:
      a) The repeater is the target, so it should proxy the request to all of its children
      b) The repeater is not the target, so it should bypass as normal
      */
      if (this.id === target) {
        return this.bypass(_CONST.allGroupsTarget);
      } else {
        return this.bypass();
      }
    }
  }, {
    key: "handleMoveIncident",
    value: function handleMoveIncident(target, payload) {
      if (this.id === target) {
        return this.bypass(_CONST.allGroupsTarget);
      } else {
        return this.bypass();
      }
    }
  }, {
    key: "handleRemoveIncident",
    value: function handleRemoveIncident(target, payload) {
      if (this.id === target) {
        return this.bypass(_CONST.allGroupsTarget);
      } else {
        return this.bypass();
      }
    }
  }]);

  return Repeater;
}(Group);

module.exports = Repeater;