"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MonoIncident = require('../../BaseClasses/MonoIncident');
/**
 * Effect class takes on constructor:
 * attrs:
 *  - animatedAttrs: valid animated attributes are "gain", "pan"
 *  -
 **/


var Effect =
/*#__PURE__*/
function (_MonoIncident) {
  _inherits(Effect, _MonoIncident);

  function Effect() {
    _classCallCheck(this, Effect);

    return _possibleConstructorReturn(this, _getPrototypeOf(Effect).apply(this, arguments));
  }

  _createClass(Effect, [{
    key: "onProgress",
    value: function onProgress(fraction, ms) {
      var _this = this;

      if (this.element.soundLoaded === false) {
        this.setBlock('loading sound');
        this.element.pubSub.sub(this.id, function () {
          _this.unblock();
        });
        return false;
      }

      if (this.attributeKey === "gain") {
        var gain = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);

        this.element.effectsAudioNode.gainNode.gain.value = gain;
      } else if (this.attributeKey === "pan") {
        var pan = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);

        this.element.effectsAudioNode.pannerNode.pan.value = pan;
      }
    }
  }, {
    key: "getScratchValue",
    value: function getScratchValue() {
      if (this.attributeKey === "pan") {
        if (this.element.startValues.hasOwnProperty('pan')) {
          return this.element.startValues.pan;
        } else {
          return 0;
        }
      } else if (this.attributeKey === "gain") {
        if (this.element.startValues.hasOwnProperty('gain')) {
          return this.element.startValues.gain;
        } else {
          return 1;
        }
      }
    }
  }]);

  return Effect;
}(MonoIncident);

module.exports = Effect;