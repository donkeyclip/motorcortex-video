"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MediaPlayIncident = require('../../BaseClasses/MediaPlayIncident');

var Helper = require('../../_coreUtils/Helper');

var helper = new Helper();
/**
 * expects on its props:
 * - selector
 * - duration
 * - startFrom (optional)
 **/

var AudioPlayback =
/*#__PURE__*/
function (_MediaPlayIncident) {
  _inherits(AudioPlayback, _MediaPlayIncident);

  function AudioPlayback() {
    _classCallCheck(this, AudioPlayback);

    return _possibleConstructorReturn(this, _getPrototypeOf(AudioPlayback).apply(this, arguments));
  }

  _createClass(AudioPlayback, [{
    key: "play",
    value: function play(millisecond) {
      var _this = this;

      if (this.element.soundLoaded === false) {
        this.setBlock('loading sound');
        this.element.pubSub.sub(this.id, function () {
          _this.unblock();
        });
        return false;
      }

      var startFrom = 0;

      if (Object.prototype.hasOwnProperty.call(this.props, 'startFrom')) {
        startFrom = this.props.startFrom;
      }

      this.audioNode = helper.getAudioContext().createBufferSource();
      this.audioNode.buffer = this.element.buffer;
      this.audioNode.connect(this.element.effectsAudioNode.input);
      this.audioNode.start(0, (millisecond + startFrom) / 1000);
      return true;
    }
  }, {
    key: "stop",
    value: function stop() {
      this.audioNode.stop();
    }
  }]);

  return AudioPlayback;
}(MediaPlayIncident);

module.exports = AudioPlayback;