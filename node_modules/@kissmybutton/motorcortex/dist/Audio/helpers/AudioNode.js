"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Helper = require('../../_coreUtils/Helper');

var helper = new Helper();

var AudioNode =
/*#__PURE__*/
function () {
  function AudioNode() {
    _classCallCheck(this, AudioNode);

    // audio context initialisation
    var audioContext = helper.getAudioContext();
    this.output = audioContext.createGain();
    this.gainNode = audioContext.createGain();

    if (audioContext.createStereoPanner) {
      this.pannerNode = audioContext.createStereoPanner(); // if it is supported by the browser
    } // this.highpassNode = audioContext.createBiquadFilter();
    // this.lowpassNode = audioContext.createBiquadFilter();
    // this.lowpassNode.connect(this.highpassNode);
    // this.highpassNode.connect(this.pannerNode);


    if (audioContext.createStereoPanner) {
      this.pannerNode.connect(this.gainNode);
      this.gainNode.connect(this.output);
      this.input = this.pannerNode;
    } else {
      this.gainNode.connect(this.output);
      this.input = this.gainNode;
    }
  }

  _createClass(AudioNode, [{
    key: "connect",
    value: function connect(master) {
      this.output.connect(master);
    }
  }, {
    key: "disconnect",
    value: function disconnect(master) {
      this.output.disconnect();
    }
  }]);

  return AudioNode;
}();

module.exports = AudioNode;