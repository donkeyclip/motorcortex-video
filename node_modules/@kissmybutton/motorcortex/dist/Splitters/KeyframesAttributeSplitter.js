"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Group = require('../BaseClasses/Group');

var ContextAwareIncident = require('./ContextAwareIncident');

var KeyframesAttributeSplitter =
/*#__PURE__*/
function (_Group) {
  _inherits(KeyframesAttributeSplitter, _Group);

  function KeyframesAttributeSplitter(descriptiveIncident, contextData, mcid, selector) {
    var _this;

    _classCallCheck(this, KeyframesAttributeSplitter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(KeyframesAttributeSplitter).call(this, {}, {
      id: "".concat(descriptiveIncident.id, "_").concat(mcid)
    }));
    _this.mcid = mcid;
    _this.selector = selector;

    _this.setUp(descriptiveIncident, contextData);

    return _this;
  }

  _createClass(KeyframesAttributeSplitter, [{
    key: "_createAttrubuteSequences",
    value: function _createAttrubuteSequences(keyframes) {
      /*
      an object holding arrays of incidents per attribute in the form:
      {
          <attribute>: [
              {
                  start: 0.3,
                  end: 0.4,
                  duration: 0.1,
                  startValue: 2,
                  value: 3
              }, ...
          ]
      }
      */
      var attributeSets = {};

      for (var percentage in keyframes) {
        var end = parseInt(percentage) / 100;

        for (var attribute in keyframes[percentage]) {
          var value = keyframes[percentage][attribute];

          if (!Object.prototype.hasOwnProperty.call(attributeSets, attribute)) {
            attributeSets[attribute] = [{
              start: 0,
              end: end,
              startValue: null,
              value: value,
              duration: end
            }];
          } else {
            var previousEntry = attributeSets[attribute][attributeSets[attribute].length - 1];
            attributeSets[attribute].push({
              start: previousEntry.end,
              end: end,
              startValue: previousEntry.value,
              value: value,
              duration: (10 * end - 10 * previousEntry.end) / 10
            });
          }
        }
      }

      return attributeSets;
    }
  }, {
    key: "setUp",
    value: function setUp(descriptiveIncident, contextData) {
      var attributeSets = this._createAttrubuteSequences(descriptiveIncident.attrs.keyframes);

      for (var attr in descriptiveIncident.attrs.animatedAttrs) {
        var singleAnimatedAttrs = {};
        singleAnimatedAttrs[attr] = descriptiveIncident.attrs.animatedAttrs[attr];

        var attrsToPass = _objectSpread({}, descriptiveIncident.attrs, {
          animatedAttrs: singleAnimatedAttrs
        });

        var propsToPass = _objectSpread({}, descriptiveIncident.props, {
          selector: this.selector
        });

        var constructionIngredients = {
          incidentId: descriptiveIncident.id,
          attrs: attrsToPass,
          props: propsToPass,
          Incident: descriptiveIncident.constructor.Incident,
          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,
          Channel: descriptiveIncident.constructor.Channel,
          DescriptiveIncident: descriptiveIncident
        };
        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, this.mcid, attr);
        this.addChild(contextAwareIncident, 0);
      }
    }
  }]);

  return KeyframesAttributeSplitter;
}(Group);

module.exports = KeyframesAttributeSplitter;