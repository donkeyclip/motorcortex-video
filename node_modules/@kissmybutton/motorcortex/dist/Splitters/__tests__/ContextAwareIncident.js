"use strict";

var ContextAwareIncident = require('../ContextAwareIncident');

var MonoIncident = require('../../BaseClasses/MonoIncident');

var Channel = require('../../Channels/Channel');

var constructionIngredients = {
  incidentId: 'incident-id',
  attrs: {
    animatedAttrs: {
      alpha: 1.1
    }
  },
  props: {
    selector: 'an-mcid-targeting-selector'
  },
  Incident: MonoIncident,
  plugin_npm_name: 'my_test_plugin',
  Channel: Channel
};
var contextData = {
  clipId: 'my-test-clip-id',
  context: {}
};
var cai = new ContextAwareIncident(constructionIngredients, contextData, 'my-mcid', 'alpha');
test("ContextAwareIncident shoud initialise by creating an Incident and\n            assigning it to the original context key", function () {
  // console.log(dg1);
  expect(cai.id).toEqual('incident-id_my-mcid_alpha');
  expect(Object.keys(cai.contexts).length).toEqual(1);
  expect(cai.contexts['my-test-clip-id'].constructor).toEqual(MonoIncident);
  expect(cai.originalContext).toEqual(cai.contexts['my-test-clip-id']);
  expect(cai.contexts['my-test-clip-id'].attrs).toEqual(constructionIngredients.attrs);
});
test("ContextAwareIncident should create one key-value pair on on its\n            contexts map, per new context added to it", function () {
  cai.setInitialValue({
    "final": true,
    value: '3'
  });
  cai.addContext({
    clipId: 'my-second-clip-id',
    context: {}
  });
  expect(Object.keys(cai.contexts).length).toEqual(2);
  expect(cai.contexts['my-second-clip-id'].constructor).toEqual(MonoIncident);
  expect(cai.originalContext).toEqual(cai.contexts['my-test-clip-id']);
  expect(cai.contexts['my-second-clip-id'].attrs).toEqual(constructionIngredients.attrs);
});