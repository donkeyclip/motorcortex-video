"use strict";

var KeyframesAttributeSplitter = require('../KeyframesAttributeSplitter');

var DescriptiveIncident = require('../../DescriptiveIncidents/DescriptiveIncident');

var mockContext = {
  rootElement: {
    querySelectorAll: function querySelectorAll(selector) {
      // eslint-disable-line no-unused-vars
      return ['element1', 'element2', 'element3'];
    }
  },
  getMCID: function getMCID(element) {
    return element;
  },
  getElementSelectorByMCID: function getElementSelectorByMCID(mcid) {
    return "".concat(mcid, "-selector");
  },
  getElements: function getElements(selector) {
    return ['element1', 'element2', 'element3'];
  }
};
var contextData = {
  clipId: 'test-clip-id',
  context: mockContext
};
var di = new DescriptiveIncident({
  animatedAttrs: {
    alpha: 1.1,
    beta: 2.2
  }
}, {
  selector: 'my-test-selector'
});
var kfas = new KeyframesAttributeSplitter(di, contextData);
test("keyframes split 1", function () {
  var keyframes = {
    10: {
      alpha: 1,
      beta: 1.1,
      gamma: 1.11
    },
    30: {
      alpha: 2,
      delta: 2.2
    },
    80: {
      gamma: 3
    },
    100: {
      gamma: 6,
      alpha: 6.5
    }
  };

  var attributesSet = kfas._createAttrubuteSequences(keyframes);

  expect(attributesSet).toEqual({
    alpha: [{
      start: 0,
      end: 0.1,
      startValue: null,
      value: 1,
      duration: 0.1
    }, {
      start: 0.1,
      end: 0.3,
      startValue: 1,
      value: 2,
      duration: 0.2
    }, {
      start: 0.3,
      end: 1,
      startValue: 2,
      value: 6.5,
      duration: 0.7
    }],
    beta: [{
      start: 0,
      end: 0.1,
      startValue: null,
      value: 1.1,
      duration: 0.1
    }],
    gamma: [{
      start: 0,
      end: 0.1,
      startValue: null,
      value: 1.11,
      duration: 0.1
    }, {
      start: 0.1,
      end: 0.8,
      startValue: 1.11,
      value: 3,
      duration: 0.7
    }, {
      start: 0.8,
      end: 1,
      startValue: 3,
      value: 6,
      duration: 0.2
    }],
    delta: [{
      start: 0,
      end: 0.3,
      startValue: null,
      value: 2.2,
      duration: 0.3
    }]
  });
});
test("keyframes split 2", function () {
  var keyframes = {
    0: {
      alpha: 1,
      beta: 1.1
    },
    50: {
      alpha: 2,
      delta: 2.2
    },
    80: {
      gamma: 3
    },
    100: {
      gamma: 6
    }
  };

  var attributesSet = kfas._createAttrubuteSequences(keyframes);

  expect(attributesSet).toEqual({
    alpha: [{
      start: 0,
      end: 0,
      startValue: null,
      value: 1,
      duration: 0
    }, {
      start: 0,
      end: 0.5,
      startValue: 1,
      value: 2,
      duration: 0.5
    }],
    beta: [{
      start: 0,
      end: 0,
      startValue: null,
      value: 1.1,
      duration: 0
    }],
    delta: [{
      start: 0,
      end: 0.5,
      startValue: null,
      value: 2.2,
      duration: 0.5
    }],
    gamma: [{
      start: 0,
      end: 0.8,
      startValue: null,
      value: 3,
      duration: 0.8
    }, {
      start: 0.8,
      end: 1,
      startValue: 3,
      value: 6,
      duration: 0.2
    }]
  });
});