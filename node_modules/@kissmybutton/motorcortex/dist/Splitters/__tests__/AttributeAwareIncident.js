"use strict";

var AnimatedAttributeSplitter = require('../AnimatedAttributeSplitter');

var DescriptiveIncident = require('../../DescriptiveIncidents/DescriptiveIncident');

var di = new DescriptiveIncident({
  animatedAttrs: {
    alpha: 1.1,
    beta: 2.2
  }
}, {
  duration: 1,
  selector: 'my-test-selector'
});
var contextData = {
  clipId: 'my-test-clip-id',
  context: {}
};
var aai = new AnimatedAttributeSplitter(di, contextData, 'specific-mcid', 'specific-mcid-targeting-selector');
test("AnimatedAttributeSplitter should set up one ContextAwareIncident on 0 position per attribute\n        on construction time", function () {
  expect(Object.keys(aai.children).length).toEqual(2);
  expect(Object.keys(aai.children)).toContain("".concat(di.id, "_specific-mcid_alpha"));
  expect(Object.keys(aai.children)).toContain("".concat(di.id, "_specific-mcid_beta"));
  expect(aai.children["".concat(di.id, "_specific-mcid_alpha")].position).toEqual(0);
  expect(aai.children["".concat(di.id, "_specific-mcid_beta")].position).toEqual(0);
  expect(aai.children["".concat(di.id, "_specific-mcid_alpha")].id).toEqual("".concat(di.id, "_specific-mcid_alpha"));
  expect(aai.children["".concat(di.id, "_specific-mcid_beta")].id).toEqual("".concat(di.id, "_specific-mcid_beta"));
  expect(aai.children["".concat(di.id, "_specific-mcid_alpha")].leaf.id).toEqual("".concat(di.id, "_specific-mcid_alpha"));
  expect(aai.children["".concat(di.id, "_specific-mcid_beta")].leaf.id).toEqual("".concat(di.id, "_specific-mcid_beta"));
});