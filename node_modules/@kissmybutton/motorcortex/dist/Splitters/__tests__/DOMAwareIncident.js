"use strict";

/*
In order to test ElementSplitter we need to pass a context that has the
following structure / methods:
context: {
    document: {
        querySelectorAll(selector) {
            return ['element1', 'element2', 'element3']
        }
    },
    getMCID(element) {
        return element;
    },
    getElementSelectorByMCID(mcid) {
        return `${mcid}-selector`;
    }
}
*/
var ElementSplitter = require('../ElementSplitter');

var DescriptiveIncident = require('../../DescriptiveIncidents/DescriptiveIncident');

var mockContext = {
  rootElement: {
    querySelectorAll: function querySelectorAll(selector) {
      // eslint-disable-line no-unused-vars
      return ['element1', 'element2', 'element3'];
    }
  },
  getMCID: function getMCID(element) {
    return element;
  },
  getElementSelectorByMCID: function getElementSelectorByMCID(mcid) {
    return "".concat(mcid, "-selector");
  },
  getElements: function getElements(selector) {
    return ['element1', 'element2', 'element3'];
  }
};
var contextData = {
  clipId: 'test-clip-id',
  context: mockContext
};
var di = new DescriptiveIncident({
  animatedAttrs: {
    alpha: 1.1,
    beta: 2.2
  }
}, {
  duration: 1,
  selector: 'my-test-selector'
});
var dai = new ElementSplitter(di, contextData);
test("ElementSplitter should set up one AnimatedAttributeSplitter on 0 position per element\n        on construction time", function () {
  expect(Object.keys(dai.children).length).toEqual(3);
  expect(Object.keys(dai.children)).toContain("".concat(di.id, "_element1"));
  expect(Object.keys(dai.children)).toContain("".concat(di.id, "_element2"));
  expect(Object.keys(dai.children)).toContain("".concat(di.id, "_element3"));
  expect(dai.children["".concat(di.id, "_element1")].position).toEqual(0);
  expect(dai.children["".concat(di.id, "_element2")].position).toEqual(0);
  expect(dai.children["".concat(di.id, "_element3")].position).toEqual(0);
  expect(dai.children["".concat(di.id, "_element1")].id).toEqual("".concat(di.id, "_element1"));
  expect(dai.children["".concat(di.id, "_element2")].id).toEqual("".concat(di.id, "_element2"));
  expect(dai.children["".concat(di.id, "_element3")].id).toEqual("".concat(di.id, "_element3"));
  expect(dai.children["".concat(di.id, "_element1")].leaf.id).toEqual("".concat(di.id, "_element1"));
  expect(dai.children["".concat(di.id, "_element2")].leaf.id).toEqual("".concat(di.id, "_element2"));
  expect(dai.children["".concat(di.id, "_element3")].leaf.id).toEqual("".concat(di.id, "_element3"));
});